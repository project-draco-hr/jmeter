{
  Node node;
  MetaTag meta;
  String httpEquiv;
  String charset;
  EndTag end;
  if (null != url_conn)   try {
    if (null == scanners.get("-m")) {
      addScanner(new MetaTagScanner("-m"));
      remove_scanner=true;
    }
    while (null != (node=ret.peek())) {
      if (node instanceof MetaTag) {
        meta=(MetaTag)node;
        httpEquiv=meta.getAttribute("HTTP-EQUIV");
        if ("Content-Type".equalsIgnoreCase(httpEquiv)) {
          charset=getCharset(meta.getAttribute("CONTENT"));
          if (!charset.equalsIgnoreCase(character_set)) {
            character_set=charset;
            recreateReader();
            ret=new IteratorImpl(reader,resourceLocn,feedback);
          }
          break;
        }
      }
 else       if (node instanceof EndTag) {
        end=(EndTag)node;
        if (end.getTagName().equalsIgnoreCase("HEAD"))         break;
      }
    }
  }
 catch (  UnsupportedEncodingException uee) {
    String msg="elements() : The content of " + url_conn.getURL().toExternalForm() + " has an encoding which is not supported";
    ParserException ex=new ParserException(msg,uee);
    feedback.error(msg,ex);
    throw ex;
  }
catch (  IOException ioe) {
    String msg="elements() : Error in opening a connection to " + url_conn.getURL().toExternalForm();
    ParserException ex=new ParserException(msg,ioe);
    feedback.error(msg,ex);
    throw ex;
  }
 finally {
    if (remove_scanner)     scanners.remove("-m");
  }
  return ret;
}
