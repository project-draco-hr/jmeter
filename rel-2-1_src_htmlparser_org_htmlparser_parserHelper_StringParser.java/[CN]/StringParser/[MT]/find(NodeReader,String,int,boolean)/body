{
  StringBuffer textBuffer=new StringBuffer();
  int state=BEFORE_PARSE_BEGINS_STATE;
  int textBegin=position;
  int textEnd=position;
  int inputLen=input.length();
  char ch;
  char ignore_ender='\"';
  for (int i=position; (i < inputLen && state != PARSE_COMPLETED_STATE); i++) {
    ch=input.charAt(i);
    if (ch == '<' && state != PARSE_IGNORE_STATE) {
      if (beginTag(input,i)) {
        state=PARSE_COMPLETED_STATE;
        textEnd=i - 1;
      }
    }
    if (balance_quotes && (ch == '\'' || ch == '"')) {
      if (state == PARSE_IGNORE_STATE) {
        if (ch == ignore_ender)         state=PARSE_HAS_BEGUN_STATE;
      }
 else {
        ignore_ender=ch;
        state=PARSE_IGNORE_STATE;
      }
    }
    if (state == BEFORE_PARSE_BEGINS_STATE) {
      state=PARSE_HAS_BEGUN_STATE;
    }
    if (state == PARSE_HAS_BEGUN_STATE || state == PARSE_IGNORE_STATE) {
      textBuffer.append(input.charAt(i));
    }
    if (state == BEFORE_PARSE_BEGINS_STATE && i == inputLen - 1)     state=PARSE_HAS_BEGUN_STATE;
    if (state == PARSE_HAS_BEGUN_STATE && i == inputLen - 1) {
      do {
        input=reader.getNextLine();
        if (input != null && input.length() == 0)         textBuffer.append(Node.getLineSeparator());
      }
 while (input != null && input.length() == 0);
      if (input == null) {
        textEnd=i;
        state=PARSE_COMPLETED_STATE;
      }
 else {
        textBuffer.append(Node.getLineSeparator());
        inputLen=input.length();
        i=-1;
      }
    }
  }
  return new StringNode(textBuffer,textBegin,textEnd);
}
