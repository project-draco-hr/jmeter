{
  if (ch == '>') {
    if (state == TAG_BEGIN_PARSING_STATE) {
      state=TAG_FINISHED_PARSING_STATE;
      tag.setTagEnd(i);
    }
 else     if (state == TAG_IGNORE_DATA_STATE) {
      if (encounteredQuery.getBoolean()) {
        encounteredQuery.setBoolean(false);
        feedback.info(ENCOUNTERED_QUERY_MESSAGE);
        return state;
      }
      if (isWellFormedTag(tag,pos))       return state;
      state=TAG_FINISHED_PARSING_STATE;
      tag.setTagEnd(i);
      correctTag(tag);
      StringBuffer msg=new StringBuffer();
      msg.append("HTMLTagParser : Encountered > inside inverted commas in line \n");
      msg.append(tag.getTagLine());
      msg.append(", location ");
      msg.append(i);
      msg.append("\n");
      for (int j=0; j < i; j++)       msg.append(' ');
      msg.append('^');
      msg.append("\nAutomatically corrected.");
      feedback.warning(msg.toString());
    }
  }
 else   if (ch == '<' && state == TAG_BEGIN_PARSING_STATE && tag.getText().charAt(0) != '%') {
    state=TAG_FINISHED_PARSING_STATE;
    tag.setTagEnd(i - 1);
    i--;
  }
  return state;
}
