{
  boolean pass=true;
  boolean not=(NOT & getTestType()) > 0;
  AssertionResult result=new AssertionResult();
  String toCheck="";
  if (getAssumeSuccess()) {
    response.setSuccessful(true);
  }
  if (ResponseAssertion.RESPONSE_DATA.equals(getTestField())) {
    toCheck=new StringBuffer(response.getResponseHeaders()).append(new String(response.responseDataAsBA())).toString();
  }
 else   if (ResponseAssertion.RESPONSE_CODE.equals(getTestField())) {
    toCheck=response.getResponseCode();
  }
 else   if (ResponseAssertion.RESPONSE_MESSAGE.equals(getTestField())) {
    toCheck=response.getResponseMessage();
  }
 else {
    toCheck=response.getSamplerData();
    if (toCheck == null)     toCheck="";
  }
  if (toCheck.length() == 0) {
    return result.setResultForNull();
  }
  try {
    Perl5Matcher localMatcher=(Perl5Matcher)matcher.get();
    PropertyIterator iter=getTestStrings().iterator();
    while (iter.hasNext()) {
      String stringPattern=iter.next().getStringValue();
      Pattern pattern=patternCache.getPattern(stringPattern,Perl5Compiler.READ_ONLY_MASK);
      boolean found;
      if ((CONTAINS & getTestType()) > 0) {
        found=localMatcher.contains(toCheck,pattern);
      }
 else {
        found=localMatcher.matches(toCheck,pattern);
      }
      pass=not ? !found : found;
      if (!pass) {
        result.setFailure(true);
        result.setFailureMessage(getFailText(stringPattern));
        break;
      }
    }
    if (pass) {
      result.setFailure(false);
    }
    result.setError(false);
  }
 catch (  MalformedCachePatternException e) {
    result.setError(true);
    result.setFailure(false);
    result.setFailureMessage("Bad test configuration " + e);
  }
  return result;
}
