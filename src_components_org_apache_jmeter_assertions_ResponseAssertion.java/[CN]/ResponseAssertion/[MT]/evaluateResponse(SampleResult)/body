{
  boolean pass=true;
  boolean not=(NOT & getTestType()) > 0;
  AssertionResult result=new AssertionResult();
  if (response.getResponseData() == null) {
    return setResultForNull(result);
  }
  String responseString=new String(response.getResponseData());
  try {
    Perl5Matcher localMatcher=(Perl5Matcher)matcher.get();
    PropertyIterator iter=getTestStrings().iterator();
    while (iter.hasNext()) {
      String stringPattern=iter.next().getStringValue();
      Pattern pattern=patternCache.getPattern(stringPattern,Perl5Compiler.READ_ONLY_MASK);
      boolean found;
      if ((CONTAINS & getTestType()) > 0) {
        found=localMatcher.contains(responseString,pattern);
      }
 else {
        found=localMatcher.matches(responseString,pattern);
      }
      pass=not ? !found : found;
      if (!pass) {
        result.setFailure(true);
        result.setFailureMessage("Test Failed, expected " + notMessage + failMessage+ stringPattern);
        break;
      }
    }
    if (pass) {
      result.setFailure(false);
    }
    result.setError(false);
  }
 catch (  MalformedCachePatternException e) {
    result.setError(true);
    result.setFailure(false);
    result.setFailureMessage("Bad test configuration" + e);
  }
  return result;
}
