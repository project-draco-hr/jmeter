{
  AssertionResult result=new AssertionResult();
  if (response.getResponseData() == null) {
    return setResultForNull(result);
  }
  result.setFailure(false);
  result.setFailureMessage("");
  if (log.isDebugEnabled()) {
    log.debug(new StringBuffer("Validation is set to ").append(isValidating()).toString());
    log.debug(new StringBuffer("Whitespace is set to ").append(isWhitespace()).toString());
    log.debug(new StringBuffer("Tolerant is set to ").append(isTolerant()).toString());
  }
  Document doc=null;
  try {
    doc=XPathUtil.makeDocument(new ByteArrayInputStream(response.getResponseData()),isValidating(),isWhitespace(),isNamespace(),isTolerant());
  }
 catch (  SAXException e) {
    log.debug("Caught sax exception: " + e);
    result.setError(true);
    result.setFailureMessage(new StringBuffer("SAXException: ").append(e.getMessage()).toString());
    return result;
  }
catch (  IOException e) {
    log.warn("Cannot parse result content",e);
    result.setError(true);
    result.setFailureMessage(new StringBuffer("IOException: ").append(e.getMessage()).toString());
    return result;
  }
catch (  ParserConfigurationException e) {
    log.warn("Cannot parse result content",e);
    result.setError(true);
    result.setFailureMessage(new StringBuffer("ParserConfigurationException: ").append(e.getMessage()).toString());
    return result;
  }
  if (doc == null || doc.getDocumentElement() == null) {
    result.setError(true);
    result.setFailureMessage("Document is null, probably not parsable");
    return result;
  }
  NodeList nodeList=null;
  try {
    nodeList=XPathAPI.selectNodeList(doc,getXPathString());
  }
 catch (  TransformerException e) {
    result.setError(true);
    result.setFailureMessage(new StringBuffer("TransformerException: ").append(e.getMessage()).toString());
    return result;
  }
  if (nodeList == null || nodeList.getLength() == 0) {
    log.debug(new StringBuffer("nodeList null no match  ").append(getXPathString()).toString());
    result.setFailure(!isNegated());
    result.setFailureMessage("No Nodes Matched " + getXPathString());
    return result;
  }
  log.debug("nodeList length " + nodeList.getLength());
  if (log.isDebugEnabled() & !isNegated()) {
    for (int i=0; i < nodeList.getLength(); i++)     log.debug(new StringBuffer("nodeList[").append(i).append("] ").append(nodeList.item(i)).toString());
  }
  result.setFailure(isNegated());
  if (isNegated())   result.setFailureMessage("Specified XPath was found... Turn off negate if this is not desired");
  return result;
}
