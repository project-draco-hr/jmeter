{
  FileServer server=FileServer.getFileServer();
  final JMeterContext context=getThreadContext();
  if (vars == null) {
    String _fileName=getFilename();
    String mode=getShareMode();
    int modeInt=CSVDataSetBeanInfo.getShareModeAsInt(mode);
switch (modeInt) {
case CSVDataSetBeanInfo.SHARE_ALL:
      alias=_fileName;
    break;
case CSVDataSetBeanInfo.SHARE_GROUP:
  alias=_fileName + "@" + System.identityHashCode(context.getThreadGroup());
break;
case CSVDataSetBeanInfo.SHARE_THREAD:
alias=_fileName + "@" + System.identityHashCode(context.getThread());
break;
default :
alias=_fileName + "@" + mode;
break;
}
server.reserveFile(_fileName,getFileEncoding(),alias);
vars=JOrphanUtils.split(getVariableNames(),",");
}
try {
String delim=getDelimiter();
if (delim.equals("\\t")) {
delim="\t";
}
JMeterVariables threadVars=context.getVariables();
String line=server.readLine(alias,getRecycle());
if (line != null) {
String[] lineValues=getQuotedData() ? CSVSaveService.csvReadFile(new BufferedReader(new StringReader(line)),delim.charAt(0)) : JOrphanUtils.split(line,delim,false);
for (int a=0; a < vars.length && a < lineValues.length; a++) {
threadVars.put(vars[a],lineValues[a]);
}
}
 else {
if (getStopThread()) {
throw new JMeterStopThreadException("End of file detected");
}
for (int a=0; a < vars.length; a++) {
threadVars.put(vars[a],EOFVALUE);
}
}
}
 catch (IOException e) {
log.error(e.toString());
}
}
