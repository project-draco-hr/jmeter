{
  final String includePath=getIncludePath();
  HashTree tree=null;
  if (includePath != null && includePath.length() > 0) {
    try {
      String fileName=prefix + includePath;
      File file=new File(fileName);
      final String absolutePath=file.getAbsolutePath();
      log.info("loadIncludedElements -- try to load included module: " + absolutePath);
      if (!file.exists() && !file.isAbsolute()) {
        log.info("loadIncludedElements -failed for: " + absolutePath);
        file=new File(FileServer.getFileServer().getBaseDir(),includePath);
        log.info("loadIncludedElements -Attempting to read it from: " + absolutePath);
        if (!file.exists()) {
          log.error("loadIncludedElements -failed for: " + absolutePath);
          throw new IOException("loadIncludedElements -failed for: " + absolutePath);
        }
      }
      tree=SaveService.loadTree(file);
      tree=getProperBranch(tree);
      removeDisabledItems(tree);
      return tree;
    }
 catch (    NoClassDefFoundError ex) {
      String msg=ex.getMessage();
      if (msg == null) {
        msg="Missing jar file - see log for details";
      }
      log.warn("Missing jar file",ex);
      JMeterUtils.reportErrorToUser(msg);
    }
catch (    FileNotFoundException ex) {
      String msg=ex.getMessage();
      JMeterUtils.reportErrorToUser(msg);
      log.warn(msg);
    }
catch (    Exception ex) {
      String msg=ex.getMessage();
      if (msg == null) {
        msg="Unexpected error - see log for details";
      }
      JMeterUtils.reportErrorToUser(msg);
      log.warn("Unexpected error",ex);
    }
  }
  return tree;
}
