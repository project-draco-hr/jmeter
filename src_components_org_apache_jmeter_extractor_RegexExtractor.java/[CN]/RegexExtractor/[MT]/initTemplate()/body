{
  if (template != null) {
    return;
  }
  List<Object> combined=new ArrayList<Object>();
  String rawTemplate=getTemplate();
  PatternMatcher matcher=JMeterUtils.getMatcher();
  Pattern templatePattern=JMeterUtils.getPatternCache().getPattern("\\$(\\d+)\\$",Perl5Compiler.READ_ONLY_MASK & Perl5Compiler.SINGLELINE_MASK);
  if (log.isDebugEnabled()) {
    log.debug("Pattern = " + templatePattern.getPattern());
    log.debug("template = " + rawTemplate);
  }
  int beginOffset=0;
  MatchResult currentResult;
  PatternMatcherInput pinput=new PatternMatcherInput(rawTemplate);
  while (matcher.contains(pinput,templatePattern)) {
    currentResult=matcher.getMatch();
    final int beginMatch=currentResult.beginOffset(0);
    if (beginMatch > beginOffset) {
      combined.add(rawTemplate.substring(beginOffset,beginMatch));
    }
    combined.add(Integer.valueOf(currentResult.group(1)));
    beginOffset=currentResult.endOffset(0);
  }
  if (beginOffset < rawTemplate.length()) {
    combined.add(rawTemplate.substring(beginOffset,rawTemplate.length()));
  }
  if (log.isDebugEnabled()) {
    log.debug("Template item count: " + combined.size());
    for (    Object o : combined) {
      log.debug(o.getClass().getSimpleName() + " '" + o.toString()+ "'");
    }
  }
  template=combined;
}
