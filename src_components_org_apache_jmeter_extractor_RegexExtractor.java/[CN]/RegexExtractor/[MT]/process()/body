{
  initTemplate();
  JMeterContext context=getThreadContext();
  SampleResult previousResult=context.getPreviousResult();
  if (previousResult == null) {
    return;
  }
  log.debug("RegexExtractor processing result");
  JMeterVariables vars=context.getVariables();
  String refName=getRefName();
  int matchNumber=getMatchNumber();
  final String defaultValue=getDefaultValue();
  if (defaultValue.length() > 0) {
    vars.put(refName,defaultValue);
  }
  Perl5Matcher matcher=JMeterUtils.getMatcher();
  String inputString=useUrl() ? previousResult.getUrlAsString() : useHeaders() ? previousResult.getResponseHeaders() : previousResult.getResponseDataAsString();
  if (log.isDebugEnabled()) {
    log.debug("Input = " + inputString);
  }
  PatternMatcherInput input=new PatternMatcherInput(inputString);
  String regex=getRegex();
  if (log.isDebugEnabled()) {
    log.debug("Regex = " + regex);
  }
  try {
    Pattern pattern=JMeterUtils.getPatternCache().getPattern(regex,Perl5Compiler.READ_ONLY_MASK);
    List matches=new ArrayList();
    int x=0;
    boolean done=false;
    do {
      if (matcher.contains(input,pattern)) {
        log.debug("RegexExtractor: Match found!");
        matches.add(matcher.getMatch());
      }
 else {
        done=true;
      }
      x++;
    }
 while (x != matchNumber && !done);
    try {
      MatchResult match;
      if (matchNumber >= 0) {
        match=getCorrectMatch(matches,matchNumber);
        if (match != null) {
          vars.put(refName,generateResult(match));
          saveGroups(vars,refName,match);
        }
 else {
          vars.remove(refName + "_g");
          vars.remove(refName + "_g0");
          vars.remove(refName + "_g1");
        }
      }
 else {
        int prevCount=0;
        String prevString=vars.get(refName + REF_MATCH_NR);
        if (prevString != null) {
          try {
            prevCount=Integer.parseInt(prevString);
          }
 catch (          NumberFormatException e1) {
            log.warn("Could not parse " + prevString + " "+ e1);
          }
        }
        vars.put(refName + REF_MATCH_NR,"" + matches.size());
        for (int i=1; i <= matches.size(); i++) {
          match=getCorrectMatch(matches,i);
          if (match != null) {
            vars.put(refName + UNDERSCORE + i,generateResult(match));
            saveGroups(vars,refName + UNDERSCORE + i,match);
          }
        }
        for (int i=matches.size() + 1; i <= prevCount; i++) {
          vars.remove(refName + UNDERSCORE + i);
          vars.remove(refName + UNDERSCORE + i+ "_g0");
          vars.remove(refName + UNDERSCORE + i+ "_g1");
        }
      }
    }
 catch (    RuntimeException e) {
      log.warn("Error while generating result");
    }
  }
 catch (  MalformedCachePatternException e) {
    log.warn("Error in pattern: " + regex);
  }
}
