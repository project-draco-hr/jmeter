{
  JMeterContext context=getThreadContext();
  JMeterVariables vars=context.getVariables();
  String jsonResponse;
  if (isScopeVariable()) {
    jsonResponse=vars.get(getVariableName());
    if (log.isDebugEnabled()) {
      log.debug("JSON Extractor is using variable:" + getVariableName() + " which content is:"+ jsonResponse);
    }
  }
 else {
    SampleResult previousResult=context.getPreviousResult();
    if (previousResult == null) {
      return;
    }
    jsonResponse=previousResult.getResponseDataAsString();
    if (log.isDebugEnabled()) {
      log.debug("JSON Extractor " + getName() + " working on Response:"+ jsonResponse);
    }
  }
  String[] refNames=getRefNames().split(SEPARATOR);
  String[] jsonPathExpressions=getJsonPathExpressions().split(SEPARATOR);
  String[] defaultValues=getDefaultValues().split(SEPARATOR);
  int[] matchNumbers=getMatchNumbersAsInt(defaultValues.length);
  if (refNames.length != jsonPathExpressions.length || refNames.length != defaultValues.length) {
    log.error("Number of JSON Path variables must match number of default values and json-path expressions, check you use separator ';' if you have many values");
    throw new IllegalArgumentException(JMeterUtils.getResString("jsonpp_error_number_arguments_mismatch_error"));
  }
  for (int i=0; i < jsonPathExpressions.length; i++) {
    int matchNumber=matchNumbers[i];
    String currentRefName=refNames[i].trim();
    String currentJsonPath=jsonPathExpressions[i].trim();
    try {
      if (jsonResponse.isEmpty()) {
        vars.put(currentRefName,defaultValues[i]);
      }
 else {
        List<Object> extractedValues=localMatcher.get().extractWithJsonPath(jsonResponse,currentJsonPath);
        if (extractedValues.isEmpty()) {
          vars.put(currentRefName,defaultValues[i]);
          vars.put(currentRefName + REF_MATCH_NR,"0");
          if (matchNumber < 0 && getComputeConcatenation()) {
            log.debug("No value extracted, storing empty in:" + currentRefName + ALL_SUFFIX);
            vars.put(currentRefName + ALL_SUFFIX,"");
          }
        }
 else {
          if (extractedValues.size() > 1) {
            if (matchNumber < 0) {
              int index=1;
              StringBuilder concat=new StringBuilder(getComputeConcatenation() ? extractedValues.size() * 20 : 1);
              for (              Object extractedObject : extractedValues) {
                String extractedString=stringify(extractedObject);
                vars.put(currentRefName + "_" + index,extractedString);
                if (getComputeConcatenation()) {
                  concat.append(extractedString).append(JSONPostProcessor.JSON_CONCATENATION_SEPARATOR);
                }
                index++;
              }
              if (getComputeConcatenation()) {
                concat.setLength(concat.length() - 1);
                vars.put(currentRefName + ALL_SUFFIX,concat.toString());
              }
            }
 else             if (matchNumber == 0) {
              int matchSize=extractedValues.size();
              int matchNr=JMeterUtils.getRandomInt(matchSize);
              placeObjectIntoVars(vars,currentRefName,extractedValues,matchNr);
            }
 else {
              if (matchNumber > extractedValues.size()) {
                if (log.isDebugEnabled()) {
                  log.debug("matchNumber(" + matchNumber + ") exceeds number of items found("+ extractedValues.size()+ "), default value will be used");
                }
                vars.put(currentRefName,defaultValues[i]);
              }
 else {
                placeObjectIntoVars(vars,currentRefName,extractedValues,matchNumber - 1);
              }
            }
          }
 else {
            String suffix=(matchNumber < 0) ? "_1" : "";
            placeObjectIntoVars(vars,currentRefName + suffix,extractedValues,0);
            if (matchNumber < 0 && getComputeConcatenation()) {
              vars.put(currentRefName + ALL_SUFFIX,vars.get(currentRefName));
            }
          }
          vars.put(currentRefName + REF_MATCH_NR,Integer.toString(extractedValues.size()));
        }
      }
    }
 catch (    Exception e) {
      if (log.isDebugEnabled()) {
        log.error("Error processing JSON content in " + getName() + ", message:"+ e.getLocalizedMessage(),e);
      }
 else {
        log.error("Error processing JSON content in " + getName() + ", message:"+ e.getLocalizedMessage());
      }
      vars.put(currentRefName,defaultValues[i]);
    }
  }
}
