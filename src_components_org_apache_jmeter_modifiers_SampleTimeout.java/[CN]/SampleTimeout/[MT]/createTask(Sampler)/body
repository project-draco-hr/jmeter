{
  long timeout=getPropertyAsLong(TIMEOUT);
  if (timeout <= 0) {
    return;
  }
  if (!(samp instanceof Interruptible)) {
    return;
  }
  final Interruptible sampler=(Interruptible)samp;
  Callable<Object> call=new Callable<Object>(){
    @Override public Object call() throws Exception {
      long start=System.nanoTime();
      boolean interrupted=sampler.interrupt();
      String elapsed=Double.toString((double)(System.nanoTime() - start) / 1000000000) + " secs";
      if (interrupted) {
        LOG.warn("Call Done interrupting " + getInfo(samp) + " took "+ elapsed);
      }
 else {
        if (debug) {
          LOG.debug("Call Didn't interrupt: " + getInfo(samp) + " took "+ elapsed);
        }
      }
      return null;
    }
  }
;
  future=execService.schedule(call,timeout,TimeUnit.MILLISECONDS);
  if (debug) {
    LOG.debug("Scheduled timer: @" + System.identityHashCode(future) + " "+ getInfo(samp));
  }
}
