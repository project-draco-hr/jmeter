{
  log.debug("Start : drawSample1");
  int lastLevel=0;
  int compCount=0;
  SampleResult[] resultList=oneSample.getSubResults();
  int resultListCount=0;
  if (!previousPtsAlloc) {
    if (resultList != null) {
      resultListCount+=resultList.length;
    }
    previousPts=new Point[resultListCount + 2];
  }
  Color currColor=Color.black;
  JPanel lPanel=(JPanel)visualizer.getWhiteCanvas();
  JPanel legendPanel=new JPanel();
  GridBagLayout gridBag=new GridBagLayout();
  GridBagConstraints gbc=new GridBagConstraints();
  legendPanel.setLayout(gridBag);
  lPanel.add(legendPanel);
  Dimension d=this.getSize();
  long totalTime=oneSample.getTime();
  if (log.isDebugEnabled()) {
    log.debug("drawSample1 : total time - " + totalTime);
  }
  int data=(int)(totalTime * d.height / model.getMax());
  g.setColor(currColor);
  if (!previousPtsAlloc) {
    g.drawLine(x % width,d.height - data,x % width,d.height - data - 1);
  }
 else {
    g.drawLine((previousPts[0].x) % width,previousPts[0].y,x % width,d.height - data);
  }
  previousPts[0]=new Point(x % width,d.height - data);
  if (legendPanel != null && noLegendYet) {
    gbc.gridx=0;
    gbc.gridy=compCount++;
    gbc.anchor=GridBagConstraints.WEST;
    gbc.weightx=1.0;
    gbc.insets=new Insets(0,10,0,0);
    JLabel totalTimeLabel=new JLabel("Total time - " + oneSample.toString());
    totalTimeLabel.setForeground(currColor);
    gridBag.setConstraints(totalTimeLabel,gbc);
    legendPanel.add(totalTimeLabel);
  }
  if (log.isDebugEnabled()) {
    log.debug("drawSample1 : main page load time - " + oneSample.getTime());
  }
  data=(int)(oneSample.getTime() * d.height / model.getMax());
  currColor=ColorHelper.changeColorCyclicIncrement(currColor,40);
  g.setColor(currColor);
  if (!previousPtsAlloc) {
    g.drawLine(x % width,d.height - data,x % width,d.height - data - 1);
  }
 else {
    g.drawLine((previousPts[1].x) % width,previousPts[1].y,x % width,d.height - data);
  }
  previousPts[1]=new Point(x % width,d.height - data);
  if (legendPanel != null && noLegendYet) {
    gbc.gridx=0;
    gbc.gridy=compCount++;
    gbc.anchor=GridBagConstraints.WEST;
    gbc.weightx=1.0;
    gbc.insets=new Insets(0,10,0,0);
    JLabel mainTimeLabel=new JLabel(oneSample.toString());
    mainTimeLabel.setForeground(currColor);
    gridBag.setConstraints(mainTimeLabel,gbc);
    legendPanel.add(mainTimeLabel);
  }
  lastLevel+=data;
  int currPreviousPts=2;
  if (resultList != null) {
    for (int i=0; i < resultList.length; i++) {
      SampleResult componentRes=(SampleResult)resultList[i];
      if (log.isDebugEnabled()) {
        log.debug("drawSample1 : componentRes - " + componentRes.getSampleLabel() + " loading time - "+ componentRes.getTime());
      }
      data=(int)(componentRes.getTime() * d.height / model.getMax());
      data+=lastLevel;
      currColor=ColorHelper.changeColorCyclicIncrement(currColor,100);
      g.setColor(currColor);
      if (!previousPtsAlloc) {
        g.drawLine(x % width,d.height - data,x % width,d.height - data - 1);
      }
 else {
        g.drawLine((previousPts[currPreviousPts].x) % width,previousPts[currPreviousPts].y,x % width,d.height - data);
      }
      previousPts[currPreviousPts++]=new Point(x % width,d.height - data);
      if (legendPanel != null && noLegendYet) {
        gbc.gridx=0;
        gbc.gridy=compCount++;
        gbc.anchor=GridBagConstraints.WEST;
        gbc.weightx=1.0;
        gbc.insets=new Insets(0,10,0,0);
        JLabel compTimeLabel=new JLabel(componentRes.getSampleLabel());
        compTimeLabel.setForeground(currColor);
        gridBag.setConstraints(compTimeLabel,gbc);
        legendPanel.add(compTimeLabel);
      }
      lastLevel=data;
    }
  }
  if (noLegendYet) {
    noLegendYet=false;
    lPanel.repaint();
    lPanel.revalidate();
  }
  if (!previousPtsAlloc) {
    previousPtsAlloc=true;
  }
  log.debug("End : drawSample1");
}
