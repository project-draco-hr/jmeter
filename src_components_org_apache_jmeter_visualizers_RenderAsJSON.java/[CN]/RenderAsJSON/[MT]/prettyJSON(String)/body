{
  StringBuilder pretty=new StringBuilder(json.length() * 2);
  final String tab=":   ";
  StringBuilder index=new StringBuilder();
  String nl="";
  Matcher valueOrPair=VALUE_OR_PAIR_PATTERN.matcher(json);
  boolean misparse=false;
  for (int i=0; i < json.length(); ) {
    final char currentChar=json.charAt(i);
    if ((currentChar == '{') || (currentChar == '[')) {
      pretty.append(nl).append(index).append(currentChar);
      i++;
      index.append(tab);
      misparse=false;
    }
 else     if ((currentChar == '}') || (currentChar == ']')) {
      if (index.length() > 0) {
        index.delete(0,tab.length());
      }
      pretty.append(nl).append(index).append(currentChar);
      i++;
      int j=i;
      while ((j < json.length()) && Character.isWhitespace(json.charAt(j))) {
        j++;
      }
      if ((j < json.length()) && (json.charAt(j) == ',')) {
        pretty.append(",");
        i=j + 1;
      }
      misparse=false;
    }
 else     if (valueOrPair.find(i) && valueOrPair.group().length() > 0) {
      pretty.append(nl).append(index).append(valueOrPair.group());
      i=valueOrPair.end();
      misparse=false;
    }
 else {
      if (!misparse) {
        pretty.append(nl).append("- Parse failed from:");
      }
      pretty.append(currentChar);
      i++;
      misparse=true;
    }
    nl="\n";
  }
  return pretty.toString();
}
