{
  Perl5Matcher matcher=new Perl5Matcher();
  PatternMatcherInput input=new PatternMatcherInput(textToParse);
  PatternCacheLRU pcLRU=new PatternCacheLRU();
  Pattern pattern=pcLRU.getPattern(regexpField.getText(),Perl5Compiler.READ_ONLY_MASK);
  List<MatchResult> matches=new LinkedList<MatchResult>();
  int x=0;
  boolean done=false;
  do {
    if (matcher.contains(input,pattern)) {
      matches.add(matcher.getMatch());
    }
 else {
      done=true;
    }
    x++;
  }
 while (!done);
  StringBuffer sb=new StringBuffer();
  for (int j=0; j < matches.size(); j++) {
    MatchResult mr=matches.get(j);
    final int groups=mr.groups();
    for (int i=0; i < groups; i++) {
      sb.append(" group[" + j + "]["+ i+ "]="+ mr.group(i)+ "\n");
    }
  }
  return sb.toString();
}
