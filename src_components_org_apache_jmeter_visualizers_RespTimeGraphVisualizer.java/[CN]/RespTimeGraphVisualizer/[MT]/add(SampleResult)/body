{
  final String sampleLabel=sampleResult.getSampleLabel();
synchronized (lockInterval) {
    internalList.add(new RespTimeGraphDataBean(sampleResult.getStartTime(),sampleResult.getTime(),sampleLabel));
  }
  if (samplerSelection.isSelected() && pattern != null) {
    matcher=pattern.matcher(sampleLabel);
  }
  if ((matcher == null) || (matcher.find())) {
    final long startTimeMS=sampleResult.getStartTime();
    final long startTimeInterval=startTimeMS / intervalValue;
    JMeterUtils.runSafe(new Runnable(){
      @Override public void run(){
synchronized (lock) {
          if (startTimeInterval < minStartTime) {
            minStartTime=startTimeInterval;
          }
 else           if (startTimeInterval > maxStartTime) {
            maxStartTime=startTimeInterval;
          }
          if (!seriesNames.containsKey(sampleLabel)) {
            seriesNames.put(sampleLabel,new RespTimeGraphLineBean(sampleLabel,listColors.get(colorIdx++)));
            if (colorIdx >= listColors.size()) {
              colorIdx=0;
            }
          }
          Map<Long,Long> subList=pList.get(sampleLabel);
          final Long startTimeIntervalLong=Long.valueOf(startTimeInterval);
          if (subList != null) {
            long respTime=sampleResult.getTime();
            Long value=subList.get(startTimeIntervalLong);
            if (value != null) {
              respTime=(value.longValue() + respTime) / 2;
            }
            subList.put(startTimeIntervalLong,Long.valueOf(respTime));
          }
 else {
            Map<Long,Long> newSubList=new LinkedHashMap<Long,Long>();
            newSubList.put(startTimeIntervalLong,Long.valueOf(sampleResult.getTime()));
            pList.put(sampleLabel,newSubList);
          }
        }
      }
    }
);
  }
}
