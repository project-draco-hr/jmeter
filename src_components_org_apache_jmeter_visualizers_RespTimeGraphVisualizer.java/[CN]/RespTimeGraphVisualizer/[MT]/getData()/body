{
  int size=pList.size();
  int max=(int)durationTest;
  double[][] data=new double[size][max];
  double nanLast=0;
  double nanBegin=0;
  List<Double> nanList=new ArrayList<Double>();
  int s=0;
  for (  Map<Long,StatCalculatorLong> subList : pList.values()) {
    int idx=0;
    while (idx < durationTest) {
      long keyShift=minStartTime + idx;
      StatCalculatorLong value=subList.get(Long.valueOf(keyShift));
      if (value != null) {
        nanLast=value.getMean();
        data[s][idx]=nanLast;
        int nlsize=nanList.size();
        if (nlsize > 0) {
          double valPrev=nanBegin;
          for (int cnt=0; cnt < nlsize; cnt++) {
            int pos=idx - (nlsize - cnt);
            if (pos < 0) {
              pos=0;
            }
            valPrev=(valPrev + ((nanLast - nanBegin) / (nlsize + 2)));
            data[s][pos]=valPrev;
          }
          nanList.clear();
        }
      }
 else {
        nanList.add(Double.valueOf(Double.NaN));
        nanBegin=nanLast;
        data[s][idx]=Double.NaN;
      }
      idx++;
    }
    s++;
  }
  return data;
}
