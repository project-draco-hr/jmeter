{
  _rS=new float[_m];
  _B=new float[_n];
  _A=new float[_n][_n];
  _coefficients=new float[_n + 1][4];
  int i=0, j=0;
  for (i=0; i < _n; i++) {
    _B[i]=0;
    for (j=0; j < _n; j++) {
      _A[i][j]=0;
    }
    for (j=0; j < 4; j++)     _coefficients[i][j]=0;
  }
  for (i=0; i < _n; i++) {
    _rS[i]=0;
  }
  for (i=0; i < _n; i++) {
    _A[i][i]=4;
  }
  for (i=1; i < _n; i++) {
    _A[i][i - 1]=1;
    _A[i - 1][i]=1;
  }
  for (i=0; i < _n; i++) {
    _B[i]=6 * (_r[i + 2] - 2 * _r[i + 1] + _r[i]);
  }
  this.jacobi();
  for (i=0; i < _n + 1; i++) {
    _coefficients[i][0]=_r[i];
    _coefficients[i][1]=_r[i + 1] - _r[i] - (_rS[i + 1] + 2 * _rS[i]) / 6;
    _coefficients[i][2]=_rS[i] / 2;
    _coefficients[i][3]=(_rS[i + 1] - _rS[i]) / 6;
  }
}
