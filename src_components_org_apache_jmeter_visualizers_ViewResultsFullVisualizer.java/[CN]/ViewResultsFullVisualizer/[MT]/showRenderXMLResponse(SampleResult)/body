{
  results.setContentType("text/xml");
  results.setCaretPosition(0);
  byte[] source=res.getResponseData();
  final ByteArrayInputStream baIS=new ByteArrayInputStream(source);
  for (int i=0; i < source.length - XML_PFX.length; i++) {
    if (JOrphanUtils.startsWith(source,XML_PFX,i)) {
      baIS.skip(i);
      break;
    }
  }
  Component view=results;
  org.w3c.dom.Document document=null;
  try {
    document=XPathUtil.makeDocument(baIS,false,false,false,true,true,false,false);
    JPanel domTreePanel=new DOMTreePanel(document);
    document.normalize();
    view=domTreePanel;
  }
 catch (  SAXParseException e) {
    showErrorMessageDialog(saxErrorHandler.getErrorMessage(),saxErrorHandler.getMessageType());
    log.debug(e.getMessage());
  }
catch (  SAXException e) {
    showErrorMessageDialog(e.getMessage(),JOptionPane.ERROR_MESSAGE);
    log.debug(e.getMessage());
  }
catch (  IOException e) {
    showErrorMessageDialog(e.getMessage(),JOptionPane.ERROR_MESSAGE);
    log.debug(e.getMessage());
  }
catch (  ParserConfigurationException e) {
    showErrorMessageDialog(e.getMessage(),JOptionPane.ERROR_MESSAGE);
    log.debug(e.getMessage());
  }
catch (  TidyException e) {
    showErrorMessageDialog(e.getMessage(),JOptionPane.ERROR_MESSAGE);
    log.debug(e.getMessage());
  }
  resultsScrollPane.setViewportView(view);
  textButton.setEnabled(true);
  htmlButton.setEnabled(true);
  jsonButton.setEnabled(true);
  xmlButton.setEnabled(true);
}
