{
  String graphiteMetricsSenderClass=context.getParameter(GRAPHITE_METRICS_SENDER);
  graphiteHost=context.getParameter(GRAPHITE_HOST);
  graphitePort=context.getIntParameter(GRAPHITE_PORT,DEFAULT_PLAINTEXT_PROTOCOL_PORT);
  summaryOnly=context.getBooleanParameter(SUMMARY_ONLY,true);
  samplersList=context.getParameter(SAMPLERS_LIST,"");
  useRegexpForSamplersList=context.getBooleanParameter(USE_REGEXP_FOR_SAMPLERS_LIST,false);
  rootMetricsPrefix=context.getParameter(ROOT_METRICS_PREFIX,DEFAULT_METRICS_PREFIX);
  String[] percentilesStringArray=context.getParameter(PERCENTILES,DEFAULT_METRICS_PREFIX).split(SEPARATOR);
  okPercentiles=new HashMap<>(percentilesStringArray.length);
  koPercentiles=new HashMap<>(percentilesStringArray.length);
  allPercentiles=new HashMap<>(percentilesStringArray.length);
  DecimalFormat decimalFormat=new DecimalFormat("0.##");
  for (  String percentilesString : percentilesStringArray) {
    if (!StringUtils.isEmpty(percentilesString.trim())) {
      try {
        Float percentileValue=Float.valueOf(percentilesString.trim());
        String sanitizedFormattedPercentile=AbstractGraphiteMetricsSender.sanitizeString(decimalFormat.format(percentileValue));
        okPercentiles.put(METRIC_OK_PERCENTILE_PREFIX + sanitizedFormattedPercentile,percentileValue);
        koPercentiles.put(METRIC_KO_PERCENTILE_PREFIX + sanitizedFormattedPercentile,percentileValue);
        allPercentiles.put(METRIC_ALL_PERCENTILE_PREFIX + sanitizedFormattedPercentile,percentileValue);
      }
 catch (      Exception e) {
        LOGGER.error("Error parsing percentile:'" + percentilesString + "'",e);
      }
    }
  }
  Class<?> clazz=Class.forName(graphiteMetricsSenderClass);
  this.graphiteMetricsManager=(GraphiteMetricsSender)clazz.newInstance();
  graphiteMetricsManager.setup(graphiteHost,graphitePort,rootMetricsPrefix);
  if (useRegexpForSamplersList) {
    pattern=Pattern.compile(samplersList);
  }
 else {
    String[] samplers=samplersList.split(SEPARATOR);
    samplersToFilter=new HashSet<>();
    Collections.addAll(samplersToFilter,samplers);
  }
  scheduler=Executors.newScheduledThreadPool(MAX_POOL_SIZE);
  this.timerHandle=scheduler.scheduleAtFixedRate(this,ONE_SECOND,ONE_SECOND,TimeUnit.SECONDS);
}
