{
  if (parser.getArgumentById(PROPFILE_OPT) != null) {
    JMeterUtils.loadJMeterProperties(parser.getArgumentById(PROPFILE_OPT).getArgument());
  }
 else {
    JMeterUtils.loadJMeterProperties(NewDriver.getJMeterDir() + File.separator + "bin"+ File.separator+ "jmeter.properties");
  }
  if (parser.getArgumentById(JMLOGFILE_OPT) != null) {
    String jmlogfile=parser.getArgumentById(JMLOGFILE_OPT).getArgument();
    jmlogfile=processLAST(jmlogfile,".log");
    JMeterUtils.setProperty(LoggingManager.LOG_FILE,jmlogfile);
  }
  JMeterUtils.initLogging();
  JMeterUtils.initLocale();
  if (parser.getArgumentById(JMETER_HOME_OPT) == null) {
    JMeterUtils.setJMeterHome(NewDriver.getJMeterDir());
  }
 else {
    JMeterUtils.setJMeterHome(parser.getArgumentById(JMETER_HOME_OPT).getArgument());
  }
  Properties jmeterProps=JMeterUtils.getJMeterProperties();
  remoteProps=new Properties();
  String userProp=JMeterUtils.getPropDefault("user.properties","");
  if (userProp.length() > 0) {
    FileInputStream fis=null;
    try {
      File file=JMeterUtils.findFile(userProp);
      if (file.canRead()) {
        log.info("Loading user properties from: " + file.getCanonicalPath());
        fis=new FileInputStream(file);
        Properties tmp=new Properties();
        tmp.load(fis);
        jmeterProps.putAll(tmp);
        LoggingManager.setLoggingLevels(tmp);
      }
    }
 catch (    IOException e) {
      log.warn("Error loading user property file: " + userProp,e);
    }
 finally {
      JOrphanUtils.closeQuietly(fis);
    }
  }
  String sysProp=JMeterUtils.getPropDefault("system.properties","");
  if (sysProp.length() > 0) {
    FileInputStream fis=null;
    try {
      File file=JMeterUtils.findFile(sysProp);
      if (file.canRead()) {
        log.info("Loading system properties from: " + file.getCanonicalPath());
        fis=new FileInputStream(file);
        System.getProperties().load(fis);
      }
    }
 catch (    IOException e) {
      log.warn("Error loading system property file: " + sysProp,e);
    }
 finally {
      JOrphanUtils.closeQuietly(fis);
    }
  }
  List<CLOption> clOptions=parser.getArguments();
  int size=clOptions.size();
  for (int i=0; i < size; i++) {
    CLOption option=clOptions.get(i);
    String name=option.getArgument(0);
    String value=option.getArgument(1);
    FileInputStream fis=null;
switch (option.getDescriptor().getId()) {
case CLOption.TEXT_ARGUMENT:
      throw new IllegalArgumentException("Unknown arg: " + option.getArgument());
case PROPFILE2_OPT:
    try {
      fis=new FileInputStream(new File(name));
      Properties tmp=new Properties();
      tmp.load(fis);
      jmeterProps.putAll(tmp);
      LoggingManager.setLoggingLevels(tmp);
    }
 catch (    FileNotFoundException e) {
      log.warn("Can't find additional property file: " + name,e);
    }
catch (    IOException e) {
      log.warn("Error loading additional property file: " + name,e);
    }
 finally {
      JOrphanUtils.closeQuietly(fis);
    }
  break;
case SYSTEM_PROPFILE:
log.info("Setting System properties from file: " + name);
try {
fis=new FileInputStream(new File(name));
System.getProperties().load(fis);
}
 catch (IOException e) {
log.warn("Cannot find system property file " + e.getLocalizedMessage());
}
 finally {
JOrphanUtils.closeQuietly(fis);
}
break;
case SYSTEM_PROPERTY:
if (value.length() > 0) {
log.info("Setting System property: " + name + "="+ value);
System.getProperties().setProperty(name,value);
}
 else {
log.warn("Removing System property: " + name);
System.getProperties().remove(name);
}
break;
case JMETER_PROPERTY:
if (value.length() > 0) {
log.info("Setting JMeter property: " + name + "="+ value);
jmeterProps.setProperty(name,value);
}
 else {
log.warn("Removing JMeter property: " + name);
jmeterProps.remove(name);
}
break;
case JMETER_GLOBAL_PROP:
if (value.length() > 0) {
log.info("Setting Global property: " + name + "="+ value);
remoteProps.setProperty(name,value);
}
 else {
File propFile=new File(name);
if (propFile.canRead()) {
log.info("Setting Global properties from the file " + name);
try {
fis=new FileInputStream(propFile);
remoteProps.load(fis);
}
 catch (FileNotFoundException e) {
log.warn("Could not find properties file: " + e.getLocalizedMessage());
}
catch (IOException e) {
log.warn("Could not load properties file: " + e.getLocalizedMessage());
}
 finally {
JOrphanUtils.closeQuietly(fis);
}
}
}
break;
case LOGLEVEL:
if (value.length() > 0) {
log.info("LogLevel: " + name + "="+ value);
LoggingManager.setPriority(value,name);
}
 else {
log.warn("LogLevel: " + name);
LoggingManager.setPriority(name);
}
break;
case REMOTE_STOP:
remoteStop=true;
break;
default :
break;
}
}
String sample_variables=(String)jmeterProps.get(SampleEvent.SAMPLE_VARIABLES);
if (sample_variables != null) {
remoteProps.put(SampleEvent.SAMPLE_VARIABLES,sample_variables);
}
jmeterProps.put("jmeter.version",JMeterUtils.getJMeterVersion());
}
