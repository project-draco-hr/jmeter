{
  FileInputStream reader=null;
  try {
    File f=new File(testFile);
    if (!f.exists() || !f.isFile()) {
      println("Could not open " + testFile);
      return;
    }
    FileServer.getFileServer().setBasedir(f.getAbsolutePath());
    reader=new FileInputStream(f);
    log.info("Loading file: " + f);
    HashTree tree=SaveService.loadTree(reader);
    JMeterTreeModel treeModel=new JMeterTreeModel(new Object());
    JMeterTreeNode root=(JMeterTreeNode)treeModel.getRoot();
    treeModel.addSubTree(tree,root);
    SearchByClass replaceableControllers=new SearchByClass(ReplaceableController.class);
    tree.traverse(replaceableControllers);
    Collection replaceableControllersRes=replaceableControllers.getSearchResults();
    for (Iterator iter=replaceableControllersRes.iterator(); iter.hasNext(); ) {
      ReplaceableController replaceableController=(ReplaceableController)iter.next();
      replaceableController.resolveReplacementSubTree(root);
    }
    convertSubTree(tree);
    if (logFile != null) {
      ResultCollector logger=new ResultCollector();
      logger.setFilename(logFile);
      tree.add(tree.getArray()[0],logger);
    }
    String summariserName=JMeterUtils.getPropDefault("summariser.name","");
    if (summariserName.length() > 0) {
      log.info("Creating summariser <" + summariserName + ">");
      println("Creating summariser <" + summariserName + ">");
      Summariser summer=new Summariser(summariserName);
      tree.add(tree.getArray()[0],summer);
    }
    tree.add(tree.getArray()[0],new ListenToTest(parent));
    println("Created the tree successfully");
    JMeterEngine engine=null;
    if (!remoteStart) {
      engine=new StandardJMeterEngine();
      engine.configure(tree);
      long now=System.currentTimeMillis();
      println("Starting the test @ " + new Date(now) + " ("+ now+ ")");
      engine.runTest();
    }
 else {
      java.util.StringTokenizer st=new java.util.StringTokenizer(remote_hosts_string,",");
      List engines=new LinkedList();
      while (st.hasMoreElements()) {
        String el=(String)st.nextElement();
        println("Configuring remote engine for " + el);
        engines.add(doRemoteInit(el.trim(),tree));
      }
      println("Starting remote engines");
      long now=System.currentTimeMillis();
      println("Starting the test @ " + new Date(now) + " ("+ now+ ")");
      Iterator iter=engines.iterator();
      while (iter.hasNext()) {
        engine=(JMeterEngine)iter.next();
        engine.runTest();
      }
      println("Remote engines have been started");
    }
  }
 catch (  Exception e) {
    System.out.println("Error in NonGUIDriver " + e.toString());
    log.error("",e);
  }
 finally {
    JOrphanUtils.closeQuietly(reader);
  }
}
