{
  FileInputStream reader=null;
  try {
    File f=new File(testFile);
    if (!f.exists() || !f.isFile()) {
      println("Could not open " + testFile);
      return;
    }
    FileServer.getFileServer().setBaseForScript(f);
    reader=new FileInputStream(f);
    log.info("Loading file: " + f);
    HashTree tree=SaveService.loadTree(reader);
    @SuppressWarnings("deprecation") JMeterTreeModel treeModel=new JMeterTreeModel(new Object());
    JMeterTreeNode root=(JMeterTreeNode)treeModel.getRoot();
    treeModel.addSubTree(tree,root);
    SearchByClass<ReplaceableController> replaceableControllers=new SearchByClass<ReplaceableController>(ReplaceableController.class);
    tree.traverse(replaceableControllers);
    Collection<ReplaceableController> replaceableControllersRes=replaceableControllers.getSearchResults();
    for (Iterator<ReplaceableController> iter=replaceableControllersRes.iterator(); iter.hasNext(); ) {
      ReplaceableController replaceableController=iter.next();
      replaceableController.resolveReplacementSubTree(root);
    }
    convertSubTree(tree);
    Summariser summer=null;
    String summariserName=JMeterUtils.getPropDefault("summariser.name","");
    if (summariserName.length() > 0) {
      log.info("Creating summariser <" + summariserName + ">");
      println("Creating summariser <" + summariserName + ">");
      summer=new Summariser(summariserName);
    }
    if (logFile != null) {
      ResultCollector logger=new ResultCollector(summer);
      logger.setFilename(logFile);
      tree.add(tree.getArray()[0],logger);
    }
 else {
      if (summer != null) {
        tree.add(tree.getArray()[0],summer);
      }
    }
    List<JMeterEngine> engines=new LinkedList<JMeterEngine>();
    tree.add(tree.getArray()[0],new ListenToTest(parent,(remoteStart && remoteStop) ? engines : null));
    println("Created the tree successfully using " + testFile);
    if (!remoteStart) {
      JMeterEngine engine=new StandardJMeterEngine();
      engine.configure(tree);
      long now=System.currentTimeMillis();
      println("Starting the test @ " + new Date(now) + " ("+ now+ ")");
      engine.runTest();
      engines.add(engine);
    }
 else {
      java.util.StringTokenizer st=new java.util.StringTokenizer(remote_hosts_string,",");
      List<String> failingEngines=new ArrayList<String>(st.countTokens());
      while (st.hasMoreElements()) {
        String el=(String)st.nextElement();
        println("Configuring remote engine for " + el);
        log.info("Configuring remote engine for " + el);
        JMeterEngine eng=doRemoteInit(el.trim(),tree);
        if (null != eng) {
          engines.add(eng);
        }
 else {
          failingEngines.add(el);
          println("Failed to configure " + el);
        }
      }
      if (engines.isEmpty()) {
        println("No remote engines were started.");
        return;
      }
      if (failingEngines.size() > 0) {
        throw new IllegalArgumentException("The following remote engines did not start correclty:" + failingEngines);
      }
      println("Starting remote engines");
      log.info("Starting remote engines");
      long now=System.currentTimeMillis();
      println("Starting the test @ " + new Date(now) + " ("+ now+ ")");
      for (      JMeterEngine engine : engines) {
        engine.runTest();
      }
      println("Remote engines have been started");
      log.info("Remote engines have been started");
    }
    startUdpDdaemon(engines);
  }
 catch (  Exception e) {
    System.out.println("Error in NonGUIDriver " + e.toString());
    log.error("Error in NonGUIDriver",e);
  }
 finally {
    JOrphanUtils.closeQuietly(reader);
  }
}
