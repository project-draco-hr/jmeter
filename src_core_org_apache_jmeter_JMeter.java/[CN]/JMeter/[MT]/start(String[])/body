{
  CLArgsParser parser=new CLArgsParser(args,options);
  String error=parser.getErrorString();
  if (error == null) {
    boolean gui=parser.getArgumentById(NONGUI_OPT) == null;
    boolean remoteStart=parser.getArgumentById(REMOTE_OPT) != null || parser.getArgumentById(REMOTE_OPT_PARAM) != null;
    if (gui && remoteStart) {
      error="-r and -R are only valid in non-GUI mode";
    }
  }
  if (null != error) {
    System.err.println("Error: " + error);
    System.out.println("Usage");
    System.out.println(CLUtil.describeOptions(options).toString());
    return;
  }
  try {
    initializeProperties(parser);
    if (System.getProperty("org.apache.commons.logging.Log") == null) {
      System.setProperty("org.apache.commons.logging.Log","org.apache.commons.logging.impl.LogKitLogger");
    }
    log.info(JMeterUtils.getJMeterCopyright());
    log.info("Version " + JMeterUtils.getJMeterVersion());
    logProperty("java.version");
    logProperty("os.name");
    logProperty("os.arch");
    logProperty("os.version");
    logProperty("file.encoding");
    log.info("Default Locale=" + Locale.getDefault().getDisplayName());
    log.info("JMeter  Locale=" + JMeterUtils.getLocale().getDisplayName());
    log.info("JMeterHome=" + JMeterUtils.getJMeterHome());
    logProperty("user.dir","  =");
    log.info("PWD       =" + new File(".").getCanonicalPath());
    setProxy(parser);
    updateClassLoader();
    if (log.isDebugEnabled()) {
      String jcp=System.getProperty("java.class.path");
      String bits[]=jcp.split(File.pathSeparator);
      log.debug("ClassPath");
      for (int i=0; i < bits.length; i++) {
        log.debug(bits[i]);
      }
      log.debug(jcp);
    }
    long now=System.currentTimeMillis();
    JMeterUtils.setProperty("START.MS",Long.toString(now));
    Date today=new Date(now);
    JMeterUtils.setProperty("START.YMD",new SimpleDateFormat("yyyyMMdd").format(today));
    JMeterUtils.setProperty("START.HMS",new SimpleDateFormat("HHmmss").format(today));
    if (parser.getArgumentById(VERSION_OPT) != null) {
      System.out.println(JMeterUtils.getJMeterCopyright());
      System.out.println("Version " + JMeterUtils.getJMeterVersion());
    }
 else     if (parser.getArgumentById(HELP_OPT) != null) {
      System.out.println(JMeterUtils.getResourceFileAsText("org/apache/jmeter/help.txt"));
    }
 else     if (parser.getArgumentById(SERVER_OPT) != null) {
      final String jmHome=JMeterUtils.getJMeterHome();
      if (jmHome.indexOf(" ") > -1) {
        log.error("JMeter path cannot contain spaces when run in server mode : " + jmHome);
        throw new RuntimeException("JMeter path cannot contain spaces when run in server mode: " + jmHome);
      }
      startServer(JMeterUtils.getPropDefault("server_port",0));
      startOptionalServers();
    }
 else     if (parser.getArgumentById(NONGUI_OPT) == null) {
      startGui(parser.getArgumentById(TESTFILE_OPT));
      startOptionalServers();
    }
 else {
      CLOption rem=parser.getArgumentById(REMOTE_OPT_PARAM);
      if (rem == null)       rem=parser.getArgumentById(REMOTE_OPT);
      startNonGui(parser.getArgumentById(TESTFILE_OPT),parser.getArgumentById(LOGFILE_OPT),rem);
      startOptionalServers();
    }
  }
 catch (  IllegalUserActionException e) {
    System.out.println(e.getMessage());
    System.out.println("Incorrect Usage");
    System.out.println(CLUtil.describeOptions(options).toString());
  }
catch (  Throwable e) {
    if (log != null) {
      log.fatalError("An error occurred: ",e);
    }
 else {
      e.printStackTrace();
    }
    System.out.println("An error occurred: " + e.getMessage());
    System.exit(1);
  }
}
