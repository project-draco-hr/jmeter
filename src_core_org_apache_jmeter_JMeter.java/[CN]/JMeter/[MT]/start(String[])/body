{
  CLArgsParser parser=new CLArgsParser(args,options);
  String error=parser.getErrorString();
  if (error == null) {
    boolean gui=parser.getArgumentById(NONGUI_OPT) == null;
    boolean nonGuiOnly=parser.getArgumentById(REMOTE_OPT) != null || parser.getArgumentById(REMOTE_OPT_PARAM) != null || parser.getArgumentById(REMOTE_STOP) != null;
    if (gui && nonGuiOnly) {
      error="-r and -R and -X are only valid in non-GUI mode";
    }
  }
  if (null != error) {
    System.err.println("Error: " + error);
    System.out.println("Usage");
    System.out.println(CLUtil.describeOptions(options).toString());
    System.out.println("Error: " + error);
    return;
  }
  try {
    initializeProperties(parser);
    if (System.getProperty("org.apache.commons.logging.Log") == null) {
      System.setProperty("org.apache.commons.logging.Log","org.apache.commons.logging.impl.LogKitLogger");
    }
    Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(){
      @Override public void uncaughtException(      Thread t,      Throwable e){
        if (!(e instanceof ThreadDeath)) {
          log.error("Uncaught exception: ",e);
          System.err.println("Uncaught Exception " + e + ". See log file for details.");
        }
      }
    }
);
    log.info(JMeterUtils.getJMeterCopyright());
    log.info("Version " + JMeterUtils.getJMeterVersion());
    logProperty("java.version");
    logProperty("java.vm.name");
    logProperty("os.name");
    logProperty("os.arch");
    logProperty("os.version");
    logProperty("file.encoding");
    log.info("Max memory     =" + Runtime.getRuntime().maxMemory());
    log.info("Available Processors =" + Runtime.getRuntime().availableProcessors());
    log.info("Default Locale=" + Locale.getDefault().getDisplayName());
    log.info("JMeter  Locale=" + JMeterUtils.getLocale().getDisplayName());
    log.info("JMeterHome=" + JMeterUtils.getJMeterHome());
    logProperty("user.dir","  =");
    log.info("PWD       =" + new File(".").getCanonicalPath());
    log.info("IP: " + JMeterUtils.getLocalHostIP() + " Name: "+ JMeterUtils.getLocalHostName()+ " FullName: "+ JMeterUtils.getLocalHostFullName());
    setProxy(parser);
    updateClassLoader();
    if (log.isDebugEnabled()) {
      String jcp=System.getProperty("java.class.path");
      String[] bits=jcp.split(File.pathSeparator);
      log.debug("ClassPath");
      for (      String bit : bits) {
        log.debug(bit);
      }
    }
    long now=System.currentTimeMillis();
    JMeterUtils.setProperty("START.MS",Long.toString(now));
    Date today=new Date(now);
    JMeterUtils.setProperty("START.YMD",new SimpleDateFormat("yyyyMMdd").format(today));
    JMeterUtils.setProperty("START.HMS",new SimpleDateFormat("HHmmss").format(today));
    if (parser.getArgumentById(VERSION_OPT) != null) {
      displayAsciiArt();
    }
 else     if (parser.getArgumentById(HELP_OPT) != null) {
      displayAsciiArt();
      System.out.println(JMeterUtils.getResourceFileAsText("org/apache/jmeter/help.txt"));
    }
 else     if (parser.getArgumentById(OPTIONS_OPT) != null) {
      displayAsciiArt();
      System.out.println(CLUtil.describeOptions(options).toString());
    }
 else     if (parser.getArgumentById(SERVER_OPT) != null) {
      try {
        RemoteJMeterEngineImpl.startServer(JMeterUtils.getPropDefault("server_port",0));
      }
 catch (      Exception ex) {
        System.err.println("Server failed to start: " + ex);
        log.error("Giving up, as server failed with:",ex);
        throw ex;
      }
      startOptionalServers();
    }
 else {
      String testFile=null;
      CLOption testFileOpt=parser.getArgumentById(TESTFILE_OPT);
      if (testFileOpt != null) {
        testFile=testFileOpt.getArgument();
        if (USE_LAST_JMX.equals(testFile)) {
          testFile=LoadRecentProject.getRecentFile(0);
        }
      }
      CLOption testReportOpt=parser.getArgumentById(REPORT_GENERATING_OPT);
      if (testReportOpt != null) {
        String reportFile=testReportOpt.getArgument();
        ReportGenerator generator=new ReportGenerator(reportFile,null);
        generator.generate();
      }
 else       if (parser.getArgumentById(NONGUI_OPT) == null) {
        startGui(testFile);
        startOptionalServers();
      }
 else {
        CLOption reportOutputFolderOpt=parser.getArgumentById(REPORT_OUTPUT_FOLDER_OPT);
        if (reportOutputFolderOpt != null) {
          String reportOutputFolder=parser.getArgumentById(REPORT_OUTPUT_FOLDER_OPT).getArgument();
          File reportOutputFolderAsFile=new File(reportOutputFolder);
          JOrphanUtils.canSafelyWriteToFolder(reportOutputFolderAsFile);
          log.info("Setting property '" + JMETER_REPORT_OUTPUT_DIR_PROPERTY + "' to:'"+ reportOutputFolderAsFile.getAbsolutePath()+ "'");
          JMeterUtils.setProperty(JMETER_REPORT_OUTPUT_DIR_PROPERTY,reportOutputFolderAsFile.getAbsolutePath());
        }
        CLOption rem=parser.getArgumentById(REMOTE_OPT_PARAM);
        if (rem == null) {
          rem=parser.getArgumentById(REMOTE_OPT);
        }
        CLOption jtl=parser.getArgumentById(LOGFILE_OPT);
        String jtlFile=null;
        if (jtl != null) {
          jtlFile=processLAST(jtl.getArgument(),".jtl");
        }
        CLOption reportAtEndOpt=parser.getArgumentById(REPORT_AT_END_OPT);
        if (reportAtEndOpt != null) {
          if (jtlFile == null) {
            throw new IllegalUserActionException("Option -" + REPORT_AT_END_OPT + " requires -"+ LOGFILE_OPT+ " option");
          }
        }
        startNonGui(testFile,jtlFile,rem,reportAtEndOpt != null);
        startOptionalServers();
      }
    }
  }
 catch (  IllegalUserActionException e) {
    System.out.println("Incorrect Usage:" + e.getMessage());
    System.out.println(CLUtil.describeOptions(options).toString());
  }
catch (  Throwable e) {
    log.fatalError("An error occurred: ",e);
    System.out.println("An error occurred: " + e.getMessage());
    System.exit(1);
  }
}
