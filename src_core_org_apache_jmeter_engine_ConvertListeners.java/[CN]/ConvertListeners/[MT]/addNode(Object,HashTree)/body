{
  for (  Object item : subTree.list()) {
    if (item instanceof AbstractThreadGroup) {
      log.debug("num threads = " + ((AbstractThreadGroup)item).getNumThreads());
    }
    if (item instanceof Remoteable) {
      if (item instanceof RemoteThreadsListenerTestElement) {
        try {
          RemoteThreadsListenerWrapper wrapper=new RemoteThreadsListenerWrapper(new RemoteThreadsListenerImpl());
          subTree.replace(item,wrapper);
        }
 catch (        RemoteException e) {
          log.error("Error replacing " + RemoteThreadsListenerTestElement.class.getName() + " by wrapper:"+ RemoteThreadsListenerWrapper.class.getName(),e);
        }
        continue;
      }
      if (item instanceof ThreadListener) {
        log.error("Cannot handle ThreadListener Remotable item " + item.getClass().getName());
        continue;
      }
      try {
        RemoteSampleListener rtl=new RemoteSampleListenerImpl(item);
        if (item instanceof TestStateListener && item instanceof SampleListener) {
          RemoteListenerWrapper wrap=new RemoteListenerWrapper(rtl);
          subTree.replace(item,wrap);
        }
 else         if (item instanceof TestStateListener) {
          RemoteTestListenerWrapper wrap=new RemoteTestListenerWrapper(rtl);
          subTree.replace(item,wrap);
        }
 else         if (item instanceof SampleListener) {
          RemoteSampleListenerWrapper wrap=new RemoteSampleListenerWrapper(rtl);
          subTree.replace(item,wrap);
        }
 else {
          log.warn("Could not replace Remotable item " + item.getClass().getName());
        }
      }
 catch (      RemoteException e) {
        log.error("",e);
      }
    }
  }
}
