{
  log.info("Running the test!");
  running=true;
  JMeterContextService.startTest();
  try {
    PreCompiler compiler=new PreCompiler();
    test.traverse(compiler);
  }
 catch (  RuntimeException e) {
    log.error("Error occurred compiling the tree:",e);
    JMeterUtils.reportErrorToUser("Error occurred compiling the tree: - see log file");
    return;
  }
  SearchByClass<TestStateListener> testListeners=new SearchByClass<TestStateListener>(TestStateListener.class);
  test.traverse(testListeners);
  testListeners.getSearchResults().addAll(testList);
  testList.clear();
  if (!startListenersLater) {
    notifyTestListenersOfStart(testListeners);
  }
  test.traverse(new TurnElementsOn());
  if (startListenersLater) {
    notifyTestListenersOfStart(testListeners);
  }
  List<?> testLevelElements=new LinkedList<Object>(test.list(test.getArray()[0]));
  removeThreadGroups(testLevelElements);
  SearchByClass<SetupThreadGroup> setupSearcher=new SearchByClass<SetupThreadGroup>(SetupThreadGroup.class);
  SearchByClass<AbstractThreadGroup> searcher=new SearchByClass<AbstractThreadGroup>(AbstractThreadGroup.class);
  SearchByClass<PostThreadGroup> postSearcher=new SearchByClass<PostThreadGroup>(PostThreadGroup.class);
  test.traverse(setupSearcher);
  test.traverse(searcher);
  test.traverse(postSearcher);
  TestCompiler.initialize();
  Iterator<SetupThreadGroup> setupIter=setupSearcher.getSearchResults().iterator();
  Iterator<AbstractThreadGroup> iter=searcher.getSearchResults().iterator();
  Iterator<PostThreadGroup> postIter=postSearcher.getSearchResults().iterator();
  ListenerNotifier notifier=new ListenerNotifier();
  int groupCount=0;
  JMeterContextService.clearTotalThreads();
  if (setupIter.hasNext()) {
    log.info("Starting setUp thread groups");
    while (running && setupIter.hasNext()) {
      AbstractThreadGroup group=setupIter.next();
      groupCount++;
      String groupName=group.getName();
      log.info("Starting setUp ThreadGroup: " + groupCount + " : "+ groupName);
      startThreadGroup(group,groupCount,setupSearcher,testLevelElements,notifier);
      if (serialized && setupIter.hasNext()) {
        log.info("Waiting for setup thread group: " + groupName + " to finish before starting next setup group");
        group.waitThreadsStopped();
      }
    }
    log.info("Waiting for all setup thread groups to exit");
    waitThreadsStopped();
    log.info("All Setup Threads have ended");
    groupCount=0;
    JMeterContextService.clearTotalThreads();
  }
  groups.clear();
  JMeterUtils.helpGC();
  JMeterContextService.getContext().setSamplingStarted(true);
  boolean mainGroups=running;
  while (running && iter.hasNext()) {
    AbstractThreadGroup group=iter.next();
    if (group instanceof SetupThreadGroup) {
      continue;
    }
    if (group instanceof PostThreadGroup) {
      continue;
    }
    groupCount++;
    String groupName=group.getName();
    log.info("Starting ThreadGroup: " + groupCount + " : "+ groupName);
    startThreadGroup(group,groupCount,searcher,testLevelElements,notifier);
    if (serialized && iter.hasNext()) {
      log.info("Waiting for thread group: " + groupName + " to finish before starting next group");
      group.waitThreadsStopped();
    }
  }
  if (groupCount == 0) {
    log.info("No enabled thread groups found");
  }
 else {
    if (running) {
      log.info("All thread groups have been started");
    }
 else {
      log.info("Test stopped - no more thread groups will be started");
    }
  }
  waitThreadsStopped();
  groups.clear();
  if (postIter.hasNext()) {
    groupCount=0;
    JMeterContextService.clearTotalThreads();
    log.info("Starting tearDown thread groups");
    if (mainGroups && !running) {
      running=shutdown & tearDownOnShutdown;
    }
    while (running && postIter.hasNext()) {
      AbstractThreadGroup group=postIter.next();
      groupCount++;
      String groupName=group.getName();
      log.info("Starting tearDown ThreadGroup: " + groupCount + " : "+ groupName);
      startThreadGroup(group,groupCount,postSearcher,testLevelElements,notifier);
      if (serialized && postIter.hasNext()) {
        log.info("Waiting for post thread group: " + groupName + " to finish before starting next post group");
        group.waitThreadsStopped();
      }
    }
    waitThreadsStopped();
  }
  notifyTestListenersOfEnd(testListeners);
}
