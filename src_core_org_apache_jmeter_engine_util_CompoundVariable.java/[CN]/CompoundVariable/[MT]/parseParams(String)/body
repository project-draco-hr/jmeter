{
  LinkedList uncompiled=new LinkedList();
  LinkedList compiled=new LinkedList();
  StringTokenizer st=new StringTokenizer(params,",",true);
  StringBuffer buffer=new StringBuffer();
  String token, previous;
  previous=token="";
  while (st.hasMoreElements()) {
    buffer.append(st.nextElement());
    token=buffer.toString();
    boolean foundOpen=false;
    int searchIndex=-1;
    while (!foundOpen) {
      searchIndex=token.indexOf("(",searchIndex + 1);
      if (searchIndex == -1)       break;
 else       if (searchIndex == 0 || token.charAt(searchIndex - 1) != '\\')       foundOpen=true;
    }
    if (foundOpen) {
      if (findMatching("(",")",token) != -1) {
        uncompiled.add(token);
        previous=token;
        buffer=new StringBuffer();
      }
    }
 else {
      if (token.equals(",") && (previous.equals(",") || previous.length() == 0)) {
        uncompiled.add("");
      }
 else       if (!token.equals(",")) {
        uncompiled.add(token);
      }
      previous=token;
      buffer=new StringBuffer();
    }
  }
  if (token.equals(",")) {
    uncompiled.add("");
  }
  for (int i=0; i < uncompiled.size(); i++) {
    CompoundVariable c=new CompoundVariable();
    c.setParameters((String)uncompiled.get(i));
    compiled.addLast(c);
  }
  return compiled;
}
