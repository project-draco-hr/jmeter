{
  LinkedList result=new LinkedList();
  StringBuffer buffer=new StringBuffer();
  char[] current=new char[1];
  char previous=' ';
  int functionRecursion=0;
  int parenRecursion=0;
  try {
    while (reader.read(current) == 1) {
      if (current[0] == '\\') {
        buffer.append(current[0]);
        if (reader.read(current) == 0) {
          break;
        }
        previous=' ';
        buffer.append(current[0]);
        continue;
      }
 else       if (current[0] == ',' && functionRecursion == 0) {
        CompoundVariable param=new CompoundVariable();
        param.setParameters(buffer.toString());
        buffer.setLength(0);
        result.add(param);
      }
 else       if (current[0] == ')' && functionRecursion == 0 && parenRecursion == 0) {
        if (buffer.length() == 0 && result.isEmpty()) {
          return result;
        }
        CompoundVariable param=new CompoundVariable();
        param.setParameters(buffer.toString());
        buffer.setLength(0);
        result.add(param);
        return result;
      }
 else       if (current[0] == '{' && previous == '$') {
        buffer.append(current[0]);
        previous=current[0];
        functionRecursion++;
      }
 else       if (current[0] == '}' && functionRecursion > 0) {
        buffer.append(current[0]);
        previous=current[0];
        functionRecursion--;
      }
 else       if (current[0] == ')' && functionRecursion == 0 && parenRecursion > 0) {
        buffer.append(current[0]);
        previous=current[0];
        parenRecursion--;
      }
 else       if (current[0] == '(' && functionRecursion == 0) {
        buffer.append(current[0]);
        previous=current[0];
        parenRecursion++;
      }
 else {
        buffer.append(current[0]);
        previous=current[0];
      }
    }
  }
 catch (  IOException e) {
    log.error("Error parsing function: " + buffer.toString(),e);
  }
  log.warn("Probably an invalid function string: " + buffer.toString());
  CompoundVariable var=new CompoundVariable();
  var.setParameters(buffer.toString());
  result.add(var);
  return result;
}
