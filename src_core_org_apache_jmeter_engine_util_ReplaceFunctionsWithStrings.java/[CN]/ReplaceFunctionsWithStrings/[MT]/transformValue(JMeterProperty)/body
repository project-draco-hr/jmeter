{
  PatternMatcher pm=JMeterUtils.getMatcher();
  Pattern pattern=null;
  PatternCompiler compiler=new Perl5Compiler();
  Iterator iter=getVariables().keySet().iterator();
  String input=prop.getStringValue();
  while (iter.hasNext()) {
    String key=(String)iter.next();
    String value=(String)getVariables().get(key);
    if (regexMatch) {
      try {
        pattern=compiler.compile(value);
        input=Util.substitute(pm,pattern,new StringSubstitution("${" + key + "}"),input,Util.SUBSTITUTE_ALL);
      }
 catch (      MalformedPatternException e) {
        log.warn("Malformed pattern " + value);
      }
    }
 else {
      input=StringUtilities.substitute(input,value,"${" + key + "}");
    }
  }
  StringProperty newProp=new StringProperty(prop.getName(),input);
  return newProp;
}
