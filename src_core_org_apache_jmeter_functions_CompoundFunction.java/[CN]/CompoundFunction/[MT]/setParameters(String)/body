{
  if (parameters == null || parameters.length() == 0) {
    return;
  }
  List components=new LinkedList();
  util.split(components,variableSplitter,parameters);
  Iterator iter=components.iterator();
  String previous="";
  while (iter.hasNext()) {
    String part=(String)iter.next();
    int index=getFunctionEndIndex(part);
    if (index > -1 && previous.equals("${")) {
      String function=part.substring(0,index);
      String functionName=parseFunctionName(function);
      if (functions.containsKey(functionName)) {
        Object replacement=functions.get(functionName);
        try {
          hasFunction=true;
          Function func=(Function)((Class)replacement).newInstance();
          func.setParameters(extractParams(function));
          compiledComponents.addLast(func);
        }
 catch (        Exception e) {
          log.error("",e);
          throw new InvalidVariableException();
        }
      }
 else {
        UnknownFunction unknown=new UnknownFunction(functionName);
        compiledComponents.addLast(unknown);
        hasFunction=true;
        hasUnknowns=true;
      }
      if ((index + 1) < part.length()) {
        addStringToComponents(compiledComponents,part.substring(index + 1));
      }
    }
 else     if (previous.equals("${")) {
      addStringToComponents(compiledComponents,"${");
      addStringToComponents(compiledComponents,part);
    }
 else     if (!part.equals("${")) {
      addStringToComponents(compiledComponents,part);
    }
    previous=part;
  }
}
