{
  if (parameters == null || parameters.length() == 0) {
    return;
  }
  List components=new LinkedList();
  util.split(components,variableSplitter,parameters);
  Iterator iter=components.iterator();
  String previous="";
  while (iter.hasNext()) {
    String part=(String)iter.next();
    int index=getFunctionEndIndex(part);
    if (index > -1 && previous.equals("${")) {
      String function=part.substring(0,index);
      String functionName=parseFunctionName(function);
      if (definedValues.containsKey(functionName)) {
        Object replacement=definedValues.get(functionName);
        if (replacement instanceof Class) {
          try {
            hasFunction=true;
            Function func=(Function)((Class)replacement).newInstance();
            func.setParameters(extractParams(function));
            compiledComponents.addLast(func);
          }
 catch (          Exception e) {
            e.printStackTrace();
            throw new InvalidVariableException();
          }
        }
 else {
          hasStatics=true;
          addStringToComponents(compiledComponents,(String)replacement);
        }
      }
 else {
        addStringToComponents(compiledComponents,"${" + function + "}");
      }
      if ((index + 1) < part.length()) {
        addStringToComponents(compiledComponents,part.substring(index + 1));
      }
    }
 else     if (previous.equals("${")) {
      addStringToComponents(compiledComponents,"${");
      addStringToComponents(compiledComponents,part);
    }
 else     if (!part.equals("${")) {
      addStringToComponents(compiledComponents,part);
    }
    previous=part;
  }
  if (!hasFunction) {
    staticSubstitution=compiledComponents.getLast().toString();
    if (hasStatics()) {
      compiledComponents.clear();
      hasStatics=false;
      setParameters(staticSubstitution);
      hasStatics=true;
    }
  }
 else   if (hasStatics()) {
    iter=new LinkedList(compiledComponents).iterator();
    while (iter.hasNext()) {
      Object item=iter.next();
      if (item instanceof StringBuffer) {
        CompoundFunction nestedFunc=new CompoundFunction();
        nestedFunc.setUserDefinedVariables(new HashMap());
        nestedFunc.setParameters(item.toString());
        if (nestedFunc.hasFunction()) {
          int index=compiledComponents.indexOf(item);
          compiledComponents.remove(index);
          compiledComponents.add(index,nestedFunc);
        }
      }
    }
  }
}
