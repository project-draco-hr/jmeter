{
  JFileChooser chooser=FileDialoger.promptToOpenFile(new String[]{".jmx"});
  if (chooser == null) {
    return;
  }
  InputStream reader=null;
  try {
    File f=chooser.getSelectedFile();
    if (f != null) {
      boolean isTestPlan=false;
      boolean merging=e.getActionCommand().equals(ActionNames.MERGE);
      if (merging) {
        log.info("Merging file: " + f);
      }
 else {
        log.info("Loading file: " + f);
        ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),ActionNames.CLOSE));
        FileServer.getFileServer().setBasedir(f.getAbsolutePath());
      }
      reader=new FileInputStream(f);
      HashTree tree=SaveService.loadTree(reader);
      isTestPlan=insertLoadedTree(e.getID(),tree,merging);
      if (!merging && isTestPlan) {
        GuiPackage.getInstance().setTestPlanFile(f.getAbsolutePath());
      }
    }
  }
 catch (  NoClassDefFoundError ex) {
    log.warn("Missing jar file",ex);
    String msg=ex.getMessage();
    if (msg == null) {
      msg="Missing jar file - see log for details";
    }
    JMeterUtils.reportErrorToUser(msg);
  }
catch (  ConversionException ex) {
    log.warn("Could not convert file " + ex);
    JMeterUtils.reportErrorToUser(SaveService.CEtoString(ex));
  }
catch (  Exception ex) {
    log.warn("Unexpected error",ex);
    String msg=ex.getMessage();
    if (msg == null) {
      msg="Unexpected error - see log for details";
    }
    JMeterUtils.reportErrorToUser(msg);
  }
 finally {
    JOrphanUtils.closeQuietly(reader);
    GuiPackage.getInstance().updateCurrentGui();
    GuiPackage.getInstance().getMainFrame().repaint();
  }
}
