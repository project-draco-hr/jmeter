{
  this.nodesForRemoval=null;
  JTree tree=(JTree)c;
  TreePath[] paths=tree.getSelectionPaths();
  if (paths != null) {
    sortTreePathByRow(paths,tree);
    boolean[] toRemove=new boolean[paths.length];
    int size=paths.length;
    for (int i=0; i < paths.length; i++) {
      for (int j=0; j < paths.length; j++) {
        if (i != j && ((JMeterTreeNode)paths[i].getLastPathComponent()).isNodeAncestor((JMeterTreeNode)paths[j].getLastPathComponent())) {
          toRemove[i]=true;
          size--;
          break;
        }
      }
    }
    JMeterTreeNode[] nodes=new JMeterTreeNode[size];
    size=0;
    for (int i=0; i < paths.length; i++) {
      if (!toRemove[i]) {
        JMeterTreeNode node=(JMeterTreeNode)paths[i].getLastPathComponent();
        nodes[size++]=node;
      }
    }
    return new NodesTransferable(nodes);
  }
  return null;
}
