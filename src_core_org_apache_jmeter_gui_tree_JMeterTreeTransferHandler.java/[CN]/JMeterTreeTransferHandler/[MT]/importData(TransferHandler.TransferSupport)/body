{
  if (!canImport(support)) {
    return false;
  }
  GuiPackage guiInstance=GuiPackage.getInstance();
  DataFlavor[] flavors=support.getDataFlavors();
  Transferable t=support.getTransferable();
  for (int i=0; i < flavors.length; i++) {
    if (flavors[i].isFlavorJavaFileListType()) {
      try {
        return guiInstance.getMainFrame().openJmxFilesFromDragAndDrop(t);
      }
 catch (      Exception e) {
        LOG.error("Drop file failed",e);
      }
      return false;
    }
  }
  JMeterTreeNode[] nodes=getDraggedNodes(t);
  if (nodes == null || nodes.length == 0) {
    return false;
  }
  JTree.DropLocation dl=(JTree.DropLocation)support.getDropLocation();
  TreePath dest=dl.getPath();
  JMeterTreeNode target=(JMeterTreeNode)dest.getLastPathComponent();
  nodesForRemoval=new ArrayList<JMeterTreeNode>();
  int index=dl.getChildIndex();
  for (int i=0; i < nodes.length; i++) {
    if (index == -1) {
      index=target.getChildCount();
    }
    JMeterTreeNode copy=(JMeterTreeNode)nodes[i].clone();
    Enumeration<?> enumFrom=nodes[i].children();
    while (enumFrom.hasMoreElements()) {
      JMeterTreeNode child=(JMeterTreeNode)enumFrom.nextElement();
      copy.add(child);
    }
    guiInstance.getTreeModel().insertNodeInto(copy,target,index++);
    nodesForRemoval.add(nodes[i]);
  }
  JTree tree=(JTree)support.getComponent();
  tree.expandPath(new TreePath(target.getPath()));
  return true;
}
