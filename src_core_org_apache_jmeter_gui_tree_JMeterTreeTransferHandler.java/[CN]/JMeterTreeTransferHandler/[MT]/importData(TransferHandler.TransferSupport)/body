{
  if (!canImport(support)) {
    return false;
  }
  GuiPackage guiInstance=GuiPackage.getInstance();
  DataFlavor[] flavors=support.getDataFlavors();
  Transferable t=support.getTransferable();
  for (  DataFlavor flavor : flavors) {
    if (flavor.isFlavorJavaFileListType()) {
      try {
        return guiInstance.getMainFrame().openJmxFilesFromDragAndDrop(t);
      }
 catch (      Exception e) {
        LOG.error("Drop file failed",e);
      }
      return false;
    }
  }
  JMeterTreeNode[] nodes=getDraggedNodes(t);
  if (nodes == null || nodes.length == 0) {
    return false;
  }
  JTree.DropLocation dl=(JTree.DropLocation)support.getDropLocation();
  TreePath dest=dl.getPath();
  JMeterTreeNode target=(JMeterTreeNode)dest.getLastPathComponent();
  nodesForRemoval=new ArrayList<>();
  int index=dl.getChildIndex();
  TreePath[] pathsToSelect=new TreePath[nodes.length];
  int pathPosition=0;
  JMeterTreeModel treeModel=guiInstance.getTreeModel();
  for (  JMeterTreeNode node : nodes) {
    if (index == -1) {
      index=target.getChildCount();
    }
    JMeterTreeNode copy=(JMeterTreeNode)node.clone();
    Enumeration<?> enumFrom=node.children();
    List<JMeterTreeNode> tmp=new ArrayList<>();
    while (enumFrom.hasMoreElements()) {
      JMeterTreeNode child=(JMeterTreeNode)enumFrom.nextElement();
      tmp.add(child);
    }
    for (    JMeterTreeNode jMeterTreeNode : tmp) {
      copy.add(jMeterTreeNode);
    }
    treeModel.insertNodeInto(copy,target,index++);
    nodesForRemoval.add(node);
    pathsToSelect[pathPosition++]=new TreePath(treeModel.getPathToRoot(copy));
  }
  TreePath treePath=new TreePath(target.getPath());
  JTree tree=(JTree)support.getComponent();
  tree.expandPath(treePath);
  tree.setSelectionPaths(pathsToSelect);
  return true;
}
