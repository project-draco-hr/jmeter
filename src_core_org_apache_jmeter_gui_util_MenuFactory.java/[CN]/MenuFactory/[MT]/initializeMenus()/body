{
  try {
    List<String> guiClasses=ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(),new Class[]{JMeterGUIComponent.class,TestBean.class});
    Collections.sort(guiClasses);
    for (    String name : guiClasses) {
      if (name.endsWith("JMeterTreeNode") || name.endsWith("TestBeanGUI")) {
        continue;
      }
      if (elementsToSkip.contains(name)) {
        log.info("Skipping " + name);
        continue;
      }
      boolean hideBean=false;
      JMeterGUIComponent item;
      try {
        Class<?> c=Class.forName(name);
        if (TestBean.class.isAssignableFrom(c)) {
          TestBeanGUI tbgui=new TestBeanGUI(c);
          hideBean=tbgui.isHidden() || (tbgui.isExpert() && !JMeterUtils.isExpertMode());
          item=tbgui;
        }
 else {
          item=(JMeterGUIComponent)c.newInstance();
        }
      }
 catch (      NoClassDefFoundError e) {
        log.warn("Missing jar? Could not create " + name + ". "+ e);
        continue;
      }
catch (      Throwable e) {
        log.warn("Could not instantiate " + name,e);
        if (e instanceof Error) {
          throw (Error)e;
        }
        if (e instanceof RuntimeException) {
          throw (RuntimeException)e;
        }
        continue;
      }
      if (hideBean || elementsToSkip.contains(item.getStaticLabel())) {
        log.info("Skipping " + name);
        continue;
      }
 else {
        elementsToSkip.add(name);
      }
      Collection<String> categories=item.getMenuCategories();
      if (categories == null) {
        log.debug(name + " participates in no menus.");
        continue;
      }
      if (categories.contains(THREADS)) {
        threads.add(new MenuInfo(item,name));
      }
      if (categories.contains(FRAGMENTS)) {
        fragments.add(new MenuInfo(item,name));
      }
      if (categories.contains(TIMERS)) {
        timers.add(new MenuInfo(item,name));
      }
      if (categories.contains(POST_PROCESSORS)) {
        postProcessors.add(new MenuInfo(item,name));
      }
      if (categories.contains(PRE_PROCESSORS)) {
        preProcessors.add(new MenuInfo(item,name));
      }
      if (categories.contains(CONTROLLERS)) {
        controllers.add(new MenuInfo(item,name));
      }
      if (categories.contains(SAMPLERS)) {
        samplers.add(new MenuInfo(item,name));
      }
      if (categories.contains(NON_TEST_ELEMENTS)) {
        nonTestElements.add(new MenuInfo(item,name));
      }
      if (categories.contains(LISTENERS)) {
        listeners.add(new MenuInfo(item,name));
      }
      if (categories.contains(CONFIG_ELEMENTS)) {
        configElements.add(new MenuInfo(item,name));
      }
      if (categories.contains(ASSERTIONS)) {
        assertions.add(new MenuInfo(item,name));
      }
    }
  }
 catch (  IOException e) {
    log.error("",e);
  }
}
