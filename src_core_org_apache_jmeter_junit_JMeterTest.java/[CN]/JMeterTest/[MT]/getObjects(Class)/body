{
  String exName=extendsClass.getName();
  Object myThis=new String();
  Iterator classes=ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(),new Class[]{extendsClass}).iterator();
  List objects=new LinkedList();
  String n="";
  boolean caughtError=true;
  Throwable caught=null;
  try {
    while (classes.hasNext()) {
      n=(String)classes.next();
      if (n.endsWith("RemoteJMeterEngineImpl")) {
        continue;
      }
      Class c=Class.forName(n);
      try {
        try {
          objects.add(c.newInstance());
        }
 catch (        InstantiationException e) {
          caught=e;
          try {
            objects.add(c.getConstructor(new Class[]{Object.class}).newInstance(new Object[]{myThis}));
          }
 catch (          NoSuchMethodException f) {
            System.out.println(exName + ": could not construct " + n);
          }
        }
      }
 catch (      NoClassDefFoundError e) {
        System.out.println(exName + ": could not construct " + n);
      }
catch (      IllegalAccessException e) {
        caught=e;
      }
catch (      Exception e) {
        caught=e;
        if ((e instanceof RemoteException) || e.getClass().getName().equals("java.awt.HeadlessException")) {
          System.out.println("Error creating " + n + " "+ e.toString());
        }
 else {
          throw new Exception("Error creating " + n + " "+ e.toString());
        }
      }
    }
    caughtError=false;
  }
 catch (  Exception t) {
    caught=t;
    throw t;
  }
catch (  Error t) {
    caught=t;
    throw t;
  }
 finally {
    if (caughtError) {
      System.out.println("Last class=" + n);
      System.out.println("objects.size=" + objects.size());
      System.out.println("Last error=" + caught);
    }
  }
  if (objects.size() == 0) {
    System.out.println("No classes found that extend " + exName + ". Check the following:");
    System.out.println("Search paths are:");
    String ss[]=JMeterUtils.getSearchPaths();
    for (int i=0; i < ss.length; i++) {
      System.out.println(ss[i]);
    }
    System.out.println("Class path is:");
    System.out.println(System.getProperty("java.class.path"));
  }
  return objects;
}
