{
  LOG.debug(START_LOADING_MSG);
  ReportGeneratorConfiguration configuration=new ReportGeneratorConfiguration();
  final Props props=new Props();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Loading properties:\r\n" + properties);
  }
  props.load(properties);
  final File tempDirectory=getRequiredProperty(props,REPORT_GENERATOR_KEY_TEMP_DIR,REPORT_GENERATOR_KEY_TEMP_DIR_DEFAULT,File.class);
  configuration.setTempDirectory(tempDirectory);
  final long apdexSatisfiedThreshold=getRequiredProperty(props,REPORT_GENERATOR_KEY_APDEX_SATISFIED_THRESHOLD,REPORT_GENERATOR_KEY_APDEX_SATISFIED_THRESHOLD_DEFAULT,long.class).longValue();
  configuration.setApdexSatisfiedThreshold(apdexSatisfiedThreshold);
  final long apdexToleratedThreshold=getRequiredProperty(props,REPORT_GENERATOR_KEY_APDEX_TOLERATED_THRESHOLD,REPORT_GENERATOR_KEY_APDEX_TOLERATED_THRESHOLD_DEFAULT,long.class).longValue();
  configuration.setApdexToleratedThreshold(apdexToleratedThreshold);
  final boolean ignoreTCFromTop5ErrorsBySampler=getRequiredProperty(props,REPORT_GENERATOR_KEY_EXCLUDE_TC_FROM_TOP5_ERRORS_BY_SAMPLER,Boolean.TRUE,Boolean.class).booleanValue();
  configuration.setIgnoreTCFromTop5ErrorsBySampler(ignoreTCFromTop5ErrorsBySampler);
  final String sampleFilter=getOptionalProperty(props,REPORT_GENERATOR_KEY_SAMPLE_FILTER,String.class);
  configuration.setSampleFilter(sampleFilter);
  final String reportTitle=getOptionalProperty(props,REPORT_GENERATOR_KEY_REPORT_TITLE,String.class);
  configuration.setReportTitle(reportTitle);
  Date reportStartDate=null;
  Date reportEndDate=null;
  final String startDateValue=getOptionalProperty(props,REPORT_GENERATOR_KEY_START_DATE,String.class);
  final String endDateValue=getOptionalProperty(props,REPORT_GENERATOR_KEY_END_DATE,String.class);
  String rangeDateFormat=getOptionalProperty(props,REPORT_GENERATOR_KEY_RANGE_DATE_FORMAT,String.class);
  if (StringUtils.isEmpty(rangeDateFormat)) {
    rangeDateFormat=RANGE_DATE_FORMAT_DEFAULT;
  }
  SimpleDateFormat dateFormat=new SimpleDateFormat(rangeDateFormat,Locale.ENGLISH);
  try {
    if (!StringUtils.isEmpty(startDateValue)) {
      reportStartDate=dateFormat.parse(startDateValue);
      configuration.setStartDate(reportStartDate);
    }
  }
 catch (  ParseException e) {
    LOG.error("Error parsing property " + REPORT_GENERATOR_KEY_START_DATE + " with value: "+ startDateValue+ " using format: "+ rangeDateFormat,e);
  }
  try {
    if (!StringUtils.isEmpty(endDateValue)) {
      reportEndDate=dateFormat.parse(endDateValue);
      configuration.setEndDate(reportEndDate);
    }
  }
 catch (  ParseException e) {
    LOG.error("Error parsing property " + REPORT_GENERATOR_KEY_END_DATE + " with value: "+ endDateValue+ " using format: "+ rangeDateFormat,e);
  }
  LOG.info("Will use date range start date: " + startDateValue + ", end date: "+ endDateValue);
  final Map<String,GraphConfiguration> graphConfigurations=configuration.getGraphConfigurations();
  loadSubConfiguration(graphConfigurations,props,REPORT_GENERATOR_GRAPH_KEY_PREFIX,false,new GraphConfigurationFactory(props));
  if (graphConfigurations.isEmpty()) {
    LOG.info("No graph configuration found.");
  }
  final Map<String,ExporterConfiguration> exportConfigurations=configuration.getExportConfigurations();
  loadSubConfiguration(exportConfigurations,props,REPORT_GENERATOR_EXPORTER_KEY_PREFIX,false,new ExporterConfigurationFactory(props));
  if (exportConfigurations.isEmpty()) {
    LOG.warn("No export configuration found. No report will be generated.");
  }
  LOG.debug(END_LOADING_MSG);
  return configuration;
}
