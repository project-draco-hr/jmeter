{
  if (context == null) {
    throw new ArgumentNullException("context");
  }
  if (file == null) {
    throw new ArgumentNullException("file");
  }
  if (configuration == null) {
    throw new ArgumentNullException("configuration");
  }
  log.debug("Start template processing");
  DataContext dataContext=new DataContext();
  final ExporterConfiguration exportCfg=configuration.getExportConfigurations().get(getName());
  File templateDirectory=getPropertyFromConfig(exportCfg,TEMPLATE_DIR,TEMPLATE_DIR_DEFAULT,File.class);
  if (templateDirectory.isDirectory() == false) {
    String message=String.format(INVALID_TEMPLATE_DIRECTORY_FMT,templateDirectory);
    log.error(message);
    throw new ExportException(message);
  }
  File outputDir=getPropertyFromConfig(exportCfg,OUTPUT_DIR,OUTPUT_DIR_DEFAULT,File.class);
  log.info("Will generate dashboard in folder:" + outputDir);
  addToContext(DATA_CTX_FILTERS_ONLY_SAMPLE_SERIES,exportCfg.filtersOnlySampleSeries(),dataContext);
  addToContext(DATA_CTX_SERIES_FILTER,exportCfg.getSeriesFilter(),dataContext);
  addToContext(DATA_CTX_SHOW_CONTROLLERS_ONLY,exportCfg.showControllerSeriesOnly(),dataContext);
  JsonizerVisitor jsonizer=new JsonizerVisitor();
  Map<String,Object> storedData=context.getData();
  addResultToContext(ReportGenerator.BEGIN_DATE_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.END_DATE_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.APDEX_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.ERRORS_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.REQUESTS_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.STATISTICS_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  for (  String graphId : configuration.getGraphConfigurations().keySet()) {
    final SubConfiguration extraOptions=exportCfg.getGraphExtraConfigurations().get(graphId);
    addResultToContext(graphId,storedData,dataContext,jsonizer,new ResultCustomizer(){
      @Override public ResultData customizeResult(      ResultData result){
        MapResultData customizedResult=new MapResultData();
        customizedResult.setResult(DATA_CTX_RESULT,(ResultData)result);
        if (extraOptions != null) {
          MapResultData extraResult=new MapResultData();
          for (          Map.Entry<String,String> extraEntry : extraOptions.getProperties().entrySet()) {
            extraResult.setResult(extraEntry.getKey(),new ValueResultData(extraEntry.getValue()));
          }
          customizedResult.setResult(DATA_CTX_EXTRA_OPTIONS,extraResult);
        }
        return customizedResult;
      }
    }
);
  }
  long oldTimestamp=formatTimestamp(ReportGenerator.BEGIN_DATE_CONSUMER_NAME,dataContext);
  formatTimestamp(ReportGenerator.END_DATE_CONSUMER_NAME,dataContext);
  TimeZone timezone=TimeZone.getDefault();
  addToContext(DATA_CTX_TIMEZONE_OFFSET,timezone.getOffset(oldTimestamp),dataContext);
  addToContext(DATA_CTX_TESTFILE,file.getName(),dataContext);
  addToContext(DATA_CTX_OVERALL_FILTER,configuration.getSampleFilter(),dataContext);
  Configuration templateCfg=new Configuration(Configuration.getVersion());
  try {
    templateCfg.setDirectoryForTemplateLoading(templateDirectory);
    templateCfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
    TemplateVisitor visitor=new TemplateVisitor(templateDirectory.toPath(),outputDir.toPath(),templateCfg,dataContext);
    Files.walkFileTree(templateDirectory.toPath(),visitor);
  }
 catch (  IOException ex) {
    throw new ExportException("Unable to process template files.",ex);
  }
  log.debug("End of template processing");
}
