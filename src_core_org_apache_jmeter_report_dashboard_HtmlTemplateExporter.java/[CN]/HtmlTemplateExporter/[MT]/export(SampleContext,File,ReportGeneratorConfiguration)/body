{
  Validate.notNull(context,MUST_NOT_BE_NULL,"context");
  Validate.notNull(file,MUST_NOT_BE_NULL,"file");
  Validate.notNull(configuration,MUST_NOT_BE_NULL,"configuration");
  LOG.debug("Start template processing");
  DataContext dataContext=new DataContext();
  final ExporterConfiguration exportCfg=configuration.getExportConfigurations().get(getName());
  File templateDirectory=getPropertyFromConfig(exportCfg,TEMPLATE_DIR,new File(JMeterUtils.getJMeterBinDir(),TEMPLATE_DIR_NAME_DEFAULT),File.class);
  if (!templateDirectory.isDirectory()) {
    String message=String.format(INVALID_TEMPLATE_DIRECTORY_FMT,templateDirectory.getAbsolutePath());
    LOG.error(message);
    throw new ExportException(message);
  }
  File outputDir=getPropertyFromConfig(exportCfg,OUTPUT_DIR,getReportOutputFolder(),File.class);
  LOG.info("Will generate dashboard in folder:" + outputDir);
  final boolean filtersOnlySampleSeries=exportCfg.filtersOnlySampleSeries();
  addToContext(DATA_CTX_FILTERS_ONLY_SAMPLE_SERIES,Boolean.valueOf(filtersOnlySampleSeries),dataContext);
  final String seriesFilter=exportCfg.getSeriesFilter();
  Pattern filterPattern=null;
  if (StringUtils.isNotBlank(seriesFilter)) {
    try {
      filterPattern=Pattern.compile(seriesFilter);
    }
 catch (    PatternSyntaxException ex) {
      LOG.error(String.format("Invalid series filter: \"%s\", %s",seriesFilter,ex.getDescription()));
    }
  }
  addToContext(DATA_CTX_SERIES_FILTER,seriesFilter,dataContext);
  final boolean showControllerSeriesOnly=exportCfg.showControllerSeriesOnly();
  addToContext(DATA_CTX_SHOW_CONTROLLERS_ONLY,Boolean.valueOf(showControllerSeriesOnly),dataContext);
  JsonizerVisitor jsonizer=new JsonizerVisitor();
  Map<String,Object> storedData=context.getData();
  addResultToContext(ReportGenerator.BEGIN_DATE_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.END_DATE_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.APDEX_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.ERRORS_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.REQUESTS_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.STATISTICS_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  ExtraOptionsResultCustomizer customizer=new ExtraOptionsResultCustomizer();
  EmptyGraphChecker checker=new EmptyGraphChecker(filtersOnlySampleSeries,showControllerSeriesOnly,filterPattern);
  for (  Map.Entry<String,GraphConfiguration> graphEntry : configuration.getGraphConfigurations().entrySet()) {
    final String graphId=graphEntry.getKey();
    final GraphConfiguration graphConfiguration=graphEntry.getValue();
    final SubConfiguration extraOptions=exportCfg.getGraphExtraConfigurations().get(graphId);
    customizer.setExtraOptions(extraOptions);
    checker.setExcludesControllers(graphConfiguration.excludesControllers());
    checker.setGraphId(graphId);
    addResultToContext(graphId,storedData,dataContext,jsonizer,customizer,checker);
  }
  long oldTimestamp=formatTimestamp(ReportGenerator.BEGIN_DATE_CONSUMER_NAME,dataContext);
  formatTimestamp(ReportGenerator.END_DATE_CONSUMER_NAME,dataContext);
  TimeZone timezone=TimeZone.getDefault();
  addToContext(DATA_CTX_TIMEZONE_OFFSET,Integer.valueOf(timezone.getOffset(oldTimestamp)),dataContext);
  addToContext(DATA_CTX_TESTFILE,file.getName(),dataContext);
  addToContext(DATA_CTX_OVERALL_FILTER,configuration.getSampleFilter(),dataContext);
  Configuration templateCfg=new Configuration(Configuration.getVersion());
  try {
    templateCfg.setDirectoryForTemplateLoading(templateDirectory);
    templateCfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
    LOG.info("Report will be generated in:" + outputDir.getAbsolutePath() + ", creating folder structure");
    FileUtils.forceMkdir(outputDir);
    TemplateVisitor visitor=new TemplateVisitor(templateDirectory.toPath(),outputDir.toPath(),templateCfg,dataContext);
    Files.walkFileTree(templateDirectory.toPath(),visitor);
  }
 catch (  IOException ex) {
    throw new ExportException("Unable to process template files.",ex);
  }
  LOG.debug("End of template processing");
}
