{
  if (resultCollector != null) {
    log.info("Flushing result collector before report Generation");
    resultCollector.flushFile();
  }
  log.debug("Start report generation");
  File tmpDir=configuration.getTempDirectory();
  boolean tmpDirCreated=false;
  if (!tmpDir.exists()) {
    tmpDirCreated=tmpDir.mkdir();
    if (!tmpDirCreated) {
      String message=String.format("Cannot create temporary directory \"%s\".",tmpDir);
      log.error(message);
      throw new GenerationException(message);
    }
  }
  SampleContext sampleContext=new SampleContext();
  sampleContext.setWorkingDirectory(tmpDir);
  SampleSource source=new CsvFileSampleSource(testFile,JMeterUtils.getPropDefault("jmeter.save.saveservice.default_delimiter",",").charAt(0));
  source.setSampleContext(sampleContext);
  NormalizerSampleConsumer normalizer=new NormalizerSampleConsumer();
  normalizer.setName(NORMALIZER_CONSUMER_NAME);
  normalizer.addSampleConsumer(createBeginDateConsumer());
  normalizer.addSampleConsumer(createEndDateConsumer());
  FilterConsumer nameFilter=createNameFilter();
  FilterConsumer excludeControllerFilter=createExcludeControllerFilter();
  nameFilter.addSampleConsumer(excludeControllerFilter);
  normalizer.addSampleConsumer(nameFilter);
  source.addSampleConsumer(normalizer);
  Map<String,GraphConfiguration> graphConfigurations=configuration.getGraphConfigurations();
  HashMap<GraphConfiguration,AbstractGraphConsumer> graphMap=new HashMap<>();
  for (  Map.Entry<String,GraphConfiguration> entryGraphCfg : graphConfigurations.entrySet()) {
    String graphName=entryGraphCfg.getKey();
    GraphConfiguration graphConfiguration=entryGraphCfg.getValue();
    String className=graphConfiguration.getClassName();
    try {
      Class<?> clazz=Class.forName(className);
      Object obj=clazz.newInstance();
      AbstractGraphConsumer graph=(AbstractGraphConsumer)obj;
      graph.setName(graphName);
      Method[] methods=clazz.getMethods();
      for (      Map.Entry<String,String> entryProperty : graphConfiguration.getProperties().entrySet()) {
        String propertyName=entryProperty.getKey();
        String propertyValue=entryProperty.getValue();
        String setterName=getSetterName(propertyName);
        setProperty(className,obj,methods,propertyName,propertyValue,setterName);
      }
      AbstractSampleConsumer entryPoint=graphConfiguration.excludesControllers() ? excludeControllerFilter : nameFilter;
      entryPoint.addSampleConsumer(graph);
      graphMap.put(graphConfiguration,graph);
    }
 catch (    ClassNotFoundException|IllegalAccessException|InstantiationException|ClassCastException ex) {
      String error=String.format(INVALID_CLASS_FMT,className);
      log.error(error,ex);
      throw new GenerationException(error,ex);
    }
  }
  log.debug("Start samples processing");
  try {
    source.run();
  }
 catch (  SampleException ex) {
    String message="Error while processing samples";
    log.error(message,ex);
    throw new GenerationException(message,ex);
  }
  log.debug("End of samples processing");
  log.debug("Start data exporting");
  for (  Map.Entry<String,ExporterConfiguration> entry : configuration.getExportConfigurations().entrySet()) {
    String exporterName=entry.getKey();
    ExporterConfiguration exporterConfiguration=entry.getValue();
    String className=exporterConfiguration.getClassName();
    try {
      Class<?> clazz=Class.forName(className);
      Object obj=clazz.newInstance();
      DataExporter exporter=(DataExporter)obj;
      exporter.setName(exporterName);
      exporter.export(sampleContext,testFile,configuration);
    }
 catch (    ClassNotFoundException|IllegalAccessException|InstantiationException|ClassCastException ex) {
      String error=String.format(INVALID_CLASS_FMT,className);
      log.error(error,ex);
      throw new GenerationException(error,ex);
    }
catch (    ExportException ex) {
      String error=String.format(INVALID_EXPORT_FMT,exporterName);
      log.error(error,ex);
      throw new GenerationException(error,ex);
    }
  }
  log.debug("End of data exporting");
  if (tmpDirCreated) {
    try {
      FileUtils.deleteDirectory(tmpDir);
    }
 catch (    IOException ex) {
      log.warn(String.format("Cannot delete created temporary directory \"%s\".",tmpDir),ex);
    }
  }
  log.debug("End of report generation");
}
