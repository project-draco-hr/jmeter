{
  int sz=samples.size();
  if (sz <= 1) {
    return samples;
  }
  int middle=sz / 2;
  final List<Sample> left=samples.subList(0,middle);
  final List<Sample> right=samples.subList(middle,sz);
  List<Sample> newLeft;
  List<Sample> newRight;
  Job<List<Sample>> jobLeft=createSortJob(left);
  Job<List<Sample>> jobRight=createSortJob(right);
  if (parallelize) {
    workQueue.add(jobLeft);
    workQueue.add(jobRight);
    try {
      newLeft=jobLeft.getResult();
      newRight=jobRight.getResult();
    }
 catch (    InterruptedException ie) {
      throw new SampleException("Unexpected interruption !",ie);
    }
  }
 else {
    newLeft=jobLeft.exec();
    newRight=jobRight.exec();
  }
  return merge(newLeft,newRight);
}
