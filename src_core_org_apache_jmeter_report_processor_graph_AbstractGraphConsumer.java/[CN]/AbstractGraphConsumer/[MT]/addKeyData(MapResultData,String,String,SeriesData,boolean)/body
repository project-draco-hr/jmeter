{
  ListResultData seriesList=(ListResultData)result.getResult(RESULT_SERIES);
  MapResultData seriesResult=null;
  int index=0;
  int size=seriesList.getSize();
  while (seriesResult == null && index < size) {
    MapResultData currSeries=(MapResultData)seriesList.get(index);
    String name=String.valueOf(((ValueResultData)currSeries.getResult(RESULT_SERIES_NAME)).getValue());
    if (Objects.equals(name,series)) {
      seriesResult=currSeries;
    }
    index++;
  }
  if (seriesResult == null) {
    seriesResult=new MapResultData();
    seriesResult.setResult(RESULT_SERIES_NAME,new ValueResultData(series));
    seriesResult.setResult(RESULT_SERIES_IS_CONTROLLER,new ValueResultData(Boolean.valueOf(seriesData.isControllersSeries())));
    seriesResult.setResult(RESULT_SERIES_IS_OVERALL,new ValueResultData(Boolean.valueOf(seriesData.isOverallSeries())));
    seriesResult.setResult(RESULT_SERIES_DATA,new ListResultData());
    seriesList.addResult(seriesResult);
  }
  ListResultData dataResult=(ListResultData)seriesResult.getResult(RESULT_SERIES_DATA);
  Map<Double,Aggregator> aggInfo;
  if (!aggregated) {
    aggInfo=seriesData.getAggregatorInfo();
  }
 else {
    series=String.format(aggregatedKeysSeriesFormat,series);
    aggInfo=new HashMap<>();
    aggInfo.put(Double.valueOf(seriesData.getKeysAggregator().getResult()),seriesData.getValuesAggregator());
  }
  if (!renderPercentiles) {
    for (    Map.Entry<Double,Aggregator> entry : aggInfo.entrySet()) {
      Double key=entry.getKey();
      Double value=Double.valueOf(entry.getValue().getResult());
      ListResultData coordResult=new ListResultData();
      if (!revertsKeysAndValues) {
        key=entry.getKey();
        value=Double.valueOf(entry.getValue().getResult());
      }
 else {
        key=Double.valueOf(entry.getValue().getResult());
        value=entry.getKey();
      }
      coordResult.addResult(new ValueResultData(key));
      coordResult.addResult(new ValueResultData(value));
      dataResult.addResult(coordResult);
      setMinResult(result,RESULT_MIN_X,key);
      setMaxResult(result,RESULT_MAX_X,key);
      setMinResult(result,RESULT_MIN_Y,value);
      setMaxResult(result,RESULT_MAX_Y,value);
    }
  }
 else {
    long count=seriesData.getCount();
    int rank=0;
    double percent=0;
    TreeMap<Double,Aggregator> sortedInfo=new TreeMap<>(aggInfo);
    if (!revertsKeysAndValues) {
      for (      Map.Entry<Double,Aggregator> entry : sortedInfo.entrySet()) {
        Double value=entry.getKey();
        percent+=(double)100 * entry.getValue().getCount() / count;
        double percentile=(double)rank / 10;
        while (percentile < percent) {
          ListResultData coordResult=new ListResultData();
          coordResult.addResult(new ValueResultData(Double.valueOf(percentile)));
          coordResult.addResult(new ValueResultData(value));
          dataResult.addResult(coordResult);
          percentile=(double)++rank / 10;
        }
        setMinResult(result,RESULT_MIN_Y,value);
        setMaxResult(result,RESULT_MAX_Y,value);
      }
      setMinResult(result,RESULT_MIN_X,Double.valueOf(0d));
      setMaxResult(result,RESULT_MAX_X,Double.valueOf(100d));
    }
 else {
      for (      Map.Entry<Double,Aggregator> entry : sortedInfo.entrySet()) {
        Double value=entry.getKey();
        percent+=(double)100 * entry.getValue().getCount() / count;
        double percentile=(double)rank / 10;
        while (percentile < percent) {
          ListResultData coordResult=new ListResultData();
          coordResult.addResult(new ValueResultData(value));
          coordResult.addResult(new ValueResultData(Double.valueOf(percentile)));
          dataResult.addResult(coordResult);
          percentile=(double)++rank / 10;
        }
        setMinResult(result,RESULT_MIN_X,value);
        setMaxResult(result,RESULT_MAX_X,value);
      }
      setMinResult(result,RESULT_MIN_Y,Double.valueOf(0d));
      setMaxResult(result,RESULT_MAX_Y,Double.valueOf(100d));
    }
  }
}
