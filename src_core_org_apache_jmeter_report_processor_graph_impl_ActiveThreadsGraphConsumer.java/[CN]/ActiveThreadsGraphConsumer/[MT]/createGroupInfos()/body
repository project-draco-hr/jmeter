{
  HashMap<String,GroupInfo> groupInfos=new HashMap<>(1);
  groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP,new GroupInfo(new MeanAggregatorFactory(),new AbstractSeriesSelector(){
    @Override public Iterable<String> select(    Sample sample){
      String threadName=sample.getThreadName();
      int index=threadName.lastIndexOf(" ");
      if (index >= 0) {
        threadName=threadName.substring(0,index);
      }
      return Arrays.asList(new String[]{threadName});
    }
  }
,new GraphValueSelector(){
    @Override public Double select(    String series,    Sample sample){
      if (!sample.isEmptyController()) {
        return Double.valueOf(sample.getGroupThreads());
      }
 else {
        return null;
      }
    }
  }
,false,false));
  return groupInfos;
}
