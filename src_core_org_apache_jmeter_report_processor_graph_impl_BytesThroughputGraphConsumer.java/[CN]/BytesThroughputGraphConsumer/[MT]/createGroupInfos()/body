{
  HashMap<String,GroupInfo> groupInfos=new HashMap<>(2);
  groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP,new GroupInfo(new TimeRateAggregatorFactory(),new AbstractSeriesSelector(){
    private final Iterable<String> values=Arrays.asList(RECEIVED_BYTES_SERIES_LABEL,SENT_BYTES_SERIES_LABEL);
    @Override public Iterable<String> select(    Sample sample){
      return values;
    }
  }
,new GraphValueSelector(){
    @Override public Double select(    String series,    Sample sample){
      if (!sample.isController()) {
        return Double.valueOf((RECEIVED_BYTES_SERIES_LABEL.equals(series)) ? sample.getReceivedBytes() : sample.getSentBytes());
      }
 else {
        return null;
      }
    }
  }
,false,false));
  return groupInfos;
}
