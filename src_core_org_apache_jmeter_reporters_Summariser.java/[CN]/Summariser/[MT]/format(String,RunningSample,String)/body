{
  DecimalFormat dfDouble=new DecimalFormat("#0.0");
  StringBuilder tmp=new StringBuilder(20);
  StringBuilder sb=new StringBuilder(100);
  sb.append(name);
  sb.append(" ");
  sb.append(type);
  sb.append(" ");
  sb.append(longToSb(tmp,s.getNumSamples(),6));
  sb.append(" in ");
  long elapsed=s.getElapsed();
  sb.append(doubleToSb(dfDouble,tmp,elapsed / 1000.0,5,1));
  sb.append("s = ");
  if (elapsed > 0) {
    sb.append(doubleToSb(dfDouble,tmp,s.getRate(),6,1));
  }
 else {
    sb.append("******");
  }
  sb.append("/s Avg: ");
  sb.append(longToSb(tmp,s.getAverage(),5));
  sb.append(" Min: ");
  sb.append(longToSb(tmp,s.getMin(),5));
  sb.append(" Max: ");
  sb.append(longToSb(tmp,s.getMax(),5));
  sb.append(" Err: ");
  sb.append(longToSb(tmp,s.getErrorCount(),5));
  sb.append(" (");
  sb.append(s.getErrorPercentageString());
  sb.append(")");
  if ("+".equals(type)) {
    ThreadCounts tc=JMeterContextService.getThreadCounts();
    sb.append(" Active: ");
    sb.append(tc.activeThreads);
    sb.append(" Started: ");
    sb.append(tc.startedThreads);
    sb.append(" Finished: ");
    sb.append(tc.finishedThreads);
  }
  return sb.toString();
}
