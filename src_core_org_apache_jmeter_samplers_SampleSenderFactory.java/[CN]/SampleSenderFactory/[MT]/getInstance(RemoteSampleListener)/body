{
  final boolean holdSamples=JMeterUtils.getPropDefault("hold_samples",false);
  final String type=JMeterUtils.getPropDefault("mode",MODE_STRIPPED_BATCH);
  if (holdSamples || type.equalsIgnoreCase(MODE_HOLD)) {
    if (holdSamples) {
      log.warn("Property hold_samples is deprecated and will be removed in upcomping version, use mode=" + MODE_HOLD + " instead");
    }
    HoldSampleSender h=new HoldSampleSender(listener);
    return h;
  }
 else   if (type.equalsIgnoreCase(MODE_BATCH)) {
    BatchSampleSender b=new BatchSampleSender(listener);
    return b;
  }
 else   if (type.equalsIgnoreCase(MODE_STRIPPED_BATCH)) {
    return new DataStrippingSampleSender(new BatchSampleSender(listener));
  }
 else   if (type.equalsIgnoreCase(MODE_STATISTICAL)) {
    StatisticalSampleSender s=new StatisticalSampleSender(listener);
    return s;
  }
 else   if (type.equalsIgnoreCase(MODE_STANDARD)) {
    StandardSampleSender s=new StandardSampleSender(listener);
    return s;
  }
 else   if (type.equalsIgnoreCase(MODE_STRIPPED)) {
    return new DataStrippingSampleSender(listener);
  }
 else   if (type.equalsIgnoreCase(MODE_ASYNCH)) {
    return new AsynchSampleSender(listener);
  }
 else   if (type.equalsIgnoreCase(MODE_STRIPPED_ASYNCH)) {
    return new DataStrippingSampleSender(new AsynchSampleSender(listener));
  }
 else   if (type.equalsIgnoreCase(MODE_DISKSTORE)) {
    return new DiskStoreSampleSender(listener);
  }
 else   if (type.equalsIgnoreCase(MODE_STRIPPED_DISKSTORE)) {
    return new DataStrippingSampleSender(new DiskStoreSampleSender(listener));
  }
 else {
    SampleSender s=null;
    try {
      Class<?> clazz=Class.forName(type);
      Constructor<?> cons=clazz.getConstructor(new Class[]{RemoteSampleListener.class});
      s=(SampleSender)cons.newInstance(new Object[]{listener});
    }
 catch (    Exception e) {
      log.error("Unable to create a sample sender from class:'" + type + "', search for mode property in jmeter.properties for correct configuration options");
      throw new IllegalArgumentException("Unable to create a sample sender from mode or class:'" + type + "', search for mode property in jmeter.properties for correct configuration options, message:"+ e.getMessage(),e);
    }
    return s;
  }
}
