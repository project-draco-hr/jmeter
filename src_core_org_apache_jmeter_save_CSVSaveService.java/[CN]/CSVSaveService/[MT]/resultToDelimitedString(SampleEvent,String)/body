{
final class StringEscaper {
    final StringBuffer sb=new StringBuffer();
    private final char[] specials;
    private boolean addDelim;
    public StringEscaper(    char delim){
      specials=new char[]{delim,QUOTING_CHAR,CharUtils.CR,CharUtils.LF};
      addDelim=false;
    }
    private void addDelim(){
      if (addDelim) {
        sb.append(specials[0]);
      }
 else {
        addDelim=true;
      }
    }
    public void append(    String s){
      addDelim();
      sb.append(escapeDelimiters(s,specials));
    }
    public void append(    Object obj){
      append(String.valueOf(obj));
    }
    public void append(    int i){
      addDelim();
      sb.append(i);
    }
    public void append(    long l){
      addDelim();
      sb.append(l);
    }
    public void append(    boolean b){
      addDelim();
      sb.append(b);
    }
    public String toString(){
      return sb.toString();
    }
  }
  StringEscaper text=new StringEscaper(delimiter.charAt(0));
  SampleResult sample=event.getResult();
  SampleSaveConfiguration saveConfig=sample.getSaveConfig();
  if (saveConfig.saveTimestamp()) {
    if (saveConfig.printMilliseconds()) {
      text.append(sample.getTimeStamp());
    }
 else     if (saveConfig.formatter() != null) {
      String stamp=saveConfig.formatter().format(new Date(sample.getTimeStamp()));
      text.append(stamp);
    }
  }
  if (saveConfig.saveTime()) {
    text.append(sample.getTime());
  }
  if (saveConfig.saveLabel()) {
    text.append(sample.getSampleLabel());
  }
  if (saveConfig.saveCode()) {
    text.append(sample.getResponseCode());
  }
  if (saveConfig.saveMessage()) {
    text.append(sample.getResponseMessage());
  }
  if (saveConfig.saveThreadName()) {
    text.append(sample.getThreadName());
  }
  if (saveConfig.saveDataType()) {
    text.append(sample.getDataType());
  }
  if (saveConfig.saveSuccess()) {
    text.append(sample.isSuccessful());
  }
  if (saveConfig.saveAssertionResultsFailureMessage()) {
    String message=null;
    AssertionResult[] results=sample.getAssertionResults();
    if (results != null) {
      for (int i=0; i < results.length; i++) {
        message=results[i].getFailureMessage();
        if (message != null)         break;
      }
    }
    if (message != null) {
      text.append(message);
    }
 else {
      text.append("");
    }
  }
  if (saveConfig.saveBytes()) {
    text.append(sample.getBytes());
  }
  if (saveConfig.saveThreadCounts()) {
    text.append(sample.getGroupThreads());
    text.append(sample.getAllThreads());
  }
  if (saveConfig.saveUrl()) {
    text.append(sample.getURL());
  }
  if (saveConfig.saveFileName()) {
    text.append(sample.getResultFileName());
  }
  if (saveConfig.saveLatency()) {
    text.append(sample.getLatency());
  }
  if (saveConfig.saveEncoding()) {
    text.append(sample.getDataEncoding());
  }
  if (saveConfig.saveSampleCount()) {
    text.append(sample.getSampleCount());
    text.append(sample.getErrorCount());
  }
  if (saveConfig.saveHostname()) {
    text.append(event.getHostname());
  }
  for (int i=0; i < SampleEvent.getVarCount(); i++) {
    text.append(event.getVarValue(i));
  }
  return text.toString();
}
