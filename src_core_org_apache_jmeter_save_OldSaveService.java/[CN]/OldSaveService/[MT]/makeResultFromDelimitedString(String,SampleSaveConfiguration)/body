{
  if (inputLine.startsWith(TIME_STAMP) || inputLine.startsWith(CSV_TIME)) {
    return null;
  }
  SampleResult result=null;
  long timeStamp=0;
  long elapsed=0;
  String parts[]=inputLine.split("\\Q" + _saveConfig.getDelimiter());
  String text=null;
  int i=0;
  try {
    if (saveConfig.printMilliseconds()) {
      text=parts[i++];
      timeStamp=Long.parseLong(text);
    }
 else     if (saveConfig.formatter() != null) {
      text=parts[i++];
      Date stamp=saveConfig.formatter().parse(text);
      timeStamp=stamp.getTime();
    }
    if (saveConfig.saveTime()) {
      text=parts[i++];
      elapsed=Long.parseLong(text);
    }
    result=new SampleResult(timeStamp,elapsed);
    if (saveConfig.saveLabel()) {
      text=parts[i++];
      result.setSampleLabel(text);
    }
    if (saveConfig.saveCode()) {
      text=parts[i++];
      result.setResponseCode(text);
    }
    if (saveConfig.saveMessage()) {
      text=parts[i++];
      result.setResponseMessage(text);
    }
    if (saveConfig.saveThreadName()) {
      text=parts[i++];
      result.setThreadName(text);
    }
    if (saveConfig.saveDataType()) {
      text=parts[i++];
      result.setDataType(text);
    }
    if (saveConfig.saveSuccess()) {
      text=parts[i++];
      result.setSuccessful(Boolean.valueOf(text).booleanValue());
    }
    if (saveConfig.saveAssertionResultsFailureMessage()) {
      i++;
    }
    if (saveConfig.saveBytes()) {
      text=parts[i++];
      result.setBytes(Integer.parseInt(text));
    }
    if (saveConfig.saveThreadCounts()) {
      i+=2;
    }
    if (saveConfig.saveUrl()) {
      i++;
    }
    if (saveConfig.saveFileName()) {
      text=parts[i++];
      result.setResultFileName(text);
    }
    if (saveConfig.saveLatency()) {
      text=parts[i++];
      result.setLatency(Long.parseLong(text));
    }
    if (saveConfig.saveEncoding()) {
      text=parts[i++];
      result.setEncodingAndType(text);
    }
  }
 catch (  NumberFormatException e) {
    log.warn("Error parsing number " + e);
    throw e;
  }
catch (  ParseException e) {
    log.warn("Error parsing line " + e);
    throw new RuntimeException(e.toString());
  }
  return result;
}
