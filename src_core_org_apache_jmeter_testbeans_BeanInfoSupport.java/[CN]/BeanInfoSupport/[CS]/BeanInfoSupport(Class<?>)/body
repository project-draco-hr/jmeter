{
  this.beanClass=beanClass;
  try {
    rootBeanInfo=Introspector.getBeanInfo(beanClass,Introspector.IGNORE_IMMEDIATE_BEANINFO);
  }
 catch (  IntrospectionException e) {
    throw new Error("Can't introspect " + beanClass,e);
  }
  beanDescriptor=rootBeanInfo.getBeanDescriptor();
  try {
    ResourceBundle resourceBundle=ResourceBundle.getBundle(beanClass.getName() + "Resources",JMeterUtils.getLocale());
    getBeanDescriptor().setValue(RESOURCE_BUNDLE,resourceBundle);
    if (resourceBundle.containsKey("displayName")) {
      getBeanDescriptor().setDisplayName(resourceBundle.getString("displayName"));
    }
 else {
      log.debug("Localized display name not available for bean " + beanClass);
    }
    PropertyDescriptor[] properties=getPropertyDescriptors();
    for (int i=0; i < properties.length; i++) {
      String name=properties[i].getName();
      try {
        properties[i].setDisplayName(resourceBundle.getString(name + ".displayName"));
      }
 catch (      MissingResourceException e) {
        log.debug("Localized display name not available for property " + name + " in "+ beanClass);
      }
      try {
        properties[i].setShortDescription(resourceBundle.getString(name + ".shortDescription"));
      }
 catch (      MissingResourceException e) {
        log.debug("Localized short description not available for property " + name + " in "+ beanClass);
      }
    }
  }
 catch (  MissingResourceException e) {
    log.warn("Localized strings not available for bean " + beanClass,e);
  }
catch (  Exception e) {
    log.warn("Something bad happened when loading bean info for bean " + beanClass,e);
  }
}
