{
  super();
  this.beanInfo=beanInfo;
  descriptors=beanInfo.getPropertyDescriptors();
  Arrays.sort(descriptors,new PropertyComparator(beanInfo));
  editors=new PropertyEditor[descriptors.length];
  int scriptLanguageIndex=0;
  int textAreaEditorIndex=0;
  for (int i=0; i < descriptors.length; i++) {
    PropertyDescriptor descriptor=descriptors[i];
    String name=descriptor.getName();
    if (descriptor.isHidden() || (descriptor.isExpert() && !JMeterUtils.isExpertMode()) || descriptor.getReadMethod() == null || descriptor.getWriteMethod() == null) {
      log.debug("Skipping editor for property " + name);
      editors[i]=null;
      continue;
    }
    PropertyEditor propertyEditor;
    Object guiType=descriptor.getValue(GUITYPE);
    if (guiType instanceof TypeEditor) {
      propertyEditor=((TypeEditor)guiType).getInstance(descriptor);
    }
 else     if (guiType instanceof Class && Enum.class.isAssignableFrom((Class<?>)guiType)) {
      @SuppressWarnings("unchecked") final Class<? extends Enum<?>> enumClass=(Class<? extends Enum<?>>)guiType;
      propertyEditor=new EnumEditor(descriptor,enumClass,(ResourceBundle)descriptor.getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE));
    }
 else {
      Class<?> editorClass=descriptor.getPropertyEditorClass();
      if (log.isDebugEnabled()) {
        log.debug("Property " + name + " has editor class "+ editorClass);
      }
      if (editorClass != null) {
        try {
          propertyEditor=(PropertyEditor)editorClass.newInstance();
        }
 catch (        InstantiationException e) {
          log.error("Can't create property editor.",e);
          throw new Error(e.toString());
        }
catch (        IllegalAccessException e) {
          log.error("Can't create property editor.",e);
          throw new Error(e.toString());
        }
      }
 else {
        Class<?> c=descriptor.getPropertyType();
        propertyEditor=PropertyEditorManager.findEditor(c);
      }
    }
    if (propertyEditor == null) {
      log.warn("No editor for property: " + name + " type: "+ descriptor.getPropertyType()+ " in bean: "+ beanInfo.getBeanDescriptor().getDisplayName());
      editors[i]=null;
      continue;
    }
    if (log.isDebugEnabled()) {
      log.debug("Property " + name + " has property editor "+ propertyEditor);
    }
    validateAttributes(descriptor,propertyEditor);
    if (!propertyEditor.supportsCustomEditor()) {
      propertyEditor=createWrapperEditor(propertyEditor,descriptor);
      if (log.isDebugEnabled()) {
        log.debug("Editor for property " + name + " is wrapped in "+ propertyEditor);
      }
    }
    if (propertyEditor instanceof TestBeanPropertyEditor) {
      ((TestBeanPropertyEditor)propertyEditor).setDescriptor(descriptor);
    }
    if (propertyEditor instanceof TextAreaEditor) {
      textAreaEditorIndex=i;
    }
    if (propertyEditor.getCustomEditor() instanceof JScrollPane) {
      scrollerCount++;
    }
    editors[i]=propertyEditor;
    setEditorValue(i,descriptor.getValue(DEFAULT));
    if (name.equals("scriptLanguage")) {
      scriptLanguageIndex=i;
    }
  }
  String beanName=this.beanInfo.getBeanDescriptor().getName();
  if (beanName.startsWith("BSF") || beanName.startsWith("JSR223")) {
    WrapperEditor we=(WrapperEditor)editors[scriptLanguageIndex];
    TextAreaEditor tae=(TextAreaEditor)editors[textAreaEditorIndex];
    we.addChangeListener(tae);
  }
  propertyFieldLabelMessage=new MessageFormat(JMeterUtils.getResString("property_as_field_label"));
  propertyToolTipMessage=new MessageFormat(JMeterUtils.getResString("property_tool_tip"));
  init();
}
