{
  threadContext.setCurrentSampler(current);
  SamplePackage pack=compiler.configureSampler(current);
  runPreProcessors(pack.getPreProcessors());
  threadVars.putObject(PACKAGE_OBJECT,pack);
  delay(pack.getTimers());
  Sampler sampler=pack.getSampler();
  sampler.setThreadContext(threadContext);
  sampler.setThreadName(threadName);
  TestBeanHelper.prepare(sampler);
  currentSampler=sampler;
  if (IMPLEMENTS_SAMPLE_STARTED) {
    for (    SampleMonitor monitor : sampleMonitors) {
      monitor.sampleStarting();
    }
  }
  SampleResult result=sampler.sample(null);
  if (IMPLEMENTS_SAMPLE_STARTED) {
    for (    SampleMonitor monitor : sampleMonitors) {
      monitor.sampleEnded();
    }
  }
  currentSampler=null;
  if (result != null) {
    int nbActiveThreadsInThreadGroup=threadGroup.getNumberOfThreads();
    int nbTotalActiveThreads=JMeterContextService.getNumberOfThreads();
    result.setGroupThreads(nbActiveThreadsInThreadGroup);
    result.setAllThreads(nbTotalActiveThreads);
    result.setThreadName(threadName);
    SampleResult[] subResults=result.getSubResults();
    if (subResults != null) {
      for (      SampleResult subResult : subResults) {
        subResult.setGroupThreads(nbActiveThreadsInThreadGroup);
        subResult.setAllThreads(nbTotalActiveThreads);
        subResult.setThreadName(threadName);
      }
    }
    threadContext.setPreviousResult(result);
    runPostProcessors(pack.getPostProcessors());
    checkAssertions(pack.getAssertions(),result,threadContext);
    List<SampleListener> sampleListeners=getSampleListeners(pack,transactionPack,transactionSampler);
    notifyListeners(sampleListeners,result);
    compiler.done(pack);
    if (transactionSampler != null) {
      transactionSampler.addSubSamplerResult(result);
    }
    if (result.isStopThread() || (!result.isSuccessful() && onErrorStopThread)) {
      stopThread();
    }
    if (result.isStopTest() || (!result.isSuccessful() && onErrorStopTest)) {
      stopTest();
    }
    if (result.isStopTestNow() || (!result.isSuccessful() && onErrorStopTestNow)) {
      stopTestNow();
    }
    if (result.isStartNextThreadLoop()) {
      threadContext.setRestartNextLoop(true);
    }
  }
 else {
    compiler.done(pack);
  }
}
