{
  try {
    threadContext=JMeterContextService.getContext();
    threadContext.setVariables(threadVars);
    threadContext.setThreadNum(getThreadNum());
    threadContext.setThread(this);
    testTree.traverse(compiler);
    running=true;
    if (scheduler) {
      startScheduler();
    }
    rampUpDelay();
    log.info("Thread " + Thread.currentThread().getName() + " started");
    controller.initialize();
    controller.addIterationListener(new IterationListener());
    threadContext.setSamplingStarted(true);
    threadStarted();
    while (running) {
      Sampler sam;
      while (running && (sam=controller.next()) != null) {
        try {
          threadContext.setCurrentSampler(sam);
          SamplePackage pack=compiler.configureSampler(sam);
          threadContext.getVariables().putObject(PACKAGE_OBJECT,pack);
          delay(pack.getTimers());
          Sampler sampler=pack.getSampler();
          sampler.setThreadContext(threadContext);
          sampler.setThreadName(threadName);
          if (sampler instanceof TestBean)           ((TestBean)sampler).prepare();
          SampleResult result=sampler.sample(null);
          result.setThreadName(threadName);
          threadContext.setPreviousResult(result);
          runPostProcessors(pack.getPostProcessors());
          checkAssertions(pack.getAssertions(),result);
          notifyListeners(pack.getSampleListeners(),result);
          compiler.done(pack);
          if (result.isStopThread() || (!result.isSuccessful() && onErrorStopThread)) {
            stopThread();
          }
          if (result.isStopTest() || (!result.isSuccessful() && onErrorStopTest)) {
            stopTest();
          }
          if (scheduler) {
            stopScheduler();
          }
        }
 catch (        Exception e) {
          log.error("",e);
        }
      }
      if (controller.isDone()) {
        running=false;
      }
    }
  }
  finally {
    threadContext.clear();
    log.info("Thread " + threadName + " is done");
    monitor.threadFinished(this);
    threadFinished();
  }
}
