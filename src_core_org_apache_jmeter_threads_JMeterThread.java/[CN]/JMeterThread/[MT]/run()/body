{
  JMeterContext threadContext=JMeterContextService.getContext();
  LoopIterationListener iterationListener=null;
  try {
    iterationListener=initRun(threadContext);
    while (running) {
      Sampler firstSampler=controller.next();
      Sampler sam=firstSampler;
      while (running && sam != null) {
        if (onErrorStartNextLoop) {
          if (!TRUE.equals(threadContext.getVariables().get(LAST_SAMPLE_OK)) && sam instanceof TransactionSampler) {
            TransactionSampler ts=(TransactionSampler)sam;
            while (!ts.isTransactionDone()) {
              sam=controller.next();
              ts=(TransactionSampler)sam;
            }
            process_sampler(sam,null,threadContext);
          }
          if (TRUE.equals(threadContext.getVariables().get(LAST_SAMPLE_OK))) {
            process_sampler(sam,null,threadContext);
            sam=controller.next();
          }
 else {
            sam=controller.next();
            while (sam != null && !sam.equals(firstSampler)) {
              sam=controller.next();
            }
            threadContext.getVariables().put(LAST_SAMPLE_OK,TRUE);
          }
        }
 else {
          process_sampler(sam,null,threadContext);
          sam=controller.next();
        }
      }
      if (controller.isDone()) {
        running=false;
      }
    }
  }
 catch (  JMeterStopTestException e) {
    log.info("Stopping Test: " + e.toString());
    stopTest();
  }
catch (  JMeterStopTestNowException e) {
    log.info("Stopping Test Now: " + e.toString());
    stopTestNow();
  }
catch (  JMeterStopThreadException e) {
    log.info("Stop Thread seen: " + e.toString());
  }
catch (  Exception e) {
    log.error("Test failed!",e);
  }
catch (  ThreadDeath e) {
    throw e;
  }
catch (  Error e) {
    log.error("Test failed!",e);
  }
 finally {
    currentSampler=null;
    try {
      interruptLock.lock();
      threadContext.clear();
      log.info("Thread finished: " + threadName);
      threadFinished(iterationListener);
      monitor.threadFinished(this);
      JMeterContextService.removeContext();
    }
  finally {
      interruptLock.unlock();
    }
  }
}
