{
  JMeterContext threadContext=JMeterContextService.getContext();
  LoopIterationListener iterationListener=null;
  try {
    iterationListener=initRun(threadContext);
    while (running) {
      Sampler sam=controller.next();
      while (running && sam != null) {
        process_sampler(sam,null,threadContext);
        threadContext.cleanAfterSample();
        if (onErrorStartNextLoop || threadContext.isRestartNextLoop()) {
          if (threadContext.isRestartNextLoop()) {
            triggerEndOfLoopOnParentControllers(sam,threadContext);
            sam=null;
            threadContext.getVariables().put(LAST_SAMPLE_OK,TRUE);
            threadContext.setRestartNextLoop(false);
          }
 else {
            boolean lastSampleFailed=!TRUE.equals(threadContext.getVariables().get(LAST_SAMPLE_OK));
            if (lastSampleFailed) {
              if (log.isDebugEnabled()) {
                log.debug("StartNextLoop option is on, Last sample failed, starting next loop");
              }
              triggerEndOfLoopOnParentControllers(sam,threadContext);
              sam=null;
              threadContext.getVariables().put(LAST_SAMPLE_OK,TRUE);
            }
 else {
              sam=controller.next();
            }
          }
        }
 else {
          sam=controller.next();
        }
      }
      if (controller.isDone()) {
        running=false;
        log.info("Thread is done: " + threadName);
      }
    }
  }
 catch (  JMeterStopTestException e) {
    log.info("Stopping Test: " + e.toString());
    stopTest();
  }
catch (  JMeterStopTestNowException e) {
    log.info("Stopping Test Now: " + e.toString());
    stopTestNow();
  }
catch (  JMeterStopThreadException e) {
    log.info("Stop Thread seen: " + e.toString());
  }
catch (  Exception e) {
    log.error("Test failed!",e);
  }
catch (  ThreadDeath e) {
    throw e;
  }
catch (  Error e) {
    log.error("Test failed!",e);
  }
 finally {
    currentSampler=null;
    try {
      interruptLock.lock();
      threadContext.clear();
      log.info("Thread finished: " + threadName);
      threadFinished(iterationListener);
      monitor.threadFinished(this);
      JMeterContextService.removeContext();
    }
  finally {
      interruptLock.unlock();
    }
  }
}
