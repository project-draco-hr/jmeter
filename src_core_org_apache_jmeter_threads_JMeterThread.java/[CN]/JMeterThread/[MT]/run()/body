{
  try {
    initRun();
    while (running) {
      Sampler sam;
      while (running && (sam=controller.next()) != null) {
        try {
          threadContext.setCurrentSampler(sam);
          TransactionSampler transactionSampler=null;
          if (sam instanceof TransactionSampler) {
            transactionSampler=(TransactionSampler)sam;
          }
          SamplePackage transactionPack=null;
          if (transactionSampler != null) {
            transactionPack=compiler.configureTransactionSampler(transactionSampler);
            if (transactionSampler.isTransactionDone()) {
              SampleResult transactionResult=transactionSampler.getTransactionResult();
              transactionResult.setThreadName(threadName);
              transactionResult.setGroupThreads(threadGroup.getNumberOfThreads());
              transactionResult.setAllThreads(JMeterContextService.getNumberOfThreads());
              checkAssertions(transactionPack.getAssertions(),transactionResult);
              notifyListeners(transactionPack.getSampleListeners(),transactionResult);
              compiler.done(transactionPack);
              sam=null;
            }
 else {
              sam=transactionSampler.getSubSampler();
            }
          }
          if (sam != null) {
            SamplePackage pack=compiler.configureSampler(sam);
            threadContext.getVariables().putObject(PACKAGE_OBJECT,pack);
            delay(pack.getTimers());
            Sampler sampler=pack.getSampler();
            sampler.setThreadContext(threadContext);
            sampler.setThreadName(threadName);
            TestBeanHelper.prepare(sampler);
            SampleResult result=sampler.sample(null);
            if (result != null) {
              result.setGroupThreads(threadGroup.getNumberOfThreads());
              result.setAllThreads(JMeterContextService.getNumberOfThreads());
              result.setThreadName(threadName);
              threadContext.setPreviousResult(result);
              runPostProcessors(pack.getPostProcessors());
              checkAssertions(pack.getAssertions(),result);
              List sampleListeners=getSampleListeners(pack,transactionPack,transactionSampler);
              notifyListeners(sampleListeners,result);
              compiler.done(pack);
              if (transactionSampler != null) {
                transactionSampler.addSubSamplerResult(result);
              }
              if (result.isStopThread() || (!result.isSuccessful() && onErrorStopThread)) {
                stopThread();
              }
              if (result.isStopTest() || (!result.isSuccessful() && onErrorStopTest)) {
                stopTest();
              }
            }
 else {
              compiler.done(pack);
            }
          }
          if (scheduler) {
            stopScheduler();
          }
        }
 catch (        JMeterStopTestException e) {
          log.info("Stopping Test: " + e.toString());
          stopTest();
        }
catch (        JMeterStopThreadException e) {
          log.info("Stopping Thread: " + e.toString());
          stopThread();
        }
catch (        Exception e) {
          log.error("",e);
        }
      }
      if (controller.isDone()) {
        running=false;
      }
    }
  }
 catch (  JMeterStopTestException e) {
    log.info("Stopping Test: " + e.toString());
    stopTest();
  }
catch (  JMeterStopThreadException e) {
    log.info("Stop Thread seen: " + e.toString());
  }
catch (  Exception e) {
    log.error("Test failed!",e);
  }
catch (  ThreadDeath e) {
    throw e;
  }
catch (  Error e) {
    log.error("Test failed!",e);
  }
 finally {
    threadContext.clear();
    log.info("Thread " + threadName + " is done");
    monitor.threadFinished(this);
    threadFinished();
  }
}
