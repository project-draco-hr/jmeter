{
  List configs=new LinkedList();
  List modifiers=new LinkedList();
  List responseModifiers=new LinkedList();
  List listeners=new LinkedList();
  List timers=new LinkedList();
  List assertions=new LinkedList();
  List extractors=new LinkedList();
  log.debug("Full stack = " + stack);
  for (int i=stack.size(); i > 0; i--) {
    log.debug("looping, i = " + i);
    log.debug("sub-stack = " + stack.subList(0,i));
    Iterator iter=testTree.list(stack.subList(0,i)).iterator();
    while (iter.hasNext()) {
      TestElement item=(TestElement)iter.next();
synchronized (item) {
        if (hasFunctions(item)) {
          objectsWithFunctions.add(item);
        }
      }
      if ((item instanceof ConfigTestElement)) {
        configs.add(item);
      }
      if (item instanceof Modifier) {
        modifiers.add(item);
      }
      if (item instanceof ResponseBasedModifier) {
        responseModifiers.add(item);
      }
      if (item instanceof SampleListener) {
        listeners.add(item);
      }
      if (item instanceof Timer) {
        timers.add(item);
      }
      if (item instanceof Assertion) {
        assertions.add(item);
      }
      if (item instanceof PostProcessor) {
        extractors.add(item);
      }
    }
  }
synchronized (sam) {
    if (hasFunctions(sam)) {
      objectsWithFunctions.add(sam);
    }
  }
  SamplerConfigs samplerConfigs=new SamplerConfigs(configs,modifiers,responseModifiers,listeners,timers,assertions,extractors);
  samplerConfigMap.put(sam,samplerConfigs);
}
