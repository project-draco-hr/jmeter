{
  super.configure(tg);
  threadInput.setText(tg.getPropertyAsString(AbstractThreadGroup.NUM_THREADS));
  rampInput.setText(tg.getPropertyAsString(ThreadGroup.RAMP_TIME));
  loopPanel.configure((TestElement)tg.getProperty(AbstractThreadGroup.MAIN_CONTROLLER).getObjectValue());
  if (showDelayedStart) {
    delayedStart.setSelected(tg.getPropertyAsBoolean(ThreadGroup.DELAYED_START));
  }
  scheduler.setSelected(tg.getPropertyAsBoolean(ThreadGroup.SCHEDULER));
  toggleSchedulerFields(scheduler.isSelected());
  String s=tg.getPropertyAsString(ThreadGroup.START_TIME);
  if (s.length() == 0) {
    start.setDate(new Date());
    end.setDate(new Date());
  }
 else {
    start.setDate(new Date(tg.getPropertyAsLong(ThreadGroup.START_TIME)));
    end.setDate(new Date(tg.getPropertyAsLong(ThreadGroup.END_TIME)));
  }
  duration.setText(tg.getPropertyAsString(ThreadGroup.DURATION));
  delay.setText(tg.getPropertyAsString(ThreadGroup.DELAY));
}
