{
  VerticalPanel threadPropsPanel=new VerticalPanel();
  threadPropsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),JMeterUtils.getResString("thread_properties")));
  JPanel threadPanel=new JPanel(new BorderLayout(5,0));
  JLabel threadLabel=new JLabel(JMeterUtils.getResString("number_of_threads"));
  threadPanel.add(threadLabel,BorderLayout.WEST);
  threadInput=new JTextField(5);
  threadInput.setName(THREAD_NAME);
  threadLabel.setLabelFor(threadInput);
  threadPanel.add(threadInput,BorderLayout.CENTER);
  threadPropsPanel.add(threadPanel);
  JPanel rampPanel=new JPanel(new BorderLayout(5,0));
  JLabel rampLabel=new JLabel(JMeterUtils.getResString("ramp_up"));
  rampPanel.add(rampLabel,BorderLayout.WEST);
  rampInput=new JTextField(5);
  rampInput.setName(RAMP_NAME);
  rampLabel.setLabelFor(rampInput);
  rampPanel.add(rampInput,BorderLayout.CENTER);
  threadPropsPanel.add(rampPanel);
  threadPropsPanel.add(createControllerPanel());
  onDemand=new JCheckBox(JMeterUtils.getResString("ondemand"));
  threadPropsPanel.add(onDemand);
  scheduler=new JCheckBox(JMeterUtils.getResString("scheduler"));
  scheduler.addItemListener(this);
  threadPropsPanel.add(scheduler);
  mainPanel=new VerticalPanel();
  mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),JMeterUtils.getResString("scheduler_configuration")));
  mainPanel.add(createStartTimePanel());
  mainPanel.add(createEndTimePanel());
  mainPanel.add(createDurationPanel());
  mainPanel.add(createDelayPanel());
  mainPanel.setVisible(false);
  VerticalPanel intgrationPanel=new VerticalPanel();
  intgrationPanel.add(threadPropsPanel);
  intgrationPanel.add(mainPanel);
  add(intgrationPanel,BorderLayout.CENTER);
}
