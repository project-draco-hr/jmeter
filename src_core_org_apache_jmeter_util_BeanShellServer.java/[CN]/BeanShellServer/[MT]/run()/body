{
  ClassLoader loader=Thread.currentThread().getContextClassLoader();
  try {
    Class Interpreter=loader.loadClass("bsh.Interpreter");
    Object instance=Interpreter.newInstance();
    Class string=String.class;
    Class object=Object.class;
    Method eval=Interpreter.getMethod("eval",new Class[]{string});
    Method setObj=Interpreter.getMethod("set",new Class[]{string,object});
    Method setInt=Interpreter.getMethod("set",new Class[]{string,int.class});
    setObj.invoke(instance,new Object[]{"t",this});
    setInt.invoke(instance,new Object[]{"portnum",new Integer(serverport)});
    eval.invoke(instance,new Object[]{"setAccessibility(true)"});
    if (serverfile.length() > 0) {
      setObj.invoke(instance,new Object[]{"serverfile",serverfile});
      try {
        eval.invoke(instance,new Object[]{"source(serverfile)"});
      }
 catch (      InvocationTargetException e1) {
        log.warn("Could not evaluate " + serverfile);
      }
    }
    eval.invoke(instance,new Object[]{"server(portnum)"});
  }
 catch (  ClassNotFoundException e) {
    log.error("Beanshell Interpreter not found");
  }
catch (  Exception e) {
    log.error("Problem starting BeanShell server ",e);
  }
}
