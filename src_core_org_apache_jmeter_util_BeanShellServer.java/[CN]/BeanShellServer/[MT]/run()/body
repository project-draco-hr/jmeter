{
  ClassLoader loader=Thread.currentThread().getContextClassLoader();
  try {
    Class<?> interpreter=loader.loadClass("bsh.Interpreter");
    Object instance=interpreter.newInstance();
    Class<String> string=String.class;
    Class<Object> object=Object.class;
    Method eval=interpreter.getMethod("eval",new Class[]{string});
    Method setObj=interpreter.getMethod("set",new Class[]{string,object});
    Method setInt=interpreter.getMethod("set",new Class[]{string,int.class});
    Method source=interpreter.getMethod("source",new Class[]{string});
    setObj.invoke(instance,new Object[]{"t",this});
    setInt.invoke(instance,new Object[]{"portnum",Integer.valueOf(serverport)});
    if (serverfile.length() > 0) {
      try {
        source.invoke(instance,new Object[]{serverfile});
      }
 catch (      InvocationTargetException e1) {
        log.warn("Could not source " + serverfile);
        Throwable t=e1.getCause();
        if (t != null) {
          log.warn(t.toString());
          if (t instanceof Error) {
            throw (Error)t;
          }
        }
      }
    }
    eval.invoke(instance,new Object[]{"setAccessibility(true);"});
    eval.invoke(instance,new Object[]{"server(portnum);"});
  }
 catch (  ClassNotFoundException e) {
    log.error("Beanshell Interpreter not found");
  }
catch (  Exception e) {
    log.error("Problem starting BeanShell server ",e);
  }
}
