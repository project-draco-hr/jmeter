{
  log.debug("ssl Provider =  " + provider);
  setProvider(provider);
  if (null == this.rand) {
    this.rand=new SecureRandom();
  }
  try {
    if (SHARED_SESSION_CONTEXT) {
      log.debug("Creating shared context");
      this.defaultContext=createContext();
    }
 else {
      this.threadlocal=new ThreadLocal<>();
    }
    HttpsURLConnection.setDefaultSSLSocketFactory(new HttpSSLProtocolSocketFactory(this,CPS));
    HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier(){
      @Override public boolean verify(      String hostname,      SSLSession session){
        return true;
      }
    }
);
    Protocol protocol=new Protocol(JsseSSLManager.HTTPS,(ProtocolSocketFactory)new HttpSSLProtocolSocketFactory(this,CPS),443);
    Protocol.registerProtocol(JsseSSLManager.HTTPS,protocol);
    log.debug("SSL stuff all set");
  }
 catch (  GeneralSecurityException ex) {
    log.error("Could not set up SSLContext",ex);
  }
  log.debug("JsseSSLManager installed");
}
