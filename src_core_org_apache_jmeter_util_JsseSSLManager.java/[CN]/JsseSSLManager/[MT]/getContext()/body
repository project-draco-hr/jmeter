{
  if (null == this.context) {
    try {
      if (pro != null) {
        this.context=SSLContext.getInstance("TLS",pro);
      }
 else {
        this.context=SSLContext.getInstance("TLS");
      }
      log.debug("SSL context = " + context);
    }
 catch (    Exception ee) {
      log.error("Could not create SSLContext",ee);
    }
    try {
      KeyManagerFactory managerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
      JmeterKeyStore keys=this.getKeyStore();
      managerFactory.init(null,this.defaultpw.toCharArray());
      KeyManager[] managers=managerFactory.getKeyManagers();
      log.debug(keys.getClass().toString());
      for (int i=0; i < managers.length; i++) {
        if (managers[i] instanceof X509KeyManager) {
          X509KeyManager manager=(X509KeyManager)managers[i];
          managers[i]=new WrappedX509KeyManager(manager,keys);
        }
      }
      TrustManager[] trusts=new TrustManager[]{new AlwaysTrustManager(this.getTrustStore())};
      context.init(managers,trusts,this.rand);
      HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());
      HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier(){
        public boolean verify(        String hostname,        SSLSession session){
          return true;
        }
      }
);
      Protocol protocol=new Protocol("https",(ProtocolSocketFactory)new HttpClientSSLProtocolSocketFactory(context),443);
      Protocol.registerProtocol("https",protocol);
      log.debug("SSL stuff all set");
    }
 catch (    Exception e) {
      log.error("Could not set up SSLContext",e);
    }
    if (log.isDebugEnabled()) {
      String[] dCiphers=this.context.getSocketFactory().getDefaultCipherSuites();
      String[] sCiphers=this.context.getSocketFactory().getSupportedCipherSuites();
      int len=(dCiphers.length > sCiphers.length) ? dCiphers.length : sCiphers.length;
      for (int i=0; i < len; i++) {
        if (i < dCiphers.length) {
          log.debug("Default Cipher: " + dCiphers[i]);
        }
        if (i < sCiphers.length) {
          log.debug("Supported Cipher: " + sCiphers[i]);
        }
      }
    }
  }
  return this.context;
}
