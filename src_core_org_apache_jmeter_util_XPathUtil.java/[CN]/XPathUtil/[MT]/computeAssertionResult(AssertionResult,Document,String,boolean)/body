{
  try {
    XObject xObject=XPathAPI.eval(doc,xPathExpression,getPrefixResolver(doc));
switch (xObject.getType()) {
case XObject.CLASS_NODESET:
      NodeList nodeList=xObject.nodelist();
    if (nodeList == null || nodeList.getLength() == 0) {
      if (log.isDebugEnabled()) {
        log.debug(new StringBuilder("nodeList null no match  ").append(xPathExpression).toString());
      }
      result.setFailure(!isNegated);
      result.setFailureMessage("No Nodes Matched " + xPathExpression);
      return;
    }
  if (log.isDebugEnabled()) {
    log.debug("nodeList length " + nodeList.getLength());
    if (!isNegated) {
      for (int i=0; i < nodeList.getLength(); i++) {
        log.debug(new StringBuilder("nodeList[").append(i).append("] ").append(nodeList.item(i)).toString());
      }
    }
  }
result.setFailure(isNegated);
if (isNegated) {
result.setFailureMessage("Specified XPath was found... Turn off negate if this is not desired");
}
return;
case XObject.CLASS_BOOLEAN:
if (!xObject.bool()) {
result.setFailure(!isNegated);
result.setFailureMessage("No Nodes Matched " + xPathExpression);
}
return;
default :
result.setFailure(true);
result.setFailureMessage("Cannot understand: " + xPathExpression);
return;
}
}
 catch (TransformerException e) {
result.setError(true);
result.setFailureMessage(new StringBuilder("TransformerException: ").append(e.getMessage()).append(" for:").append(xPathExpression).toString());
}
}
