{
  String valueIndex="", defaultValue="", between="";
  String name="";
  Pattern searchPattern;
  Object[] tmplt;
  try {
    searchPattern=JMeterUtils.getPatternCache().getPattern(((CompoundVariable)values[0]).execute(),Perl5Compiler.READ_ONLY_MASK);
    tmplt=generateTemplate(((CompoundVariable)values[1]).execute());
    if (values.length > 2) {
      valueIndex=((CompoundVariable)values[2]).execute();
    }
    if (valueIndex.equals("")) {
      valueIndex="1";
    }
    if (values.length > 3) {
      between=((CompoundVariable)values[3]).execute();
    }
    if (values.length > 4) {
      String dv=((CompoundVariable)values[4]).execute();
      if (!dv.equals("")) {
        defaultValue=dv;
      }
    }
    if (values.length > 5) {
      name=((CompoundVariable)values[values.length - 1]).execute();
    }
  }
 catch (  MalformedCachePatternException e) {
    throw new InvalidVariableException(e.toString());
  }
  JMeterVariables vars=getVariables();
  vars.put(name,defaultValue);
  if (previousResult == null || previousResult.getResponseData().length == 0) {
    return defaultValue;
  }
  List collectAllMatches=new ArrayList();
  try {
    PatternMatcher matcher=JMeterUtils.getMatcher();
    String responseText=new String(previousResult.getResponseData(),previousResult.getDataEncoding());
    PatternMatcherInput input=new PatternMatcherInput(responseText);
    while (matcher.contains(input,searchPattern)) {
      MatchResult match=matcher.getMatch();
      collectAllMatches.add(match);
    }
  }
 catch (  NumberFormatException e) {
    log.error("",e);
    return defaultValue;
  }
catch (  UnsupportedEncodingException e) {
    log.error("Can't convert ResponseData",e);
    return defaultValue;
  }
 finally {
    vars.put(name + "_matchNr","" + collectAllMatches.size());
  }
  if (collectAllMatches.size() == 0) {
    return defaultValue;
  }
  if (valueIndex.equals(ALL)) {
    StringBuffer value=new StringBuffer();
    Iterator it=collectAllMatches.iterator();
    boolean first=true;
    while (it.hasNext()) {
      if (!first) {
        value.append(between);
      }
 else {
        first=false;
      }
      value.append(generateResult((MatchResult)it.next(),name,tmplt,vars));
    }
    return value.toString();
  }
 else   if (valueIndex.equals(RAND)) {
    MatchResult result=(MatchResult)collectAllMatches.get(rand.nextInt(collectAllMatches.size()));
    return generateResult(result,name,tmplt,vars);
  }
 else {
    try {
      int index=Integer.parseInt(valueIndex) - 1;
      MatchResult result=(MatchResult)collectAllMatches.get(index);
      return generateResult(result,name,tmplt,vars);
    }
 catch (    NumberFormatException e) {
      float ratio=Float.parseFloat(valueIndex);
      MatchResult result=(MatchResult)collectAllMatches.get((int)(collectAllMatches.size() * ratio + .5) - 1);
      return generateResult(result,name,tmplt,vars);
    }
catch (    IndexOutOfBoundsException e) {
      return defaultValue;
    }
  }
}
