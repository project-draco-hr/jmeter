{
  List<String> pieces=new ArrayList<String>();
  List<Object> combined=new LinkedList<Object>();
  PatternMatcher matcher=JMeterUtils.getMatcher();
  Util.split(pieces,matcher,templatePattern,rawTemplate);
  PatternMatcherInput input=new PatternMatcherInput(rawTemplate);
  boolean startsWith=isFirstElementGroup(rawTemplate);
  if (startsWith) {
    pieces.remove(0);
  }
  Iterator<String> iter=pieces.iterator();
  while (iter.hasNext()) {
    boolean matchExists=matcher.contains(input,templatePattern);
    if (startsWith) {
      if (matchExists) {
        combined.add(Integer.valueOf(matcher.getMatch().group(1)));
      }
      combined.add(iter.next());
    }
 else {
      combined.add(iter.next());
      if (matchExists) {
        combined.add(Integer.valueOf(matcher.getMatch().group(1)));
      }
    }
  }
  if (matcher.contains(input,templatePattern)) {
    combined.add(Integer.valueOf(matcher.getMatch().group(1)));
  }
  return combined.toArray();
}
