{
  int state=REMARK_NODE_BEFORE_PARSING_STATE;
  StringBuffer tagContents=new StringBuffer();
  int tagBegin=0;
  int tagEnd=0;
  int i=position;
  int inputLen=input.length();
  char ch, prevChar=' ';
  while (i < inputLen && state < REMARK_NODE_ACCEPTED_STATE) {
    ch=input.charAt(i);
    if (state == REMARK_NODE_CLOSING_SECOND_DASH_RECEIVED_STATE) {
      if (ch == '>') {
        state=REMARK_NODE_ACCEPTED_STATE;
        tagEnd=i;
      }
 else       if (ch == '-') {
        tagContents.append(prevChar);
      }
 else {
        state=REMARK_NODE_ACCEPTING_STATE;
        tagContents.append(prevChar);
        tagContents.append(prevChar);
      }
    }
    if (state == REMARK_NODE_CLOSING_FIRST_DASH_RECEIVED_STATE) {
      if (ch == '-') {
        state=REMARK_NODE_CLOSING_SECOND_DASH_RECEIVED_STATE;
      }
 else {
        state=REMARK_NODE_ACCEPTING_STATE;
        tagContents.append(prevChar);
      }
    }
    if (state == REMARK_NODE_ACCEPTING_STATE) {
      if (ch == '-') {
        state=REMARK_NODE_CLOSING_FIRST_DASH_RECEIVED_STATE;
      }
    }
    if (state == REMARK_NODE_ACCEPTING_STATE) {
      tagContents.append(ch);
    }
    if (state == REMARK_NODE_FIRST_DASH_RECEIVED_STATE) {
      if (ch == '-') {
        state=REMARK_NODE_ACCEPTING_STATE;
        if (input.length() > i + 1 && input.charAt(i + 1) == '>') {
          state=REMARK_NODE_ACCEPTED_STATE;
          tagEnd=i + 1;
        }
      }
 else       state=REMARK_NODE_ILLEGAL_STATE;
    }
    if (state == REMARK_NODE_EXCLAMATION_RECEIVED_STATE) {
      if (ch == '-')       state=REMARK_NODE_FIRST_DASH_RECEIVED_STATE;
 else       if (ch == '>') {
        state=REMARK_NODE_ACCEPTED_STATE;
        tagEnd=i;
      }
 else       state=REMARK_NODE_ILLEGAL_STATE;
    }
    if (state == REMARK_NODE_OPENING_ANGLE_BRACKET_STATE) {
      if (ch == '!')       state=REMARK_NODE_EXCLAMATION_RECEIVED_STATE;
 else       state=REMARK_NODE_ILLEGAL_STATE;
    }
    if (state == REMARK_NODE_BEFORE_PARSING_STATE) {
      if (ch == '<') {
        tagBegin=i;
        state=REMARK_NODE_OPENING_ANGLE_BRACKET_STATE;
      }
 else       if (ch != ' ') {
        state=REMARK_NODE_ILLEGAL_STATE;
      }
    }
    if (state >= REMARK_NODE_ACCEPTING_STATE && state < REMARK_NODE_ACCEPTED_STATE && i == input.length() - 1) {
      tagContents.append(Node.getLineSeparator());
      do {
        input=reader.getNextLine();
      }
 while (input != null && input.length() == 0);
      if (input != null)       inputLen=input.length();
 else       inputLen=-1;
      i=-1;
    }
    if (state == REMARK_NODE_ILLEGAL_STATE) {
      return null;
    }
    i++;
    prevChar=ch;
  }
  if (state == REMARK_NODE_ACCEPTED_STATE)   return new RemarkNode(tagBegin,tagEnd,tagContents.toString());
 else   return null;
}
