{
  if (0 == this.args.length) {
    return;
  }
  this.stringLength=this.args[this.argIndex].length();
  while (true) {
    this.ch=peekAtChar();
    if (this.argIndex >= this.args.length) {
      break;
    }
    if (null != this.control && this.control.isFinished(this.lastOptionId)) {
      this.unparsedArgs=subArray(this.args,this.argIndex,this.stringIndex);
      return;
    }
    if (STATE_OPTION_MODE == this.state) {
      if (0 == this.ch) {
        getChar();
        this.state=STATE_NORMAL;
      }
 else {
        parseShortOption();
      }
    }
 else     if (STATE_NORMAL == this.state) {
      parseNormal();
    }
 else     if (STATE_NO_OPTIONS == this.state) {
      addOption(new CLOption(this.args[this.argIndex++]));
    }
 else {
      parseArguments();
    }
  }
  if (this.option != null) {
    if (STATE_OPTIONAL_ARG == this.state) {
      this.options.addElement(this.option);
    }
 else     if (STATE_REQUIRE_ARG == this.state) {
      final CLOptionDescriptor descriptor=getDescriptorFor(this.option.getDescriptor().getId());
      final String message="Missing argument to option " + getOptionDescription(descriptor);
      throw new ParseException(message,0);
    }
 else     if (STATE_REQUIRE_2ARGS == this.state) {
      if (1 == this.option.getArgumentCount()) {
        this.option.addArgument("");
        this.options.addElement(this.option);
      }
 else {
        final CLOptionDescriptor descriptor=getDescriptorFor(this.option.getDescriptor().getId());
        final String message="Missing argument to option " + getOptionDescription(descriptor);
        throw new ParseException(message,0);
      }
    }
 else {
      throw new ParseException("IllegalState " + this.state + ": "+ this.option,0);
    }
  }
}
