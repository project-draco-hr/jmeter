{
  if (STATE_REQUIRE_ARG == this.state) {
    if ('=' == this.ch || 0 == this.ch) {
      getChar();
    }
    final Token token=nextToken(NULL_SEPARATORS);
    this.option.addArgument(token.getValue());
    addOption(this.option);
    this.state=STATE_NORMAL;
  }
 else   if (STATE_OPTIONAL_ARG == this.state) {
    if ('-' == this.ch || 0 == this.ch) {
      getChar();
      addOption(this.option);
      this.state=STATE_NORMAL;
      return;
    }
    if (this.isLong && '=' != this.tokesep) {
      addOption(this.option);
      this.state=STATE_NORMAL;
      return;
    }
    if ('=' == this.ch) {
      getChar();
    }
    final Token token=nextToken(NULL_SEPARATORS);
    this.option.addArgument(token.getValue());
    addOption(this.option);
    this.state=STATE_NORMAL;
  }
 else   if (STATE_REQUIRE_2ARGS == this.state) {
    if (0 == this.option.getArgumentCount()) {
      if (!this.isLong) {
        if (0 == peekAtChar()) {
          getChar();
        }
      }
      final Token token=nextToken(ARG_SEPARATORS);
      if (TOKEN_SEPARATOR == token.getType()) {
        final CLOptionDescriptor descriptor=getDescriptorFor(this.option.getDescriptor().getId());
        final String message="Unable to parse first argument for option " + getOptionDescription(descriptor);
        throw new ParseException(message,0);
      }
 else {
        this.option.addArgument(token.getValue());
      }
      if (0 == this.ch && '-' == peekAtChar()) {
        this.option.addArgument("");
        this.options.addElement(this.option);
        this.state=STATE_NORMAL;
      }
    }
 else {
      final StringBuilder sb=new StringBuilder();
      this.ch=getChar();
      while (!isSeparator(this.ch,NULL_SEPARATORS)) {
        sb.append(this.ch);
        this.ch=getChar();
      }
      final String argument=sb.toString();
      this.option.addArgument(argument);
      addOption(this.option);
      this.option=null;
      this.state=STATE_NORMAL;
    }
  }
}
