{
  HashTree tree1=new HashTree("abcd");
  HashTree tree2=new HashTree("abcd");
  HashTree tree3=new HashTree("abcde");
  HashTree tree4=new HashTree("abcde");
  assertTrue(tree1.equals(tree1));
  assertTrue(tree1.equals(tree2));
  assertTrue(tree2.equals(tree1));
  assertTrue(tree2.equals(tree2));
  assertTrue(tree1.hashCode() == tree2.hashCode());
  assertTrue(tree3.equals(tree3));
  assertTrue(tree3.equals(tree4));
  assertTrue(tree4.equals(tree3));
  assertTrue(tree4.equals(tree4));
  assertTrue(tree3.hashCode() == tree4.hashCode());
  assertNotSame(tree1,tree2);
  assertNotSame(tree1,tree3);
  assertNotSame(tree1,tree4);
  assertNotSame(tree2,tree3);
  assertNotSame(tree2,tree4);
  assertFalse(tree1.equals(tree3));
  assertFalse(tree1.equals(tree4));
  assertFalse(tree2.equals(tree3));
  assertFalse(tree2.equals(tree4));
  assertFalse(tree1.equals(null));
  assertFalse(tree1.equals(null));
  assertFalse(tree2.equals(null));
  assertFalse(tree2.equals(null));
  tree1.add("abcd",tree3);
  assertFalse(tree1.equals(tree2));
  assertFalse(tree2.equals(tree1));
  if (tree1.hashCode() == tree2.hashCode()) {
    System.out.println("WARN: unequal HashTrees should not have equal hashCodes");
  }
  tree2.add("abcd",tree4);
  assertTrue(tree1.equals(tree2));
  assertTrue(tree2.equals(tree1));
  assertTrue(tree1.hashCode() == tree2.hashCode());
}
