{
  File caCertCrt=new File(ROOT_CACERT_CRT);
  File caCertUsr=new File(ROOT_CACERT_USR);
  boolean fileExists=false;
  if (!keystore.delete() && keystore.exists()) {
    log.warn("Problem deleting the keystore '" + keystore + "'");
    fileExists=true;
  }
  if (!caCertCrt.delete() && caCertCrt.exists()) {
    log.warn("Problem deleting the certificate file '" + caCertCrt + "'");
    fileExists=true;
  }
  if (!caCertUsr.delete() && caCertUsr.exists()) {
    log.warn("Problem deleting the certificate file '" + caCertUsr + "'");
    fileExists=true;
  }
  if (fileExists) {
    log.warn("If problems occur when recording SSL, delete the files manually and retry.");
  }
  KeyToolUtils.genkeypair(keystore,ROOTCA_ALIAS,password,validity,DNAME_ROOT_CA_KEY,"bc:c");
  KeyToolUtils.genkeypair(keystore,INTERMEDIATE_CA_ALIAS,password,validity,DNAME_INTERMEDIATE_CA_KEY,"bc:c");
  ByteArrayOutputStream certReqOut=new ByteArrayOutputStream();
  KeyToolUtils.keytool("-certreq",keystore,password,INTERMEDIATE_CA_ALIAS,null,certReqOut);
  InputStream certReqIn=new ByteArrayInputStream(certReqOut.toByteArray());
  ByteArrayOutputStream genCertOut=new ByteArrayOutputStream();
  KeyToolUtils.keytool("-gencert",keystore,password,ROOTCA_ALIAS,certReqIn,genCertOut,"-ext","BC:0");
  InputStream genCertIn=new ByteArrayInputStream(genCertOut.toByteArray());
  KeyToolUtils.keytool("-importcert",keystore,password,INTERMEDIATE_CA_ALIAS,genCertIn,null);
  KeyToolUtils.keytool("-exportcert",keystore,password,ROOTCA_ALIAS,null,null,"-rfc","-file",ROOT_CACERT_CRT);
  if (caCertCrt.exists() && caCertCrt.canRead()) {
    FileUtils.copyFile(caCertCrt,caCertUsr);
  }
 else {
    log.warn("Failed creating " + caCertCrt.getAbsolutePath() + ", check 'keytool' utility in path is available and points to a JDK >= 7");
  }
}
