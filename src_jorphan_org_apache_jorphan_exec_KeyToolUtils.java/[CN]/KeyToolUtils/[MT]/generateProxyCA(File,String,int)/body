{
  File caCert_crt=new File(ROOT_CACERT_CRT);
  File caCert_usr=new File(ROOT_CACERT_USR);
  boolean fileExists=false;
  if (!keystore.delete() && keystore.exists()) {
    log.warn("Problem deleting the keystore '" + keystore + "'");
    fileExists=true;
  }
  if (!caCert_crt.delete() && caCert_crt.exists()) {
    log.warn("Problem deleting the certificate file '" + caCert_crt + "'");
    fileExists=true;
  }
  if (!caCert_usr.delete() && caCert_usr.exists()) {
    log.warn("Problem deleting the certificate file '" + caCert_usr + "'");
    fileExists=true;
  }
  if (fileExists) {
    log.warn("If problems occur when recording SSL, delete the files manually and retry.");
  }
  KeyToolUtils.genkeypair(keystore,ROOTCA_ALIAS,password,validity,DNAME_ROOT_CA_KEY,"bc:c");
  KeyToolUtils.genkeypair(keystore,INTERMEDIATE_CA_ALIAS,password,validity,DNAME_INTERMEDIATE_CA_KEY,"bc:c");
  ByteArrayOutputStream certReqOut=new ByteArrayOutputStream();
  KeyToolUtils.keytool("-certreq",keystore,password,INTERMEDIATE_CA_ALIAS,null,certReqOut);
  InputStream certReqIn=new ByteArrayInputStream(certReqOut.toByteArray());
  ByteArrayOutputStream genCertOut=new ByteArrayOutputStream();
  KeyToolUtils.keytool("-gencert",keystore,password,ROOTCA_ALIAS,certReqIn,genCertOut,"-ext","BC:0");
  InputStream genCertIn=new ByteArrayInputStream(genCertOut.toByteArray());
  KeyToolUtils.keytool("-importcert",keystore,password,INTERMEDIATE_CA_ALIAS,genCertIn,null);
  KeyToolUtils.keytool("-exportcert",keystore,password,ROOTCA_ALIAS,null,null,"-rfc","-file",ROOT_CACERT_CRT);
  FileUtils.copyFile(caCert_crt,caCert_usr);
}
