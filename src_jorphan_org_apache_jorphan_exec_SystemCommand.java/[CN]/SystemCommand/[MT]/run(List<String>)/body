{
  Process proc=null;
  final ProcessBuilder procBuild=new ProcessBuilder(arguments);
  if (env != null) {
    procBuild.environment().putAll(env);
  }
  this.executionEnvironment=Collections.unmodifiableMap(procBuild.environment());
  procBuild.directory(directory);
  if (stderr == null) {
    procBuild.redirectErrorStream(true);
  }
  try {
    proc=procBuild.start();
    final OutputStream procOut=proc.getOutputStream();
    final InputStream procErr=proc.getErrorStream();
    final InputStream procIn=proc.getInputStream();
    final StreamCopier swerr;
    if (stderr != null) {
      swerr=new StreamCopier(procErr,stderr);
      swerr.start();
    }
 else {
      swerr=null;
    }
    final StreamCopier swout=new StreamCopier(procIn,stdout);
    swout.start();
    final StreamCopier swin;
    if (stdin != null) {
      swin=new StreamCopier(stdin,procOut);
      swin.start();
    }
 else {
      swin=null;
      procOut.close();
    }
    int exitVal=waitForEndWithTimeout(proc,timeoutMillis);
    swout.join();
    if (swerr != null) {
      swerr.join();
    }
    if (swin != null) {
      swin.interrupt();
      swin.join();
    }
    return exitVal;
  }
  finally {
    if (proc != null) {
      try {
        proc.destroy();
      }
 catch (      Exception ignored) {
        ignored.printStackTrace();
      }
    }
  }
}
