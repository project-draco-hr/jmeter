{
  this.headers.addAll(Arrays.asList(headers));
  this.classes.addAll(Arrays.asList(renderClasses));
  objectClass=sampleObject.getClass();
  Class[] emptyClasses=new Class[0];
  for (int i=0; i < propertyNames.length; i++) {
    propertyNames[i]=propertyNames[i].substring(0,1).toUpperCase() + propertyNames[i].substring(1);
    try {
      if (!propertyClasses[i].equals(Boolean.class) && !propertyClasses[i].equals(boolean.class)) {
        getMethods.add(objectClass.getMethod("get" + propertyNames[i],emptyClasses));
      }
 else {
        getMethods.add(objectClass.getMethod("is" + propertyNames[i],emptyClasses));
      }
      setMethods.add(objectClass.getMethod("set" + propertyNames[i],new Class[]{propertyClasses[i]}));
    }
 catch (    NoSuchMethodException e) {
      log.error("Invalid Method name for class: " + objectClass,e);
    }
  }
}
