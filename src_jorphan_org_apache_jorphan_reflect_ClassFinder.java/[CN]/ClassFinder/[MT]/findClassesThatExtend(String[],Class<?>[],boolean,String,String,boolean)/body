{
  if (log.isDebugEnabled()) {
    log.debug("searchPathsOrJars : " + Arrays.toString(searchPathsOrJars));
    log.debug("superclass : " + Arrays.toString(classNames));
    log.debug("innerClasses : " + innerClasses + " annotations: "+ annotations);
    log.debug("contains: " + contains + " notContains: "+ notContains);
  }
  String[] strPathsOrJars=addJarsInPath(searchPathsOrJars);
  for (int k=0; k < strPathsOrJars.length; k++) {
    strPathsOrJars[k]=fixPathEntry(strPathsOrJars[k]);
  }
  List<String> listPaths=getClasspathMatches(strPathsOrJars);
  if (log.isDebugEnabled()) {
    for (    String path : listPaths) {
      log.debug("listPaths : " + path);
    }
  }
  @SuppressWarnings("unchecked") final Class<? extends Annotation>[] annoclassNames=(Class<? extends Annotation>[])classNames;
  Set<String> listClasses=annotations ? new AnnoFilterTreeSet(annoclassNames,innerClasses) : new FilterTreeSet(classNames,innerClasses,contains,notContains);
  findClassesInPaths(listPaths,listClasses);
  if (log.isDebugEnabled()) {
    log.debug("listClasses.size()=" + listClasses.size());
    for (    String clazz : listClasses) {
      log.debug("listClasses : " + clazz);
    }
  }
  return new ArrayList<>(listClasses);
}
