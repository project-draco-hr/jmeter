{
  List listPaths=null;
  Set listClasses=null;
  List listSuperClasses=null;
  strPathsOrJars=addJarsInPath(strPathsOrJars);
  if (log.isDebugEnabled()) {
    for (int k=0; k < strPathsOrJars.length; k++) {
      log.debug("strPathsOrJars : " + strPathsOrJars[k]);
    }
  }
  listPaths=getClasspathMatches(strPathsOrJars);
  if (log.isDebugEnabled()) {
    Iterator tIter=listPaths.iterator();
    for (; tIter.hasNext(); ) {
      log.debug("listPaths : " + tIter.next());
    }
  }
  listClasses=new TreeSet();
  listSuperClasses=new ArrayList();
  for (int i=0; i < superClasses.length; i++) {
    listSuperClasses.add(superClasses[i].getName());
  }
  findClassesInPaths(listPaths,listClasses);
  if (log.isDebugEnabled()) {
    Iterator tIter=listClasses.iterator();
    for (; tIter.hasNext(); ) {
      log.debug("listClasses : " + tIter.next());
    }
  }
  Set subClassList=findAllSubclasses(listSuperClasses,listClasses,innerClasses);
  return new ArrayList(subClassList);
}
