{
  if (splittee == null || splitChar == null) {
    return new String[0];
  }
  final String EMPTY_ELEMENT="";
  int spot;
  final int splitLength=splitChar.length();
  final String adjacentSplit=splitChar + splitChar;
  final int adjacentSplitLength=adjacentSplit.length();
  if (truncate) {
    while ((spot=splittee.indexOf(adjacentSplit)) != -1) {
      splittee=splittee.substring(0,spot + splitLength) + splittee.substring(spot + adjacentSplitLength,splittee.length());
    }
    if (splittee.startsWith(splitChar)) {
      splittee=splittee.substring(splitLength);
    }
    if (splittee.endsWith(splitChar)) {
      splittee=splittee.substring(0,splittee.length() - splitLength);
    }
  }
  Vector returns=new Vector();
  final int length=splittee.length();
  int start=0;
  spot=0;
  while (start < length && (spot=splittee.indexOf(splitChar,start)) > -1) {
    if (spot > 0) {
      returns.addElement(splittee.substring(start,spot));
    }
 else {
      returns.addElement(EMPTY_ELEMENT);
    }
    start=spot + splitLength;
  }
  if (start < length) {
    returns.add(splittee.substring(start));
  }
 else   if (spot == length - splitLength) {
    returns.addElement(EMPTY_ELEMENT);
  }
  String[] values=new String[returns.size()];
  returns.copyInto(values);
  return values;
}
