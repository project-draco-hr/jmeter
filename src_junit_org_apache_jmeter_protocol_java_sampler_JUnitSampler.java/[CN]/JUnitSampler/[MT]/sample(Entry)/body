{
  SampleResult sresult=new SampleResult();
  sresult.setSampleLabel(getName());
  sresult.setSamplerData(className + "." + methodName);
  sresult.setDataType(SampleResult.TEXT);
  sresult.setSuccessful(true);
  sresult.setResponseMessage(getSuccess());
  sresult.setResponseCode(getSuccessCode());
  if (this.testCase != null) {
    TestResult tr=new TestResult();
    final TestCase theClazz=this.testCase;
    try {
      if (setUpMethod != null) {
        setUpMethod.invoke(this.testObject,new Object[0]);
      }
      sresult.sampleStart();
      tr.startTest(this.testCase);
      tr.runProtected(theClazz,protectable);
      tr.endTest(this.testCase);
      sresult.sampleEnd();
      if (tearDownMethod != null) {
        tearDownMethod.invoke(testObject,new Object[0]);
      }
    }
 catch (    InvocationTargetException e) {
      Throwable cause=e.getCause();
      if (cause instanceof AssertionFailedError) {
        tr.addFailure(theClazz,(AssertionFailedError)cause);
      }
 else       if (cause instanceof AssertionError) {
        AssertionFailedError afe=new AssertionFailedError(cause.toString());
        afe.setStackTrace(cause.getStackTrace());
        tr.addFailure(theClazz,afe);
      }
 else       if (cause != null) {
        tr.addError(theClazz,cause);
      }
 else {
        tr.addError(theClazz,e);
      }
    }
catch (    IllegalAccessException e) {
      tr.addError(theClazz,e);
    }
catch (    IllegalArgumentException e) {
      tr.addError(theClazz,e);
    }
    if (!tr.wasSuccessful()) {
      sresult.setSuccessful(false);
      StringBuilder buf=new StringBuilder();
      StringBuilder buftrace=new StringBuilder();
      Enumeration<TestFailure> en;
      if (getAppendError()) {
        en=tr.failures();
        if (en.hasMoreElements()) {
          sresult.setResponseCode(getFailureCode());
          buf.append(getFailure());
          buf.append("\n");
        }
        while (en.hasMoreElements()) {
          TestFailure item=en.nextElement();
          buf.append("Failure -- ");
          buf.append(item.toString());
          buf.append("\n");
          buftrace.append("Failure -- ");
          buftrace.append(item.toString());
          buftrace.append("\n");
          buftrace.append("Trace -- ");
          buftrace.append(item.trace());
        }
        en=tr.errors();
        if (en.hasMoreElements()) {
          sresult.setResponseCode(getErrorCode());
          buf.append(getError());
          buf.append("\n");
        }
        while (en.hasMoreElements()) {
          TestFailure item=en.nextElement();
          buf.append("Error -- ");
          buf.append(item.toString());
          buf.append("\n");
          buftrace.append("Error -- ");
          buftrace.append(item.toString());
          buftrace.append("\n");
          buftrace.append("Trace -- ");
          buftrace.append(item.trace());
        }
      }
      sresult.setResponseMessage(buf.toString());
      sresult.setResponseData(buftrace.toString(),null);
    }
  }
 else {
    sresult.setSuccessful(false);
    sresult.setResponseMessage("failed to create an instance of the class");
    sresult.setResponseCode(getErrorCode());
  }
  return sresult;
}
