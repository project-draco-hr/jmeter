{
  SampleResult sresult=new SampleResult();
  sresult.setSampleLabel(JUnitSampler.class.getName());
  sresult.setSamplerData(getClassname() + "." + getMethod());
  if (this.TEST_INSTANCE == null) {
    this.TEST_INSTANCE=(TestCase)getClassInstance(this.getClassname());
  }
  if (this.TEST_INSTANCE != null) {
    initMethodObjects(this.TEST_INSTANCE);
    TestResult tr=new TestResult();
    try {
      if (!getDoNotSetUpTearDown() && SETUP_METHOD != null) {
        SETUP_METHOD.invoke(TEST_INSTANCE,new Class[0]);
      }
      Method m=getMethod(TEST_INSTANCE,getMethod());
      sresult.sampleStart();
      m.invoke(TEST_INSTANCE,null);
      sresult.sampleEnd();
      if (!getDoNotSetUpTearDown() && TDOWN_METHOD != null) {
        TDOWN_METHOD.invoke(TEST_INSTANCE,new Class[0]);
      }
    }
 catch (    InvocationTargetException e) {
      log.warn(e.getMessage());
      sresult.setResponseCode(getErrorCode());
      sresult.setResponseMessage(getError());
    }
catch (    IllegalAccessException e) {
      log.warn(e.getMessage());
      sresult.setResponseCode(getErrorCode());
      sresult.setResponseMessage(getError());
    }
catch (    Exception e) {
      sresult.setResponseCode(getErrorCode());
      sresult.setResponseMessage(getError());
    }
    if (!tr.wasSuccessful()) {
      sresult.setSuccessful(false);
      StringBuffer buf=new StringBuffer();
      buf.append(getFailure());
      Enumeration en=tr.errors();
      while (en.hasMoreElements()) {
        buf.append((String)en.nextElement());
      }
      sresult.setResponseMessage(buf.toString());
      sresult.setResponseCode(getFailureCode());
    }
 else {
      sresult.setSuccessful(true);
      sresult.setResponseMessage(getSuccess());
      sresult.setResponseCode(getSuccessCode());
    }
  }
 else {
    sresult.setSuccessful(false);
    sresult.setResponseMessage("failed to create an instance of the class");
  }
  return sresult;
}
