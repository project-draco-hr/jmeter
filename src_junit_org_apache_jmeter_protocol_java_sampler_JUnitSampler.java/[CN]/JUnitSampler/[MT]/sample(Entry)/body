{
  SampleResult sresult=new SampleResult();
  String rlabel=null;
  if (getConstructorString().length() > 0) {
    rlabel=getConstructorString();
  }
 else {
    rlabel=JUnitSampler.class.getName();
  }
  sresult.setSampleLabel(rlabel);
  sresult.setSamplerData(getClassname() + "." + getMethod());
  if (this.TEST_INSTANCE == null) {
    this.TEST_INSTANCE=(TestCase)getClassInstance(getClassname(),rlabel);
  }
  if (this.TEST_INSTANCE != null) {
    initMethodObjects(this.TEST_INSTANCE);
    TestResult tr=new TestResult();
    this.TEST_INSTANCE.setName(getMethod());
    try {
      if (!getDoNotSetUpTearDown() && SETUP_METHOD != null) {
        SETUP_METHOD.invoke(this.TEST_INSTANCE,new Class[0]);
      }
      final Method m=getMethod(this.TEST_INSTANCE,getMethod());
      final TestCase theClazz=this.TEST_INSTANCE;
      tr.startTest(this.TEST_INSTANCE);
      sresult.sampleStart();
      Protectable p=new Protectable(){
        public void protect() throws Throwable {
          m.invoke(theClazz,new Class[0]);
        }
      }
;
      tr.runProtected(theClazz,p);
      tr.endTest(this.TEST_INSTANCE);
      sresult.sampleEnd();
      if (!getDoNotSetUpTearDown() && TDOWN_METHOD != null) {
        TDOWN_METHOD.invoke(TEST_INSTANCE,new Class[0]);
      }
    }
 catch (    InvocationTargetException e) {
      sresult.setResponseCode(getErrorCode());
      sresult.setResponseMessage(getError());
      sresult.setResponseData(e.getMessage().getBytes());
      sresult.setSuccessful(false);
    }
catch (    IllegalAccessException e) {
      sresult.setResponseCode(getErrorCode());
      sresult.setResponseMessage(getError());
      sresult.setResponseData(e.getMessage().getBytes());
      sresult.setSuccessful(false);
    }
catch (    ComparisonFailure e) {
      sresult.setResponseCode(getErrorCode());
      sresult.setResponseMessage(getError());
      sresult.setResponseData(e.getMessage().getBytes());
      sresult.setSuccessful(false);
    }
catch (    IllegalArgumentException e) {
      sresult.setResponseCode(getErrorCode());
      sresult.setResponseMessage(getError());
      sresult.setResponseData(e.getMessage().getBytes());
      sresult.setSuccessful(false);
    }
catch (    Exception e) {
      sresult.setResponseCode(getErrorCode());
      sresult.setResponseMessage(getError());
      sresult.setResponseData(e.getMessage().getBytes());
      sresult.setSuccessful(false);
    }
catch (    Throwable e) {
      sresult.setResponseCode(getErrorCode());
      sresult.setResponseMessage(getError());
      sresult.setResponseData(e.getMessage().getBytes());
      sresult.setSuccessful(false);
    }
    if (!tr.wasSuccessful()) {
      sresult.setSuccessful(false);
      StringBuffer buf=new StringBuffer();
      buf.append(getFailure() + System.getProperty("line.separator"));
      Enumeration en=tr.errors();
      while (en.hasMoreElements()) {
        Object item=en.nextElement();
        if (item instanceof TestFailure) {
          buf.append("Trace -- ");
          buf.append(((TestFailure)item).trace());
          buf.append("Failure -- ");
          buf.append(((TestFailure)item).toString());
        }
 else         if (item instanceof Throwable) {
          buf.append(((Throwable)item).getMessage());
        }
      }
      sresult.setResponseMessage(buf.toString());
      sresult.setRequestHeaders(buf.toString());
      sresult.setResponseCode(getFailureCode());
    }
 else {
      sresult.setSuccessful(true);
      sresult.setResponseMessage(getSuccess());
      sresult.setResponseCode(getSuccessCode());
      sresult.setResponseData("Not Applicable".getBytes());
    }
  }
 else {
    sresult.setSuccessful(false);
    sresult.setResponseMessage("failed to create an instance of the class");
  }
  sresult.setBytes(0);
  sresult.setContentType("text");
  sresult.setDataType("Not Applicable");
  sresult.setRequestHeaders("Not Applicable");
  return sresult;
}
