{
  if (qName.equals(Constants.STATUS)) {
    status=factory.createStatus();
    stacktree.push(status);
  }
 else   if (qName.equals(Constants.JVM)) {
    jvm=factory.createJvm();
    if (stacktree.peek() instanceof Status) {
      status.setJvm(jvm);
      stacktree.push(jvm);
    }
  }
 else   if (qName.equals(Constants.MEMORY)) {
    memory=factory.createMemory();
    if (stacktree.peek() instanceof Jvm) {
      stacktree.push(memory);
      if (attributes != null) {
        for (int idx=0; idx < attributes.getLength(); idx++) {
          String attr=attributes.getQName(idx);
          if (attr.equals(Constants.MEMORY_FREE)) {
            memory.setFree(parseLong(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.MEMORY_TOTAL)) {
            memory.setTotal(parseLong(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.MEMORY_MAX)) {
            memory.setMax(parseLong(attributes.getValue(idx)));
          }
        }
      }
      jvm.setMemory(memory);
    }
  }
 else   if (qName.equals(Constants.CONNECTOR)) {
    connector=factory.createConnector();
    if (stacktree.peek() instanceof Status || stacktree.peek() instanceof Connector) {
      status.addConnector(connector);
      stacktree.push(connector);
      if (attributes != null) {
        for (int idx=0; idx < attributes.getLength(); idx++) {
          String attr=attributes.getQName(idx);
          if (attr.equals(Constants.ATTRIBUTE_NAME)) {
            connector.setName(attributes.getValue(idx));
          }
        }
      }
    }
  }
 else   if (qName.equals(Constants.THREADINFO)) {
    threadinfo=factory.createThreadInfo();
    if (stacktree.peek() instanceof Connector) {
      stacktree.push(threadinfo);
      connector.setThreadInfo(threadinfo);
      if (attributes != null) {
        for (int idx=0; idx < attributes.getLength(); idx++) {
          String attr=attributes.getQName(idx);
          if (attr.equals(Constants.MAXTHREADS)) {
            threadinfo.setMaxThreads(parseInt(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.MINSPARETHREADS)) {
            threadinfo.setMinSpareThreads(parseInt(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.MAXSPARETHREADS)) {
            threadinfo.setMaxSpareThreads(parseInt(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.CURRENTTHREADCOUNT)) {
            threadinfo.setCurrentThreadCount(parseInt(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.CURRENTBUSYTHREADS)) {
            threadinfo.setCurrentThreadsBusy(parseInt(attributes.getValue(idx)));
          }
        }
      }
    }
  }
 else   if (qName.equals(Constants.REQUESTINFO)) {
    requestinfo=factory.createRequestInfo();
    if (stacktree.peek() instanceof Connector) {
      stacktree.push(requestinfo);
      connector.setRequestInfo(requestinfo);
      if (attributes != null) {
        for (int idx=0; idx < attributes.getLength(); idx++) {
          String attr=attributes.getQName(idx);
          if (attr.equals(Constants.MAXTIME)) {
            requestinfo.setMaxTime(parseInt(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.PROCESSINGTIME)) {
            requestinfo.setProcessingTime(parseInt(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.REQUESTCOUNT)) {
            requestinfo.setRequestCount(parseInt(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.ERRORCOUNT)) {
            requestinfo.setErrorCount(parseInt(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.BYTESRECEIVED)) {
            requestinfo.setBytesReceived(parseLong(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.BYTESSENT)) {
            requestinfo.setBytesSent(parseLong(attributes.getValue(idx)));
          }
        }
      }
    }
  }
 else   if (qName.equals(Constants.WORKERS)) {
    workers=factory.createWorkers();
    if (stacktree.peek() instanceof Connector) {
      connector.setWorkers(workers);
      stacktree.push(workers);
    }
  }
 else   if (qName.equals(Constants.WORKER)) {
    worker=factory.createWorker();
    if (stacktree.peek() instanceof Workers || stacktree.peek() instanceof Worker) {
      stacktree.push(worker);
      ((WorkersImpl)workers).addWorker(worker);
      if (attributes != null) {
        for (int idx=0; idx < attributes.getLength(); idx++) {
          String attr=attributes.getQName(idx);
          if (attr.equals(Constants.STAGE)) {
            worker.setStage(attributes.getValue(idx));
          }
 else           if (attr.equals(Constants.REQUESTPROCESSINGTIME)) {
            worker.setRequestProcessingTime(parseInt(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.REQUESTBYTESSENT)) {
            worker.setRequestBytesSent(parseLong(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.REQUESTBYTESRECEIVED)) {
            worker.setRequestBytesReceived(parseLong(attributes.getValue(idx)));
          }
 else           if (attr.equals(Constants.REMOTEADDR)) {
            worker.setRemoteAddr(attributes.getValue(idx));
          }
 else           if (attr.equals(Constants.VIRTUALHOST)) {
            worker.setVirtualHost(attributes.getValue(idx));
          }
 else           if (attr.equals(Constants.METHOD)) {
            worker.setMethod(attributes.getValue(idx));
          }
 else           if (attr.equals(Constants.CURRENTURI)) {
            worker.setCurrentUri(attributes.getValue(idx));
          }
 else           if (attr.equals(Constants.CURRENTQUERYSTRING)) {
            worker.setCurrentQueryString(attributes.getValue(idx));
          }
 else           if (attr.equals(Constants.PROTOCOL)) {
            worker.setProtocol(attributes.getValue(idx));
          }
        }
      }
    }
  }
}
