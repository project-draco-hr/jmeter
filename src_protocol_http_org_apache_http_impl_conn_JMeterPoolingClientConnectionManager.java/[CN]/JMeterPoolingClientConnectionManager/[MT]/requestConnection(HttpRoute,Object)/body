{
  Args.notNull(route,"HTTP route");
  if (this.log.isDebugEnabled()) {
    this.log.debug("Connection request: " + format(route,state) + formatStats(route));
  }
  final Future<HttpPoolEntry> future=this.pool.lease(route,state);
  return new ClientConnectionRequest(){
    @Override public void abortRequest(){
      future.cancel(true);
    }
    @Override public ManagedClientConnection getConnection(    final long timeout,    final TimeUnit tunit) throws InterruptedException, ConnectionPoolTimeoutException {
      return leaseConnection(future,timeout,tunit);
    }
  }
;
}
