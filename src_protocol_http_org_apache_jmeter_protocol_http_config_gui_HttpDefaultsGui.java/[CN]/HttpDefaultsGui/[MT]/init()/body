{
  setLayout(new BorderLayout(0,5));
  setBorder(makeBorder());
  add(makeTitlePanel(),BorderLayout.NORTH);
  urlConfig=new UrlConfigGui(false,true,false);
  add(urlConfig,BorderLayout.CENTER);
  final JPanel optionalTasksPanel=new VerticalPanel();
  optionalTasksPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),JMeterUtils.getResString("optional_tasks")));
  final JPanel checkBoxPanel=new HorizontalPanel();
  imageParser=new JCheckBox(JMeterUtils.getResString("web_testing_retrieve_images"));
  checkBoxPanel.add(imageParser);
  imageParser.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    final ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        enableConcurrentDwn(true);
      }
 else {
        enableConcurrentDwn(false);
      }
    }
  }
);
  concurrentDwn=new JCheckBox(JMeterUtils.getResString("web_testing_concurrent_download"));
  concurrentDwn.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    final ItemEvent e){
      if (imageParser.isSelected() && e.getStateChange() == ItemEvent.SELECTED) {
        concurrentPool.setEnabled(true);
      }
 else {
        concurrentPool.setEnabled(false);
      }
    }
  }
);
  concurrentPool=new JTextField(2);
  concurrentPool.setMinimumSize(new Dimension(10,20));
  concurrentPool.setMaximumSize(new Dimension(30,20));
  checkBoxPanel.add(concurrentDwn);
  checkBoxPanel.add(concurrentPool);
  optionalTasksPanel.add(checkBoxPanel);
  embeddedRE=new JLabeledTextField(JMeterUtils.getResString("web_testing_embedded_url_pattern"),30);
  optionalTasksPanel.add(embeddedRE);
  add(optionalTasksPanel,BorderLayout.SOUTH);
}
