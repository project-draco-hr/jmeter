{
  ConfigTestElement cfg=(ConfigTestElement)config;
  ConfigTestElement el=(ConfigTestElement)urlConfigGui.createTestElement();
  cfg.clear();
  cfg.addConfigElement(el);
  super.configureTestElement(config);
  if (retrieveEmbeddedResources.isSelected()) {
    config.setProperty(new BooleanProperty(HTTPSamplerBase.IMAGE_PARSER,true));
  }
 else {
    config.removeProperty(HTTPSamplerBase.IMAGE_PARSER);
  }
  enableConcurrentDwn(retrieveEmbeddedResources.isSelected());
  if (concurrentDwn.isSelected()) {
    config.setProperty(new BooleanProperty(HTTPSamplerBase.CONCURRENT_DWN,true));
  }
 else {
    config.removeProperty(HTTPSamplerBase.CONCURRENT_DWN);
  }
  if (!StringUtils.isEmpty(concurrentPool.getText())) {
    config.setProperty(new StringProperty(HTTPSamplerBase.CONCURRENT_POOL,concurrentPool.getText()));
  }
 else {
    config.setProperty(new StringProperty(HTTPSamplerBase.CONCURRENT_POOL,String.valueOf(HTTPSamplerBase.CONCURRENT_POOL_SIZE)));
  }
  if (useMD5.isSelected()) {
    config.setProperty(new BooleanProperty(HTTPSamplerBase.MD5,true));
  }
 else {
    config.removeProperty(HTTPSamplerBase.MD5);
  }
  if (!StringUtils.isEmpty(embeddedRE.getText())) {
    config.setProperty(new StringProperty(HTTPSamplerBase.EMBEDDED_URL_RE,embeddedRE.getText()));
  }
 else {
    config.removeProperty(HTTPSamplerBase.EMBEDDED_URL_RE);
  }
  if (!StringUtils.isEmpty(sourceIpAddr.getText())) {
    config.setProperty(new StringProperty(HTTPSamplerBase.IP_SOURCE,sourceIpAddr.getText()));
    config.setProperty(new IntegerProperty(HTTPSamplerBase.IP_SOURCE_TYPE,sourceIpType.getSelectedIndex()));
  }
 else {
    config.removeProperty(HTTPSamplerBase.IP_SOURCE);
    config.removeProperty(HTTPSamplerBase.IP_SOURCE_TYPE);
  }
}
