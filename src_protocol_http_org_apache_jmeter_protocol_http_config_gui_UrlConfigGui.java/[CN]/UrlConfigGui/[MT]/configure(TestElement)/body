{
  setName(el.getName());
  argsPanel.configure((TestElement)el.getProperty(HTTPSamplerBase.ARGUMENTS).getObjectValue());
  domain.setText(el.getPropertyAsString(HTTPSamplerBase.DOMAIN));
  String portString=el.getPropertyAsString(HTTPSamplerBase.PORT);
  if (portString.equals(HTTPSamplerBase.UNSPECIFIED_PORT_AS_STRING)) {
    port.setText("");
  }
 else {
    port.setText(portString);
  }
  proxyHost.setText(el.getPropertyAsString(HTTPSamplerBase.PROXYHOST));
  proxyPort.setText(el.getPropertyAsString(HTTPSamplerBase.PROXYPORT));
  proxyUser.setText(el.getPropertyAsString(HTTPSamplerBase.PROXYUSER));
  proxyPass.setText(el.getPropertyAsString(HTTPSamplerBase.PROXYPASS));
  connectTimeOut.setText(el.getPropertyAsString(HTTPSamplerBase.CONNECT_TIMEOUT));
  responseTimeOut.setText(el.getPropertyAsString(HTTPSamplerBase.RESPONSE_TIMEOUT));
  protocol.setText(el.getPropertyAsString(HTTPSamplerBase.PROTOCOL));
  contentEncoding.setText(el.getPropertyAsString(HTTPSamplerBase.CONTENT_ENCODING));
  path.setText(el.getPropertyAsString(HTTPSamplerBase.PATH));
  if (notConfigOnly) {
    method.setText(el.getPropertyAsString(HTTPSamplerBase.METHOD));
    followRedirects.setSelected(((AbstractTestElement)el).getPropertyAsBoolean(HTTPSamplerBase.FOLLOW_REDIRECTS));
    autoRedirects.setSelected(((AbstractTestElement)el).getPropertyAsBoolean(HTTPSamplerBase.AUTO_REDIRECTS));
    useKeepAlive.setSelected(((AbstractTestElement)el).getPropertyAsBoolean(HTTPSamplerBase.USE_KEEPALIVE));
    useMultipartForPost.setSelected(((AbstractTestElement)el).getPropertyAsBoolean(HTTPSamplerBase.DO_MULTIPART_POST));
  }
  if (showImplementation) {
    httpImplementation.setText(el.getPropertyAsString(HTTPSamplerBase.IMPLEMENTATION));
  }
}
