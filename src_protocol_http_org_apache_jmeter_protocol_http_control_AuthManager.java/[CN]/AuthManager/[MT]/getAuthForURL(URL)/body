{
  if (!isSupportedProtocol(url)) {
    return null;
  }
  URL url2=null;
  try {
    if (url.getPort() == -1) {
      int port=url.getProtocol().equalsIgnoreCase("http") ? HTTPConstants.DEFAULT_HTTP_PORT : HTTPConstants.DEFAULT_HTTPS_PORT;
      url2=new URL(url.getProtocol(),url.getHost(),port,url.getPath());
    }
 else     if ((url.getPort() == HTTPConstants.DEFAULT_HTTP_PORT && url.getProtocol().equalsIgnoreCase("http")) || (url.getPort() == HTTPConstants.DEFAULT_HTTPS_PORT && url.getProtocol().equalsIgnoreCase("https"))) {
      url2=new URL(url.getProtocol(),url.getHost(),url.getPath());
    }
  }
 catch (  MalformedURLException e) {
    log.error("Internal error!",e);
  }
  String s1=url.toString();
  String s2=null;
  if (url2 != null) {
    s2=url2.toString();
  }
  log.debug("Target URL strings to match against: " + s1 + " and "+ s2);
  for (PropertyIterator iter=getAuthObjects().iterator(); iter.hasNext(); ) {
    Authorization auth=(Authorization)iter.next().getObjectValue();
    String uRL=auth.getURL();
    log.debug("Checking match against auth'n entry: " + uRL);
    if (s1.startsWith(uRL) || s2 != null && s2.startsWith(uRL)) {
      log.debug("Matched");
      return auth;
    }
    log.debug("Did not match");
  }
  return null;
}
