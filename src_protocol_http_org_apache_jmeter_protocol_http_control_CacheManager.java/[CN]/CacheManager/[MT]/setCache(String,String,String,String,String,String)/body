{
  if (log.isDebugEnabled()) {
    log.debug("setCache(" + lastModified + ","+ cacheControl+ ","+ expires+ ","+ etag+ ","+ url+ ","+ date+ ")");
  }
  Date expiresDate=null;
  if (useExpires) {
    final String MAX_AGE="max-age=";
    if (cacheControl != null && cacheControl.contains("no-store")) {
      return;
    }
    if (expires != null) {
      try {
        expiresDate=DateUtils.parseDate(expires);
      }
 catch (      org.apache.http.impl.cookie.DateParseException e) {
        if (log.isDebugEnabled()) {
          log.debug("Unable to parse Expires: '" + expires + "' "+ e);
        }
        expiresDate=CacheManager.EXPIRED_DATE;
      }
    }
    if (cacheControl != null && !cacheControl.contains("no-cache")) {
      if (cacheControl.contains(MAX_AGE)) {
        long maxAgeInSecs=Long.parseLong(cacheControl.substring(cacheControl.indexOf(MAX_AGE) + MAX_AGE.length()).split("[, ]")[0]);
        expiresDate=new Date(System.currentTimeMillis() + maxAgeInSecs * 1000);
      }
 else       if (expires == null) {
        if (!StringUtils.isEmpty(lastModified) && !StringUtils.isEmpty(date)) {
          try {
            Date responseDate=DateUtils.parseDate(date);
            Date lastModifiedAsDate=DateUtils.parseDate(lastModified);
            expiresDate=new Date(System.currentTimeMillis() + Math.round((responseDate.getTime() - lastModifiedAsDate.getTime()) * 0.1));
          }
 catch (          DateParseException e) {
            if (log.isWarnEnabled()) {
              log.warn("Failed computing expiration date with following info:" + lastModified + ","+ cacheControl+ ","+ expires+ ","+ etag+ ","+ url+ ","+ date);
            }
            expiresDate=new Date(System.currentTimeMillis() + ONE_YEAR_MS);
          }
        }
 else {
          expiresDate=new Date(System.currentTimeMillis() + ONE_YEAR_MS);
        }
      }
    }
  }
  getCache().put(url,new CacheEntry(lastModified,expiresDate,etag));
}
