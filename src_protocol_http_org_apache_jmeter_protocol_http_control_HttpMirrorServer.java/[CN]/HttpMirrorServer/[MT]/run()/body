{
  except=null;
  running=true;
  ServerSocket mainSocket=null;
  final ArrayBlockingQueue<Runnable> queue=new ArrayBlockingQueue<Runnable>(25);
  ThreadPoolExecutor threadPoolExecutor=new ThreadPoolExecutor(maxThreadPoolSize / 2,maxThreadPoolSize,KEEP_ALIVE_TIME,TimeUnit.SECONDS,queue);
  threadPoolExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardOldestPolicy());
  try {
    log.info("Creating HttpMirror ... on port " + daemonPort);
    mainSocket=new ServerSocket(daemonPort);
    mainSocket.setSoTimeout(ACCEPT_TIMEOUT);
    log.info("HttpMirror up and running!");
    while (running) {
      try {
        Socket clientSocket=mainSocket.accept();
        if (running) {
          threadPoolExecutor.execute(new HttpMirrorThread(clientSocket));
          log.debug("Starting new Mirror thread");
        }
 else {
          log.warn("Server not running");
          JOrphanUtils.closeQuietly(clientSocket);
        }
      }
 catch (      InterruptedIOException e) {
      }
    }
    log.info("HttpMirror Server stopped");
  }
 catch (  Exception e) {
    except=e;
    log.warn("HttpMirror Server stopped",e);
  }
 finally {
    threadPoolExecutor.shutdownNow();
    JOrphanUtils.closeQuietly(mainSocket);
  }
}
