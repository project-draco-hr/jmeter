{
  except=null;
  running=true;
  ServerSocket mainSocket=null;
  ThreadPoolExecutor threadPoolExecutor=null;
  if (maxThreadPoolSize > 0) {
    final ArrayBlockingQueue<Runnable> queue=new ArrayBlockingQueue<>(maxQueueSize);
    threadPoolExecutor=new ThreadPoolExecutor(maxThreadPoolSize / 2,maxThreadPoolSize,KEEP_ALIVE_TIME,TimeUnit.SECONDS,queue);
    threadPoolExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardPolicy());
  }
  try {
    log.info("Creating HttpMirror ... on port " + daemonPort);
    mainSocket=new ServerSocket(daemonPort);
    mainSocket.setSoTimeout(ACCEPT_TIMEOUT);
    log.info("HttpMirror up and running!");
    while (running) {
      try {
        Socket clientSocket=mainSocket.accept();
        if (running) {
          if (threadPoolExecutor != null) {
            threadPoolExecutor.execute(new HttpMirrorThread(clientSocket));
          }
 else {
            Thread thd=new Thread(new HttpMirrorThread(clientSocket));
            log.debug("Starting new Mirror thread");
            thd.start();
          }
        }
 else {
          log.warn("Server not running");
          JOrphanUtils.closeQuietly(clientSocket);
        }
      }
 catch (      InterruptedIOException e) {
      }
    }
    log.info("HttpMirror Server stopped");
  }
 catch (  Exception e) {
    except=e;
    log.warn("HttpMirror Server stopped",e);
  }
 finally {
    if (threadPoolExecutor != null) {
      threadPoolExecutor.shutdownNow();
    }
    JOrphanUtils.closeQuietly(mainSocket);
  }
}
