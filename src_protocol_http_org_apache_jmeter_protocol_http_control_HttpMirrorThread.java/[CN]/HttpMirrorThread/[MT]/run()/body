{
  log.debug("Starting thread");
  BufferedInputStream in=null;
  BufferedOutputStream out=null;
  try {
    in=new BufferedInputStream(clientSocket.getInputStream());
    int contentLength=-1;
    boolean isChunked=false;
    byte[] buffer=new byte[1024];
    StringBuilder headers=new StringBuilder();
    int length=0;
    int positionOfBody=0;
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    while (positionOfBody <= 0 && ((length=in.read(buffer)) != -1)) {
      log.debug("Write body");
      baos.write(buffer,0,length);
      headers.append(new String(buffer,0,length,ISO_8859_1));
      positionOfBody=getPositionOfBody(headers.toString());
    }
    baos.close();
    final String headerString=headers.toString();
    String responseStatusValue=getRequestHeaderValue(headerString,"X-ResponseStatus");
    if (responseStatusValue == null) {
      responseStatusValue="200 OK";
    }
    log.debug("Write headers");
    out=new BufferedOutputStream(clientSocket.getOutputStream());
    out.write(("HTTP/1.0 " + responseStatusValue).getBytes(ISO_8859_1));
    out.write(CRLF);
    out.write("Content-Type: text/plain".getBytes(ISO_8859_1));
    out.write(CRLF);
    String headersValue=getRequestHeaderValue(headerString,"X-SetHeaders");
    if (headersValue != null) {
      String[] headersToSet=headersValue.split("\\|");
      for (      String string : headersToSet) {
        out.write(string.getBytes(ISO_8859_1));
        out.write(CRLF);
      }
    }
    String responseLengthValue=getRequestHeaderValue(headerString,"X-ResponseLength");
    int responseLength=-1;
    if (responseLengthValue != null) {
      responseLength=Integer.parseInt(responseLengthValue);
    }
    String cookieHeaderValue=getRequestHeaderValue(headerString,"X-SetCookie");
    if (cookieHeaderValue != null) {
      out.write("Set-Cookie: ".getBytes(ISO_8859_1));
      out.write(cookieHeaderValue.getBytes(ISO_8859_1));
      out.write(CRLF);
    }
    out.write(CRLF);
    out.flush();
    if (responseLength >= 0) {
      out.write(baos.toByteArray(),0,Math.min(baos.toByteArray().length,responseLength));
    }
 else {
      out.write(baos.toByteArray());
    }
    String contentLengthHeaderValue=getRequestHeaderValue(headerString,HTTPConstants.HEADER_CONTENT_LENGTH);
    if (contentLengthHeaderValue != null) {
      contentLength=Integer.parseInt(contentLengthHeaderValue);
    }
    String sleepHeaderValue=getRequestHeaderValue(headerString,"X-Sleep");
    if (sleepHeaderValue != null) {
      TimeUnit.MILLISECONDS.sleep(Integer.parseInt(sleepHeaderValue));
    }
    String transferEncodingHeaderValue=getRequestHeaderValue(headerString,HTTPConstants.TRANSFER_ENCODING);
    if (transferEncodingHeaderValue != null) {
      isChunked=transferEncodingHeaderValue.equalsIgnoreCase("chunked");
      if (!isChunked) {
        log.error("Transfer-Encoding header set, the value is not supported : " + transferEncodingHeaderValue);
      }
    }
    length=0;
    if (contentLength > 0) {
      int totalReadBytes=headerString.length() - positionOfBody - 2;
      log.debug("Reading, " + totalReadBytes + " < "+ contentLength);
      while ((totalReadBytes < contentLength) && ((length=in.read(buffer)) != -1)) {
        log.debug("Read bytes: " + length);
        out.write(buffer,0,length);
        totalReadBytes+=length;
        log.debug("totalReadBytes: " + totalReadBytes);
      }
    }
 else     if (isChunked) {
      log.debug("Chunked");
      while (in.available() > 0 && ((length=in.read(buffer)) != -1)) {
        out.write(buffer,0,length);
      }
    }
 else {
      log.debug("Other");
      while (in.available() > 0 && ((length=in.read(buffer)) != -1)) {
        log.debug("Read bytes: " + length);
        out.write(buffer,0,length);
      }
    }
    log.debug("Flush");
    out.flush();
  }
 catch (  IOException e) {
    log.error("",e);
  }
catch (  InterruptedException e) {
    log.error("",e);
  }
 finally {
    JOrphanUtils.closeQuietly(out);
    JOrphanUtils.closeQuietly(in);
    JOrphanUtils.closeQuietly(clientSocket);
  }
  log.debug("End of Thread");
}
