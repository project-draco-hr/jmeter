{
  log.info("Starting thread");
  BufferedInputStream in=null;
  BufferedOutputStream out=null;
  try {
    in=new BufferedInputStream(clientSocket.getInputStream());
    out=new BufferedOutputStream(clientSocket.getOutputStream());
    out.write("HTTP/1.0 200 OK".getBytes(ISO_8859_1));
    out.write(CRLF);
    out.write("Content-Type: text/plain".getBytes(ISO_8859_1));
    out.write(CRLF);
    out.write(CRLF);
    out.flush();
    int contentLength=-1;
    boolean isChunked=false;
    byte[] buffer=new byte[1024];
    StringBuffer headers=new StringBuffer();
    int length=0;
    int positionOfBody=0;
    while (positionOfBody <= 0 && ((length=in.read(buffer)) != -1)) {
      out.write(buffer,0,length);
      headers.append(new String(buffer,0,length,ISO_8859_1));
      positionOfBody=getPositionOfBody(headers.toString());
    }
    final String headerString=headers.toString();
    String contentLengthHeaderValue=getRequestHeaderValue(headerString,"Content-Length");
    if (contentLengthHeaderValue != null) {
      contentLength=new Integer(contentLengthHeaderValue).intValue();
    }
    String sleepHeaderValue=getRequestHeaderValue(headerString,"X-Sleep");
    if (sleepHeaderValue != null) {
      Thread.sleep(Integer.parseInt(sleepHeaderValue));
    }
    String transferEncodingHeaderValue=getRequestHeaderValue(headerString,"Transfer-Encoding");
    if (transferEncodingHeaderValue != null) {
      isChunked=transferEncodingHeaderValue.equalsIgnoreCase("chunked");
      if (!isChunked) {
        log.error("Transfer-Encoding header set, the value is not supported : " + transferEncodingHeaderValue);
      }
    }
    length=0;
    if (contentLength > 0) {
      int totalReadBytes=headerString.length() - positionOfBody - 2;
      while ((totalReadBytes < contentLength) && ((length=in.read(buffer)) != -1)) {
        out.write(buffer,0,length);
        totalReadBytes+=length;
      }
    }
 else     if (isChunked) {
      while (in.available() > 0 && ((length=in.read(buffer)) != -1)) {
        out.write(buffer,0,length);
      }
    }
 else {
      while (in.available() > 0 && ((length=in.read(buffer)) != -1)) {
        out.write(buffer,0,length);
      }
    }
    out.flush();
  }
 catch (  IOException e) {
    log.error("",e);
  }
catch (  InterruptedException e) {
    log.error("",e);
  }
 finally {
    JOrphanUtils.closeQuietly(out);
    JOrphanUtils.closeQuietly(in);
    JOrphanUtils.closeQuietly(clientSocket);
  }
  log.info("End of Thread");
}
