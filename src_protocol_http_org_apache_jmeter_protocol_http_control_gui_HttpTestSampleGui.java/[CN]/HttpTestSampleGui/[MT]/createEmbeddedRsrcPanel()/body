{
  final JPanel embeddedRsrcPanel=new VerticalPanel();
  embeddedRsrcPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),JMeterUtils.getResString("web_testing_retrieve_title")));
  final JPanel checkBoxPanel=new HorizontalPanel();
  getImages=new JCheckBox(JMeterUtils.getResString("web_testing_retrieve_images"));
  getImages.setFont(FONT_SMALL);
  getImages.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    final ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        enableConcurrentDwn(true);
      }
 else {
        enableConcurrentDwn(false);
      }
    }
  }
);
  concurrentDwn=new JCheckBox(JMeterUtils.getResString("web_testing_concurrent_download"));
  concurrentDwn.setFont(FONT_SMALL);
  concurrentDwn.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    final ItemEvent e){
      if (getImages.isSelected() && e.getStateChange() == ItemEvent.SELECTED) {
        concurrentPool.setEnabled(true);
      }
 else {
        concurrentPool.setEnabled(false);
      }
    }
  }
);
  concurrentPool=new JTextField(2);
  concurrentPool.setFont(FONT_SMALL);
  concurrentPool.setMaximumSize(new Dimension(30,20));
  checkBoxPanel.add(getImages);
  checkBoxPanel.add(concurrentDwn);
  checkBoxPanel.add(concurrentPool);
  embeddedRsrcPanel.add(checkBoxPanel);
  JLabel lblEmbRE=new JLabel(JMeterUtils.getResString("web_testing_embedded_url_pattern"));
  lblEmbRE.setFont(FONT_SMALL);
  checkBoxPanel.add(lblEmbRE);
  embeddedRE=new JTextField(10);
  checkBoxPanel.add(embeddedRE);
  embeddedRsrcPanel.add(checkBoxPanel);
  return embeddedRsrcPanel;
}
