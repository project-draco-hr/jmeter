{
  retrieveEmbeddedResources=new JCheckBox(JMeterUtils.getResString("web_testing_retrieve_images"));
  retrieveEmbeddedResources.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    final ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        enableConcurrentDwn(true);
      }
 else {
        enableConcurrentDwn(false);
      }
    }
  }
);
  concurrentDwn=new JCheckBox(JMeterUtils.getResString("web_testing_concurrent_download"));
  concurrentDwn.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    final ItemEvent e){
      if (retrieveEmbeddedResources.isSelected() && e.getStateChange() == ItemEvent.SELECTED) {
        concurrentPool.setEnabled(true);
      }
 else {
        concurrentPool.setEnabled(false);
      }
    }
  }
);
  concurrentPool=new JTextField(2);
  concurrentPool.setMinimumSize(new Dimension(10,(int)concurrentPool.getPreferredSize().getHeight()));
  concurrentPool.setMaximumSize(new Dimension(30,(int)concurrentPool.getPreferredSize().getHeight()));
  final JPanel embeddedRsrcPanel=new HorizontalPanel();
  embeddedRsrcPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),JMeterUtils.getResString("web_testing_retrieve_title")));
  embeddedRsrcPanel.add(retrieveEmbeddedResources);
  embeddedRsrcPanel.add(concurrentDwn);
  embeddedRsrcPanel.add(concurrentPool);
  embeddedRE=new JLabeledTextField(JMeterUtils.getResString("web_testing_embedded_url_pattern"),20);
  embeddedRsrcPanel.add(embeddedRE);
  return embeddedRsrcPanel;
}
