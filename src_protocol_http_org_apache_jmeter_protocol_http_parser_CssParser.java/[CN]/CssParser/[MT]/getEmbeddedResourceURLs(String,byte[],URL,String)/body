{
  try {
    String cssContent=new String(data,encoding);
    final CascadingStyleSheet aCSS=CSSReader.readFromStringStream(cssContent,new CSSReaderSettings().setBrowserCompliantMode(true).setFallbackCharset(Charset.forName(encoding)).setCSSVersion(ECSSVersion.CSS30).setCustomErrorHandler(new LoggingCSSParseErrorHandler()).setCustomExceptionHandler(new CustomLoggingCSSParseExceptionCallback(baseUrl)));
    final List<URLString> list=new ArrayList<>();
    final URLCollection urlCollection=new URLCollection(list);
    if (aCSS != null) {
      CSSVisitor.visitCSSUrl(aCSS,new DefaultCSSUrlVisitor(){
        @Override public void onImport(        final CSSImportRule importRule){
          urlCollection.addURL(importRule.getLocationString(),baseUrl);
        }
        @Override public void onUrlDeclaration(        final ICSSTopLevelRule aTopLevelRule,        final CSSDeclaration aDeclaration,        final CSSExpressionMemberTermURI aURITerm){
          urlCollection.addURL(aURITerm.getURIString(),baseUrl);
        }
      }
);
    }
 else {
      LOG.warn("Failed parsing url:" + baseUrl + ", got null CascadingStyleSheet");
    }
    if (LOG.isDebugEnabled()) {
      StringBuilder builder=new StringBuilder();
      for (Iterator<URL> iterator=urlCollection.iterator(); iterator.hasNext(); ) {
        URL urlString=iterator.next();
        builder.append(urlString).append(",");
      }
      LOG.debug("Parsed:" + baseUrl + ", got:"+ builder.toString());
    }
    return urlCollection.iterator();
  }
 catch (  Exception e) {
    throw new LinkExtractorParseException(e);
  }
}
