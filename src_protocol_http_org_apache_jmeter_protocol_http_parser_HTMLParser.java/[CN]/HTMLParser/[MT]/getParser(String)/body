{
  HTMLParser pars=(HTMLParser)parsers.get(htmlParserClassName);
  if (pars != null) {
    log.info("Fetched " + htmlParserClassName);
    return pars;
  }
  Method meth=(Method)methods.get(htmlParserClassName);
  if (meth != null) {
    try {
      pars=(HTMLParser)meth.invoke(null,null);
    }
 catch (    NullPointerException e) {
      throw new Error(PARSER_METHOD + "() returned null",e);
    }
catch (    IllegalArgumentException e) {
      throw new Error("Should not happen",e);
    }
catch (    IllegalAccessException e) {
      throw new Error("Should not happen",e);
    }
catch (    InvocationTargetException e) {
      throw new Error("Should not happen",e);
    }
    ;
    log.info("Refetched " + htmlParserClassName);
    return pars;
  }
  try {
    Class clazz=Class.forName(htmlParserClassName);
    meth=clazz.getMethod(PARSER_METHOD,null);
    methods.put(htmlParserClassName,meth);
    pars=(HTMLParser)meth.invoke(null,null);
    boolean reusable=false;
    try {
      reusable=((Boolean)clazz.getMethod(PARSER_REUSABLE,null).invoke(null,null)).booleanValue();
      if (reusable) {
        parsers.put(htmlParserClassName,pars);
      }
    }
 catch (    Exception e) {
      reusable=false;
    }
    log.info("Created " + htmlParserClassName + (reusable ? " - reusable" : ""));
  }
 catch (  NullPointerException e) {
    throw new Error(PARSER_METHOD + "() returned null",e);
  }
catch (  IllegalAccessException e) {
    throw new Error(e);
  }
catch (  ClassNotFoundException e) {
    throw new Error(e);
  }
catch (  SecurityException e) {
    throw new Error(e);
  }
catch (  NoSuchMethodException e) {
    throw new Error(e);
  }
catch (  IllegalArgumentException e) {
    throw new Error(e);
  }
catch (  InvocationTargetException e) {
    throw new Error(e);
  }
  return pars;
}
