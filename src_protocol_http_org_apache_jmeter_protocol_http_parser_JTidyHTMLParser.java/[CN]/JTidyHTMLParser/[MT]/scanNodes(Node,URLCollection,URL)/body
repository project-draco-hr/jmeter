{
  if (node == null) {
    return baseUrl;
  }
  String name=node.getNodeName();
  int type=node.getNodeType();
switch (type) {
case Node.DOCUMENT_NODE:
    scanNodes(((Document)node).getDocumentElement(),urls,baseUrl);
  break;
case Node.ELEMENT_NODE:
NamedNodeMap attrs=node.getAttributes();
if (name.equalsIgnoreCase("base")) {
String tmp=getValue(attrs,"href");
if (tmp != null) try {
  baseUrl=new URL(baseUrl,tmp);
}
 catch (MalformedURLException e) {
  throw new HTMLParseException(e);
}
break;
}
if (name.equalsIgnoreCase("img")) {
urls.addURL(getValue(attrs,"src"),baseUrl);
break;
}
if (name.equalsIgnoreCase("applet")) {
urls.addURL(getValue(attrs,"code"),baseUrl);
break;
}
if (name.equalsIgnoreCase("input")) {
String src=getValue(attrs,"src");
String typ=getValue(attrs,"type");
if ((src != null) && (typ.equalsIgnoreCase("image"))) {
urls.addURL(src,baseUrl);
}
break;
}
if (name.equalsIgnoreCase("link")) {
urls.addURL(getValue(attrs,"href"),baseUrl);
break;
}
String back=getValue(attrs,"background");
if (back != null) {
urls.addURL(back,baseUrl);
break;
}
NodeList children=node.getChildNodes();
if (children != null) {
int len=children.getLength();
for (int i=0; i < len; i++) {
baseUrl=scanNodes(children.item(i),urls,baseUrl);
}
}
break;
}
return baseUrl;
}
