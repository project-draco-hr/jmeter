{
  if (node == null) {
    return baseUrl;
  }
  String name=node.getNodeName();
  int type=node.getNodeType();
switch (type) {
case Node.DOCUMENT_NODE:
    scanNodes(((Document)node).getDocumentElement(),urls,baseUrl);
  break;
case Node.ELEMENT_NODE:
NamedNodeMap attrs=node.getAttributes();
if (name.equalsIgnoreCase(TAG_BASE)) {
String tmp=getValue(attrs,ATT_HREF);
if (tmp != null) {
  try {
    baseUrl=ConversionUtils.makeRelativeURL(baseUrl,tmp);
  }
 catch (  MalformedURLException e) {
    throw new HTMLParseException(e);
  }
}
break;
}
if (name.equalsIgnoreCase(TAG_IMAGE) || name.equalsIgnoreCase(TAG_EMBED)) {
urls.addURL(getValue(attrs,ATT_SRC),baseUrl);
break;
}
if (name.equalsIgnoreCase(TAG_APPLET)) {
urls.addURL(getValue(attrs,"code"),baseUrl);
break;
}
if (name.equalsIgnoreCase(TAG_INPUT)) {
String src=getValue(attrs,ATT_SRC);
String typ=getValue(attrs,ATT_TYPE);
if ((src != null) && (typ.equalsIgnoreCase(ATT_IS_IMAGE))) {
urls.addURL(src,baseUrl);
}
break;
}
if (name.equalsIgnoreCase(TAG_LINK) && getValue(attrs,ATT_REL).equalsIgnoreCase(STYLESHEET)) {
urls.addURL(getValue(attrs,ATT_HREF),baseUrl);
break;
}
if (name.equalsIgnoreCase(TAG_SCRIPT)) {
urls.addURL(getValue(attrs,ATT_SRC),baseUrl);
break;
}
if (name.equalsIgnoreCase(TAG_FRAME)) {
urls.addURL(getValue(attrs,ATT_SRC),baseUrl);
break;
}
String back=getValue(attrs,ATT_BACKGROUND);
if (back != null) {
urls.addURL(back,baseUrl);
}
if (name.equalsIgnoreCase(TAG_BGSOUND)) {
urls.addURL(getValue(attrs,ATT_SRC),baseUrl);
break;
}
String style=getValue(attrs,ATT_STYLE);
if (style != null) {
HtmlParsingUtils.extractStyleURLs(baseUrl,urls,style);
}
NodeList children=node.getChildNodes();
if (children != null) {
int len=children.getLength();
for (int i=0; i < len; i++) {
baseUrl=scanNodes(children.item(i),urls,baseUrl);
}
}
break;
}
return baseUrl;
}
