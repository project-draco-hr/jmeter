{
  if (!enabled.peek()) {
    return;
  }
  TagType tagType=tag.getType();
switch (tagType) {
case START:
case SELF_CLOSING:
    if (tag.nameEquals(TAG_BODY)) {
      extractAttribute(tag,ATT_BACKGROUND);
    }
 else     if (tag.nameEquals(TAG_BASE)) {
      CharSequence baseref=tag.getAttributeValue(ATT_HREF);
      try {
        if (!StringUtils.isEmpty(baseref)) {
          baseUrl.url=ConversionUtils.makeRelativeURL(baseUrl.url,baseref.toString());
        }
      }
 catch (      MalformedURLException e1) {
        throw new RuntimeException(e1);
      }
    }
 else     if (tag.nameEquals(TAG_IMAGE)) {
      extractAttribute(tag,ATT_SRC);
    }
 else     if (tag.nameEquals(TAG_APPLET)) {
      extractAttribute(tag,ATT_CODE);
    }
 else     if (tag.nameEquals(TAG_OBJECT)) {
      extractAttribute(tag,ATT_CODEBASE);
      extractAttribute(tag,ATT_DATA);
    }
 else     if (tag.nameEquals(TAG_INPUT)) {
      CharSequence type=tag.getAttributeValue(ATT_TYPE);
      if (type != null && TagUtil.equalsIgnoreCase(ATT_IS_IMAGE,type)) {
        extractAttribute(tag,ATT_SRC);
      }
    }
 else     if (tag.nameEquals(TAG_SCRIPT)) {
      extractAttribute(tag,ATT_SRC);
    }
 else     if (tag.nameEquals(TAG_FRAME) || tag.nameEquals(TAG_IFRAME)) {
      extractAttribute(tag,ATT_SRC);
    }
 else     if (tag.nameEquals(TAG_EMBED)) {
      extractAttribute(tag,ATT_SRC);
    }
 else     if (tag.nameEquals(TAG_BGSOUND)) {
      extractAttribute(tag,ATT_SRC);
    }
 else     if (tag.nameEquals(TAG_LINK)) {
      CharSequence relAttribute=tag.getAttributeValue(ATT_REL);
      if (relAttribute != null && TagUtil.equalsIgnoreCase(STYLESHEET,relAttribute)) {
        extractAttribute(tag,ATT_HREF);
      }
    }
 else {
      extractAttribute(tag,ATT_BACKGROUND);
    }
  CharSequence styleTagStr=tag.getAttributeValue(ATT_STYLE);
if (!StringUtils.isEmpty(styleTagStr)) {
  HtmlParsingUtils.extractStyleURLs(baseUrl.url,urls,styleTagStr.toString());
}
break;
case END:
break;
}
}
