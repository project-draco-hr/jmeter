{
  Set uniqueURLs=new LinkedHashSet();
  Perl5Matcher matcher=(Perl5Matcher)localMatcher.get();
  PatternMatcherInput input=(PatternMatcherInput)localInput.get();
  input.setInput(new String(html));
  while (matcher.contains(input,pattern)) {
    MatchResult match=matcher.getMatch();
    String s;
    if (log.isDebugEnabled())     log.debug("match groups " + match.groups());
    s=match.group(1);
    if (s != null) {
      if (log.isDebugEnabled()) {
        log.debug("new baseUrl: " + s + " - "+ baseUrl.toString());
      }
      try {
        baseUrl=new URL(baseUrl,s);
      }
 catch (      MalformedURLException e) {
        if (log.isDebugEnabled()) {
          log.debug("Can't build base URL from RL " + s + " in page "+ baseUrl,e);
        }
      }
    }
    for (int g=2; g < match.groups(); g++) {
      s=match.group(g);
      if (log.isDebugEnabled()) {
        log.debug("group " + g + " - "+ match.group(g));
      }
      if (s != null) {
        try {
          uniqueURLs.add(new URL(baseUrl,s));
        }
 catch (        MalformedURLException e) {
          if (log.isDebugEnabled()) {
            log.debug("Can't build URL from RL " + s + " in page "+ baseUrl);
          }
          uniqueURLs.add(s);
        }
      }
    }
  }
  return uniqueURLs.iterator();
}
