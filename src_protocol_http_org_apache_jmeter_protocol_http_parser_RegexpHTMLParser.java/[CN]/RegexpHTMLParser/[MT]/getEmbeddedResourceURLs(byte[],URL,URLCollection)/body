{
  Perl5Matcher matcher=JMeterUtils.getMatcher();
  PatternMatcherInput input=(PatternMatcherInput)localInput.get();
  input.setInput(new String(html));
  Pattern pattern=JMeterUtils.getPatternCache().getPattern(REGEXP,Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.SINGLELINE_MASK | Perl5Compiler.READ_ONLY_MASK);
  while (matcher.contains(input,pattern)) {
    MatchResult match=matcher.getMatch();
    String s;
    if (log.isDebugEnabled()) {
      log.debug("match groups " + match.groups() + " "+ match.toString());
    }
    for (int g=1; g <= NUM_BASE_GROUPS && g <= match.groups(); g++) {
      s=match.group(g);
      if (s != null) {
        if (log.isDebugEnabled()) {
          log.debug("new baseUrl: " + s + " - "+ baseUrl.toString());
        }
        try {
          baseUrl=ConversionUtils.makeRelativeURL(baseUrl,s);
        }
 catch (        MalformedURLException e) {
          if (log.isDebugEnabled()) {
            log.debug("Can't build base URL from RL " + s + " in page "+ baseUrl,e);
          }
        }
      }
    }
    for (int g=NUM_BASE_GROUPS + 1; g <= match.groups(); g++) {
      s=match.group(g);
      if (s != null) {
        if (log.isDebugEnabled()) {
          log.debug("group " + g + " - "+ match.group(g));
        }
        urls.addURL(s,baseUrl);
      }
    }
  }
  return urls.iterator();
}
