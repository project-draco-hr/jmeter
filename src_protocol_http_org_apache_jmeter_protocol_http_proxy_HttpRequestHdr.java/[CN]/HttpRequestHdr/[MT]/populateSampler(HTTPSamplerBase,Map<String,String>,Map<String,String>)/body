{
  sampler.setDomain(serverName());
  if (log.isDebugEnabled()) {
    log.debug("Proxy: setting server: " + sampler.getDomain());
  }
  sampler.setMethod(method);
  log.debug("Proxy: setting method: " + sampler.getMethod());
  sampler.setPort(serverPort());
  if (log.isDebugEnabled()) {
    log.debug("Proxy: setting port: " + sampler.getPort());
  }
  if (url.indexOf("//") > -1) {
    String protocol=url.substring(0,url.indexOf(":"));
    if (log.isDebugEnabled()) {
      log.debug("Proxy: setting protocol to : " + protocol);
    }
    sampler.setProtocol(protocol);
  }
 else   if (sampler.getPort() == HTTPConstants.DEFAULT_HTTPS_PORT) {
    sampler.setProtocol(HTTPS);
    if (log.isDebugEnabled()) {
      log.debug("Proxy: setting protocol to https");
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug("Proxy setting default protocol to: http");
    }
    sampler.setProtocol(HTTP);
  }
  URL pageUrl=null;
  if (sampler.isProtocolDefaultPort()) {
    pageUrl=new URL(sampler.getProtocol(),sampler.getDomain(),getPath());
  }
 else {
    pageUrl=new URL(sampler.getProtocol(),sampler.getDomain(),sampler.getPort(),getPath());
  }
  String urlWithoutQuery=getUrlWithoutQuery(pageUrl);
  String contentEncoding=null;
  String requestContentEncoding=ConversionUtils.getEncodingFromContentType(getContentType());
  if (requestContentEncoding != null) {
    contentEncoding=requestContentEncoding;
  }
 else {
    if (pageEncodings != null) {
synchronized (pageEncodings) {
        contentEncoding=pageEncodings.get(urlWithoutQuery);
      }
    }
    if (formEncodings != null) {
synchronized (formEncodings) {
        String formEncoding=formEncodings.get(urlWithoutQuery);
        if (formEncoding != null) {
          contentEncoding=formEncoding;
        }
      }
    }
  }
  String postData=null;
  if (log.isDebugEnabled()) {
    if (contentEncoding != null) {
      log.debug("Using encoding " + contentEncoding + " for request body");
    }
 else {
      log.debug("No encoding found, using JRE default encoding for request body");
    }
  }
  if (contentEncoding != null) {
    postData=new String(rawPostData,contentEncoding);
  }
 else {
    postData=new String(rawPostData);
  }
  if (contentEncoding != null) {
    sampler.setPath(getPath(),contentEncoding);
  }
 else {
    sampler.setPath(getPath(),null);
  }
  if (log.isDebugEnabled()) {
    log.debug("Proxy: setting path: " + sampler.getPath());
  }
  if (!HTTPConstants.CONNECT.equals(getMethod()) && numberRequests) {
    requestNumber++;
    sampler.setName(requestNumber + " " + sampler.getPath());
  }
 else {
    sampler.setName(sampler.getPath());
  }
  if (contentEncoding != null) {
    sampler.setContentEncoding(contentEncoding);
  }
  if ((!HTTPConstants.CONNECT.equals(getMethod())) && (!HTTPConstants.GET.equals(method))) {
    final String contentType=getContentType();
    MultipartUrlConfig urlConfig=getMultipartConfig(contentType);
    if (urlConfig != null) {
      urlConfig.parseArguments(postData);
      sampler.setDoMultipartPost(true);
      getHeaderManager().removeHeaderNamed(CONTENT_TYPE);
      getHeaderManager().removeHeaderNamed(CONTENT_LENGTH);
      sampler.setArguments(urlConfig.getArguments());
      sampler.setHTTPFiles(urlConfig.getHTTPFileArgs().asArray());
    }
 else     if (postData.trim().startsWith("<?") || "PUT".equals(sampler.getMethod())) {
      sampler.addNonEncodedArgument("",postData,"");
    }
 else     if (contentType == null || contentType.startsWith(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED)) {
      sampler.parseArguments(postData.trim(),contentEncoding);
    }
 else     if (postData.length() > 0) {
      if (isBinaryContent(contentType)) {
        try {
          File tempDir=new File(binaryDirectory);
          File out=File.createTempFile(method,binaryFileSuffix,tempDir);
          FileUtils.writeByteArrayToFile(out,rawPostData);
          HTTPFileArg[] files={new HTTPFileArg(out.getPath(),"",contentType)};
          sampler.setHTTPFiles(files);
        }
 catch (        IOException e) {
          log.warn("Could not create binary file: " + e);
        }
      }
 else {
        sampler.addNonEncodedArgument("",postData,"");
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug("sampler path = " + sampler.getPath());
  }
}
