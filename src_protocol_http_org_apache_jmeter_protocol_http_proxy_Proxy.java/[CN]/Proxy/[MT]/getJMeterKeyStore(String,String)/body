{
  final File certFile=new File(CERT_DIRECTORY,CERT_FILE);
  final String subject=host == null ? JMETER_SERVER_ALIAS : host;
  KeyStore keyStore=null;
  final String canonicalPath=certFile.getCanonicalPath();
  if (keyStorePass != null) {
    try {
      keyStore=getKeyStore(keyStorePass.toCharArray());
    }
 catch (    Exception e) {
      log.warn(port + "Could not open expected file " + canonicalPath+ " "+ e.getMessage());
    }
  }
  if (keyStore == null) {
    keyStorePass=RandomStringUtils.randomAscii(20);
    setPassword(keyStorePass);
    if (host != null) {
      log.info(port + "Creating Proxy CA in " + canonicalPath);
      KeyToolUtils.generateProxyCA(certFile,keyStorePass,CERT_VALIDITY);
      log.info(port + "Creating entry " + subject+ " in "+ canonicalPath);
      KeyToolUtils.generateHostCert(certFile,keyStorePass,subject,CERT_VALIDITY);
      log.info(port + "Created keystore in " + canonicalPath);
    }
 else {
      log.info(port + "Generating standard keypair in " + canonicalPath);
      if (certFile.exists() && !certFile.delete()) {
        throw new IOException("Could not delete file:" + certFile.getAbsolutePath() + ", this is needed for certificate generation");
      }
      KeyToolUtils.genkeypair(certFile,JMETER_SERVER_ALIAS,keyStorePass,CERT_VALIDITY,null,null);
    }
    keyStore=getKeyStore(keyStorePass.toCharArray());
  }
  if (keyStorePass != null && host != null && !keyStore.containsAlias(host)) {
    log.info(port + "Creating entry '" + host+ "' in "+ canonicalPath);
    KeyToolUtils.generateHostCert(certFile,keyStorePass,host,CERT_VALIDITY);
    keyStore=getKeyStore(keyStorePass.toCharArray());
  }
  return keyStore;
}
