{
  String httpSamplerName=target.getSamplerTypeName();
  HttpRequestHdr request=new HttpRequestHdr(httpSamplerName);
  SampleResult result=null;
  HeaderManager headers=null;
  HTTPSamplerBase sampler=null;
  final boolean isDebug=log.isDebugEnabled();
  if (isDebug) {
    log.debug(port + "====================================================================");
  }
  try {
    byte[] ba=request.parse(new BufferedInputStream(clientSocket.getInputStream()));
    if (ba.length == 0) {
      if (isDebug) {
        log.debug(port + "Empty request, ignored");
      }
      throw new JMeterException();
    }
    if (isDebug) {
      log.debug(port + "Initial request: " + new String(ba));
    }
    outStreamClient=clientSocket.getOutputStream();
    if ((request.getMethod().startsWith(HTTPConstants.CONNECT)) && (outStreamClient != null)) {
      if (isDebug) {
        log.debug(port + "Method CONNECT => SSL");
      }
      outStreamClient.write(("HTTP/1.0 200 OK\r\n\r\n").getBytes(SampleResult.DEFAULT_HTTP_ENCODING));
      outStreamClient.flush();
      String[] param=request.getUrl().split(":");
      if (param.length == 2) {
        if (isDebug) {
          log.debug(port + "Start to negotiate SSL connection, host: " + param[0]);
        }
        clientSocket=startSSL(clientSocket,param[0]);
      }
 else {
        log.error("In SSL request, unable to find host and port in CONNECT request: " + request.getUrl());
        throw new JMeterException();
      }
      try {
        ba=request.parse(new BufferedInputStream(clientSocket.getInputStream()));
      }
 catch (      IOException ioe) {
        final String url=param.length > 0 ? " for '" + param[0] + "'" : "";
        log.warn(port + "Problem with SSL certificate" + url+ "? Ensure browser is set to accept the JMeter proxy cert: "+ ioe.getMessage());
        result=generateErrorResult(result,request,ioe,"\n**ensure browser is set to accept the JMeter proxy certificate**");
        throw new JMeterException();
      }
      if (isDebug) {
        log.debug(port + "Reparse: " + new String(ba));
      }
      if (ba.length == 0) {
        log.warn(port + "Empty response to http over SSL. Probably waiting for user to authorize the certificate for " + request.getUrl());
        throw new JMeterException();
      }
    }
    SamplerCreator samplerCreator=SAMPLERFACTORY.getSamplerCreator(request,pageEncodings,formEncodings);
    sampler=samplerCreator.createAndPopulateSampler(request,pageEncodings,formEncodings);
    headers=request.getHeaderManager();
    sampler.setHeaderManager(headers);
    sampler.threadStarted();
    if (isDebug) {
      log.debug(port + "Execute sample: " + sampler.getMethod()+ " "+ sampler.getUrl());
    }
    result=sampler.sample();
    String pageEncoding=addPageEncoding(result);
    addFormEncodings(result,pageEncoding);
    writeToClient(result,new BufferedOutputStream(clientSocket.getOutputStream()));
    samplerCreator.postProcessSampler(sampler,result);
  }
 catch (  JMeterException jme) {
  }
catch (  UnknownHostException uhe) {
    log.warn(port + "Server Not Found.",uhe);
    writeErrorToClient(HttpReplyHdr.formServerNotFound());
    result=generateErrorResult(result,request,uhe);
  }
catch (  IllegalArgumentException e) {
    log.error(port + "Not implemented (probably used https)",e);
    writeErrorToClient(HttpReplyHdr.formNotImplemented("Probably used https instead of http. " + "To record https requests, see " + "<a href=\"http://jmeter.apache.org/usermanual/component_reference.html#HTTP(S)_Test_Script_Recorder\">HTTP(S) Test Script Recorder documentation</a>"));
    result=generateErrorResult(result,request,e);
  }
catch (  Exception e) {
    log.error(port + "Exception when processing sample",e);
    writeErrorToClient(HttpReplyHdr.formInternalError());
    result=generateErrorResult(result,request,e);
  }
 finally {
    if (sampler != null && isDebug) {
      log.debug(port + "Will deliver sample " + sampler.getName());
    }
    if (headers != null) {
      headers.removeHeaderNamed(HTTPConstants.HEADER_COOKIE);
      for (      String hdr : HEADERS_TO_REMOVE) {
        headers.removeHeaderNamed(hdr);
      }
    }
    if (result != null) {
      target.deliverSampler(sampler,new TestElement[]{captureHttpHeaders ? headers : null},result);
    }
    try {
      clientSocket.close();
    }
 catch (    Exception e) {
      log.error(port + "Failed to close client socket",e);
    }
    if (sampler != null) {
      sampler.threadFinished();
    }
  }
}
