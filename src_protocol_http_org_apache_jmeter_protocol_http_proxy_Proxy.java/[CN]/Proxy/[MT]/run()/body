{
  String httpSamplerName=target.getSamplerTypeName();
  HttpRequestHdr request=new HttpRequestHdr(httpSamplerName);
  SampleResult result=null;
  HeaderManager headers=null;
  HTTPSamplerBase sampler=null;
  String[] param=null;
  try {
    request.parse(new BufferedInputStream(clientSocket.getInputStream()));
    outStreamClient=clientSocket.getOutputStream();
    if ((request.getMethod().startsWith(HTTPConstants.CONNECT)) && (outStreamClient != null)) {
      log.debug("Method CONNECT => SSL");
      outStreamClient.write(("HTTP/1.0 200 OK\r\n\r\n").getBytes(SampleResult.DEFAULT_HTTP_ENCODING));
      outStreamClient.flush();
      param=request.getUrl().split(":");
      if (param.length == 2) {
        log.debug("Start to negotiate SSL connection, host: " + param[0]);
        clientSocket=startSSL(clientSocket,param[0]);
      }
 else {
        log.warn("In SSL request, unable to find host and port in CONNECT request");
      }
      request.parse(new BufferedInputStream(clientSocket.getInputStream()));
    }
    SamplerCreator samplerCreator=factory.getSamplerCreator(request,pageEncodings,formEncodings);
    sampler=samplerCreator.createAndPopulateSampler(request,pageEncodings,formEncodings);
    headers=request.getHeaderManager();
    sampler.setHeaderManager(headers);
    sampler.threadStarted();
    result=sampler.sample();
    String pageEncoding=addPageEncoding(result);
    addFormEncodings(result,pageEncoding);
    writeToClient(result,new BufferedOutputStream(clientSocket.getOutputStream()));
    samplerCreator.postProcessSampler(sampler,result);
  }
 catch (  UnknownHostException uhe) {
    log.warn("Server Not Found.",uhe);
    writeErrorToClient(HttpReplyHdr.formServerNotFound());
    result=generateErrorResult(result,uhe);
  }
catch (  IllegalArgumentException e) {
    log.error("Not implemented (probably used https)",e);
    writeErrorToClient(HttpReplyHdr.formNotImplemented("Probably used https instead of http. " + "To record https requests, see " + "<a href=\"http://jmeter.apache.org/usermanual/component_reference.html#HTTP_Proxy_Server\">HTTP Proxy Server documentation</a>"));
    result=generateErrorResult(result,e);
  }
catch (  IOException ioe) {
    log.error("Problem with SSL certificate? Ensure browser is set to accept the JMeter proxy cert: " + ioe.getLocalizedMessage() + " for url:"+ (param != null && param.length > 0 ? param[0] : ""),ioe);
    if (result == null) {
      result=new SampleResult();
      result.setSampleLabel("Sample failed");
    }
    result.setResponseMessage(ioe.getMessage() + "\n**ensure browser is set to accept the JMeter proxy certificate**");
  }
catch (  Exception e) {
    log.error("Exception when processing sample",e);
    writeErrorToClient(HttpReplyHdr.formInternalError());
    result=generateErrorResult(result,e);
  }
 finally {
    if (log.isDebugEnabled()) {
      if (sampler != null) {
        log.debug("Will deliver sample " + sampler.getName());
      }
    }
    if (headers != null) {
      headers.removeHeaderNamed(HTTPConstants.HEADER_COOKIE);
      headers.removeHeaderNamed(HTTPConstants.HEADER_AUTHORIZATION);
      for (      String hdr : headersToRemove) {
        headers.removeHeaderNamed(hdr);
      }
    }
    if (sampler != null) {
      target.deliverSampler(sampler,new TestElement[]{captureHttpHeaders ? headers : null},result);
    }
    try {
      clientSocket.close();
    }
 catch (    Exception e) {
      log.error("",e);
    }
    if (sampler != null) {
      sampler.threadFinished();
    }
  }
}
