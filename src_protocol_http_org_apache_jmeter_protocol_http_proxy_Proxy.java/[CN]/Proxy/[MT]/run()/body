{
  String httpSamplerName=target.getSamplerTypeName();
  HTTPSamplerBase sampler=HTTPSamplerFactory.newInstance(httpSamplerName);
  HttpRequestHdr request=new HttpRequestHdr(sampler);
  SampleResult result=null;
  HeaderManager headers=null;
  try {
    request.parse(new BufferedInputStream(clientSocket.getInputStream()));
    outStreamClient=clientSocket.getOutputStream();
    if ((request.getMethod().startsWith(HTTPConstants.CONNECT)) && (outStreamClient != null)) {
      log.debug("Method CONNECT => SSL");
      outStreamClient.write(("HTTP/1.0 200 OK\r\n\r\n").getBytes());
      outStreamClient.flush();
      String[] param=request.getUrl().split(":");
      if (param.length == 2) {
        log.debug("Start to negotiate SSL connection, host: " + param[0]);
        clientSocket=startSSL(clientSocket,param[0]);
      }
 else {
        log.warn("In SSL request, unable to find host and port in CONNECT request");
      }
      request.parse(new BufferedInputStream(clientSocket.getInputStream()));
    }
    request.getSampler(pageEncodings,formEncodings);
    headers=request.getHeaderManager();
    sampler.setHeaderManager(headers);
    boolean forcedHTTPS=false;
    if (httpsSpoof) {
      if (httpsSpoofMatch.length() > 0) {
        String url=request.getUrl();
        if (url.matches(httpsSpoofMatch)) {
          sampler.setProtocol(HTTPConstants.PROTOCOL_HTTPS);
          forcedHTTPS=true;
        }
      }
 else {
        sampler.setProtocol(HTTPConstants.PROTOCOL_HTTPS);
        forcedHTTPS=true;
      }
    }
    sampler.threadStarted();
    result=sampler.sample();
    if (httpsSpoof && SampleResult.TEXT.equals(result.getDataType())) {
      final String enc=result.getDataEncodingWithDefault();
      String noHttpsResult=new String(result.getResponseData(),enc);
      final String HTTPS_HOST="https://([^:/]+)(:" + HTTPConstants.DEFAULT_HTTPS_PORT_STRING + ")?";
      noHttpsResult=noHttpsResult.replaceAll(HTTPS_HOST,"http://$1");
      result.setResponseData(noHttpsResult.getBytes(enc));
    }
    String pageEncoding=addPageEncoding(result);
    addFormEncodings(result,pageEncoding);
    writeToClient(result,new BufferedOutputStream(clientSocket.getOutputStream()),forcedHTTPS);
  }
 catch (  UnknownHostException uhe) {
    log.warn("Server Not Found.",uhe);
    writeErrorToClient(HttpReplyHdr.formServerNotFound());
    result=generateErrorResult(result,uhe);
  }
catch (  IllegalArgumentException e) {
    log.error("Not implemented (probably used https)",e);
    writeErrorToClient(HttpReplyHdr.formNotImplemented("Probably used https instead of http. " + "To record https requests, see " + "<a href=\"http://jakarta.apache.org/jmeter/usermanual/component_reference.html#HTTP_Proxy_Server\">HTTP Proxy Server documentation</a>"));
    result=generateErrorResult(result,e);
  }
catch (  IOException ioe) {
    log.error("Problem with SSL certificate? Ensure browser is set to accept the JMeter proxy cert: " + ioe.getLocalizedMessage());
    if (result == null) {
      result=new SampleResult();
      result.setSampleLabel("Sample failed");
    }
    result.setResponseMessage(ioe.getMessage() + "\n**ensure browser is set to accept the JMeter proxy certificate**");
  }
catch (  Exception e) {
    log.error("Exception when processing sample",e);
    writeErrorToClient(HttpReplyHdr.formInternalError());
    result=generateErrorResult(result,e);
  }
 finally {
    if (log.isDebugEnabled()) {
      log.debug("Will deliver sample " + sampler.getName());
    }
    if (headers != null) {
      headers.removeHeaderNamed(HTTPConstants.HEADER_COOKIE);
      headers.removeHeaderNamed(HTTPConstants.HEADER_AUTHORIZATION);
      for (      String hdr : headersToRemove) {
        headers.removeHeaderNamed(hdr);
      }
    }
    target.deliverSampler(sampler,new TestElement[]{captureHttpHeaders ? headers : null},result);
    try {
      clientSocket.close();
    }
 catch (    Exception e) {
      log.error("",e);
    }
    sampler.threadFinished();
  }
}
