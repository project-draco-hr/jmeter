{
  String command=action.getActionCommand();
  if (command.equals(STOP)) {
    model.stopProxy();
    stop.setEnabled(false);
    start.setEnabled(true);
    restart.setEnabled(false);
  }
 else   if (command.equals(START)) {
    startProxy();
  }
 else   if (command.equals(RESTART)) {
    model.stopProxy();
    startProxy();
  }
 else   if (command.equals(ENABLE_RESTART)) {
    enableRestart();
  }
 else   if (command.equals(ADD_EXCLUDE)) {
    excludeModel.addNewRow();
    excludeModel.fireTableDataChanged();
    enableRestart();
  }
 else   if (command.equals(ADD_INCLUDE)) {
    includeModel.addNewRow();
    includeModel.fireTableDataChanged();
    enableRestart();
  }
 else   if (command.equals(DELETE_EXCLUDE)) {
    excludeModel.removeRow(excludeTable.getSelectedRow());
    excludeModel.fireTableDataChanged();
    enableRestart();
  }
 else   if (command.equals(DELETE_INCLUDE)) {
    includeModel.removeRow(includeTable.getSelectedRow());
    includeModel.fireTableDataChanged();
    enableRestart();
  }
 else   if (command.equals(CHANGE_TARGET)) {
    log.debug("Change target " + targetNodes.getSelectedItem());
    log.debug("In model " + model);
    TreeNodeWrapper nw=(TreeNodeWrapper)targetNodes.getSelectedItem();
    model.setTarget(nw.getTreeNode());
    enableRestart();
  }
 else   if (command.equals(ADD_TO_INCLUDE_FROM_CLIPBOARD)) {
    addFromClipboard(includeTable);
    includeModel.fireTableDataChanged();
    enableRestart();
  }
 else   if (command.equals(ADD_TO_EXCLUDE_FROM_CLIPBOARD)) {
    addFromClipboard(excludeTable);
    excludeModel.fireTableDataChanged();
    enableRestart();
  }
 else   if (command.equals(ADD_SUGGESTED_EXCLUDES)) {
    addSuggestedExcludes(excludeTable);
    excludeModel.fireTableDataChanged();
    enableRestart();
  }
}
