{
  super(AccessLogSampler.class);
  log.debug("Entered access log sampler bean info");
  try {
    createPropertyGroup("defaults",new String[]{"domain","portString","imageParsing"});
    createPropertyGroup("plugins",new String[]{"parserClassName","filterClassName"});
    createPropertyGroup("accesslogfile",new String[]{"logFile"});
    PropertyDescriptor p;
    p=property("parserClassName");
    p.setValue(NOT_UNDEFINED,Boolean.TRUE);
    p.setValue(DEFAULT,AccessLogSampler.DEFAULT_CLASS);
    p.setValue(NOT_OTHER,Boolean.TRUE);
    p.setValue(NOT_EXPRESSION,Boolean.TRUE);
    final List<String> logParserClasses=ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(),new Class[]{LogParser.class});
    if (log.isDebugEnabled()) {
      log.debug("found parsers: " + logParserClasses);
    }
    p.setValue(TAGS,logParserClasses.toArray(new String[0]));
    p=property("filterClassName");
    p.setValue(NOT_UNDEFINED,Boolean.FALSE);
    p.setValue(DEFAULT,"");
    p.setValue(NOT_EXPRESSION,Boolean.TRUE);
    p.setValue(TAGS,ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(),new Class[]{Filter.class},false).toArray(new String[0]));
    p=property("logFile");
    p.setValue(NOT_UNDEFINED,Boolean.TRUE);
    p.setValue(DEFAULT,"");
    p.setPropertyEditorClass(FileEditor.class);
    p=property("domain");
    p.setValue(NOT_UNDEFINED,Boolean.TRUE);
    p.setValue(DEFAULT,"");
    p=property("portString");
    p.setValue(NOT_UNDEFINED,Boolean.TRUE);
    p.setValue(DEFAULT,"");
    p=property("imageParsing");
    p.setValue(NOT_UNDEFINED,Boolean.TRUE);
    p.setValue(DEFAULT,Boolean.FALSE);
    p.setValue(NOT_OTHER,Boolean.TRUE);
  }
 catch (  IOException e) {
    log.warn("couldn't find classes and set up properties",e);
    throw new RuntimeException("Could not find classes with class finder");
  }
  log.debug("Got to end of access log samper bean info init");
}
