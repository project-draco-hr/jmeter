{
  String host=url.getHost();
  int port=url.getPort();
  if (port <= 0 || port == url.getDefaultPort()) {
    port=8009;
  }
  String scheme=url.getProtocol();
  if (channel == null || !host.equals(lastHost) || port != lastPort) {
    if (channel != null) {
      channel.close();
    }
    channel=new Socket(host,port);
    int timeout=JMeterUtils.getPropDefault("httpclient.timeout",0);
    if (timeout > 0) {
      channel.setSoTimeout(timeout);
    }
    localAddress=channel.getLocalAddress().getHostAddress();
    localName=channel.getLocalAddress().getHostName();
    lastHost=host;
    lastPort=port;
  }
  res.setURL(url);
  res.setHTTPMethod(method);
  outpos=4;
  setByte((byte)2);
  if (method.equals(HTTPConstants.POST)) {
    setByte((byte)4);
  }
 else {
    setByte((byte)2);
  }
  if (JMeterUtils.getPropDefault("httpclient.version","1.1").equals("1.0")) {
    setString("HTTP/1.0");
  }
 else {
    setString(HTTPConstants.HTTP_1_1);
  }
  setString(url.getPath());
  setString(localAddress);
  setString(localName);
  setString(host);
  setInt(url.getDefaultPort());
  setByte(HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(scheme) ? (byte)1 : (byte)0);
  setInt(getHeaderSize(method,url));
  String hdr=setConnectionHeaders(url,host,method);
  res.setRequestHeaders(hdr);
  res.setCookies(setConnectionCookies(url,getCookieManager()));
  String query=url.getQuery();
  if (query != null) {
    setByte((byte)0x05);
    setString(query);
  }
  setByte((byte)0xff);
}
