{
  String urlStr=url.toString();
  log.debug("Start : sample " + urlStr);
  log.debug("method " + method);
  HttpMethodBase httpMethod=null;
  HTTPSampleResult res=new HTTPSampleResult();
  res.setMonitor(isMonitor());
  res.setSampleLabel(urlStr);
  res.setHTTPMethod(method);
  res.setURL(url);
  res.sampleStart();
  try {
    if (method.equals(HTTPConstants.POST)) {
      httpMethod=new PostMethod(urlStr);
    }
 else     if (method.equals(HTTPConstants.PUT)) {
      httpMethod=new PutMethod(urlStr);
    }
 else     if (method.equals(HTTPConstants.HEAD)) {
      httpMethod=new HeadMethod(urlStr);
    }
 else     if (method.equals(HTTPConstants.TRACE)) {
      httpMethod=new TraceMethod(urlStr);
    }
 else     if (method.equals(HTTPConstants.OPTIONS)) {
      httpMethod=new OptionsMethod(urlStr);
    }
 else     if (method.equals(HTTPConstants.DELETE)) {
      httpMethod=new DeleteMethod(urlStr);
    }
 else     if (method.equals(HTTPConstants.GET)) {
      httpMethod=new GetMethod(urlStr);
    }
 else     if (method.equals(HTTPConstants.PATCH)) {
      httpMethod=new EntityEnclosingMethod(urlStr){
        @Override public String getName(){
          return "PATCH";
        }
      }
;
    }
 else {
      throw new IllegalArgumentException("Unexpected method: " + method);
    }
    final CacheManager cacheManager=getCacheManager();
    if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method)) {
      if (cacheManager.inCache(url)) {
        res.sampleEnd();
        res.setResponseNoContent();
        res.setSuccessful(true);
        return res;
      }
    }
    setDefaultRequestHeaders(httpMethod);
    HttpClient client=setupConnection(url,httpMethod,res);
    savedClient=client;
    if (method.equals(HTTPConstants.POST)) {
      String postBody=sendPostData((PostMethod)httpMethod);
      res.setQueryString(postBody);
    }
 else     if (method.equals(HTTPConstants.PUT) || method.equals(HTTPConstants.PATCH)) {
      String putBody=sendEntityData((EntityEnclosingMethod)httpMethod);
      res.setQueryString(putBody);
    }
    int statusCode=client.executeMethod(httpMethod);
    res.setRequestHeaders(getConnectionHeaders(httpMethod));
    InputStream instream=httpMethod.getResponseBodyAsStream();
    if (instream != null) {
      instream=new CountingInputStream(instream);
      try {
        Header responseHeader=httpMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_ENCODING);
        if (responseHeader != null && HTTPConstants.ENCODING_GZIP.equals(responseHeader.getValue())) {
          InputStream tmpInput=new GZIPInputStream(instream);
          res.setResponseData(readResponse(res,tmpInput,(int)httpMethod.getResponseContentLength()));
        }
 else {
          res.setResponseData(readResponse(res,instream,(int)httpMethod.getResponseContentLength()));
        }
      }
  finally {
        JOrphanUtils.closeQuietly(instream);
      }
    }
    res.sampleEnd();
    res.setSampleLabel(httpMethod.getURI().toString());
    res.setResponseCode(Integer.toString(statusCode));
    res.setSuccessful(isSuccessCode(statusCode));
    res.setResponseMessage(httpMethod.getStatusText());
    String ct=null;
    Header h=httpMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_TYPE);
    if (h != null) {
      ct=h.getValue();
      res.setContentType(ct);
      res.setEncodingAndType(ct);
    }
    res.setResponseHeaders(getResponseHeaders(httpMethod));
    if (res.isRedirect()) {
      final Header headerLocation=httpMethod.getResponseHeader(HTTPConstants.HEADER_LOCATION);
      if (headerLocation == null) {
        throw new IllegalArgumentException("Missing location header");
      }
      res.setRedirectLocation(headerLocation.getValue());
    }
    if (instream != null) {
      res.setBodySize(((CountingInputStream)instream).getCount());
    }
    res.setHeadersSize(calculateHeadersSize(httpMethod));
    if (log.isDebugEnabled()) {
      log.debug("Response headersSize=" + res.getHeadersSize() + " bodySize="+ res.getBodySize()+ " Total="+ (res.getHeadersSize() + res.getBodySize()));
    }
    if (getAutoRedirects()) {
      res.setURL(new URL(httpMethod.getURI().toString()));
    }
    saveConnectionCookies(httpMethod,res.getURL(),getCookieManager());
    if (cacheManager != null) {
      cacheManager.saveDetails(httpMethod,res);
    }
    res=resultProcessing(areFollowingRedirect,frameDepth,res);
    log.debug("End : sample");
    return res;
  }
 catch (  IllegalArgumentException e) {
    res.sampleEnd();
    res.setRequestHeaders(getConnectionHeaders(httpMethod));
    errorResult(e,res);
    return res;
  }
catch (  IOException e) {
    res.sampleEnd();
    res.setRequestHeaders(getConnectionHeaders(httpMethod));
    errorResult(e,res);
    return res;
  }
 finally {
    savedClient=null;
    if (httpMethod != null) {
      httpMethod.releaseConnection();
    }
  }
}
