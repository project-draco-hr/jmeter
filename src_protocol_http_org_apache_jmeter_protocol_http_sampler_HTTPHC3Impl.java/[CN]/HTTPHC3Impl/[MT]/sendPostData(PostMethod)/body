{
  StringBuilder postedBody=new StringBuilder(1000);
  HTTPFileArg[] files=getHTTPFiles();
  if (getUseMultipartForPost()) {
    String contentEncoding=getContentEncoding();
    if (isNullOrEmptyTrimmed(contentEncoding)) {
      contentEncoding=null;
    }
    final boolean browserCompatible=getDoBrowserCompatibleMultipart();
    List<PartBase> partlist=new ArrayList<>();
    for (    JMeterProperty jMeterProperty : getArguments()) {
      HTTPArgument arg=(HTTPArgument)jMeterProperty.getObjectValue();
      String parameterName=arg.getName();
      if (arg.isSkippable(parameterName)) {
        continue;
      }
      StringPart part=new StringPart(arg.getName(),arg.getValue(),contentEncoding);
      if (browserCompatible) {
        part.setTransferEncoding(null);
        part.setContentType(null);
      }
      partlist.add(part);
    }
    for (    HTTPFileArg file : files) {
      File inputFile=FileServer.getFileServer().getResolvedFile(file.getPath());
      ViewableFilePart filePart=new ViewableFilePart(file.getParamName(),inputFile,file.getMimeType(),null);
      filePart.setCharSet(null);
      partlist.add(filePart);
    }
    int partNo=partlist.size();
    Part[] parts=partlist.toArray(new Part[partNo]);
    MultipartRequestEntity multiPart=new MultipartRequestEntity(parts,post.getParams());
    post.setRequestEntity(multiPart);
    String multiPartContentType=multiPart.getContentType();
    post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE,multiPartContentType);
    if (multiPart.isRepeatable()) {
      for (int i=0; i < partNo; i++) {
        if (parts[i] instanceof ViewableFilePart) {
          ((ViewableFilePart)parts[i]).setHideFileData(true);
        }
      }
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      multiPart.writeRequest(bos);
      bos.flush();
      postedBody.append(new String(bos.toByteArray(),contentEncoding == null ? "US-ASCII" : contentEncoding));
      bos.close();
      for (int i=0; i < partNo; i++) {
        if (parts[i] instanceof ViewableFilePart) {
          ((ViewableFilePart)parts[i]).setHideFileData(false);
        }
      }
    }
 else {
      postedBody.append("<Multipart was not repeatable, cannot view what was sent>");
    }
  }
 else {
    Header contentTypeHeader=post.getRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE);
    boolean hasContentTypeHeader=contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0;
    if (!hasArguments() && getSendFileAsPostBody()) {
      HTTPFileArg file=files[0];
      if (!hasContentTypeHeader) {
        if (file.getMimeType() != null && file.getMimeType().length() > 0) {
          post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE,file.getMimeType());
        }
 else {
          post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
        }
      }
      FileRequestEntity fileRequestEntity=new FileRequestEntity(new File(file.getPath()),null);
      post.setRequestEntity(fileRequestEntity);
      postedBody.append("<actual file content, not shown here>");
    }
 else {
      String contentEncoding=getContentEncoding();
      boolean haveContentEncoding=false;
      if (isNullOrEmptyTrimmed(contentEncoding)) {
        contentEncoding=null;
      }
 else {
        post.getParams().setContentCharset(contentEncoding);
        haveContentEncoding=true;
      }
      if (getSendParameterValuesAsPostBody()) {
        if (!hasContentTypeHeader) {
          HTTPFileArg file=files.length > 0 ? files[0] : null;
          if (file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
            post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE,file.getMimeType());
          }
 else {
            post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
          }
        }
        StringBuilder postBody=new StringBuilder();
        for (        JMeterProperty jMeterProperty : getArguments()) {
          HTTPArgument arg=(HTTPArgument)jMeterProperty.getObjectValue();
          String value;
          if (haveContentEncoding) {
            value=arg.getEncodedValue(contentEncoding);
          }
 else {
            value=arg.getEncodedValue();
          }
          postBody.append(value);
        }
        StringRequestEntity requestEntity=new StringRequestEntity(postBody.toString(),post.getRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE).getValue(),contentEncoding);
        post.setRequestEntity(requestEntity);
      }
 else {
        if (!hasContentTypeHeader) {
          post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
        }
        for (        JMeterProperty jMeterProperty : getArguments()) {
          HTTPArgument arg=(HTTPArgument)jMeterProperty.getObjectValue();
          String parameterName=arg.getName();
          if (arg.isSkippable(parameterName)) {
            continue;
          }
          String parameterValue=arg.getValue();
          if (!arg.isAlwaysEncoded()) {
            String urlContentEncoding=contentEncoding;
            if (urlContentEncoding == null || urlContentEncoding.length() == 0) {
              urlContentEncoding=EncoderCache.URL_ARGUMENT_ENCODING;
            }
            parameterName=URLDecoder.decode(parameterName,urlContentEncoding);
            parameterValue=URLDecoder.decode(parameterValue,urlContentEncoding);
          }
          post.addParameter(parameterName,parameterValue);
        }
      }
      if (post.getRequestEntity().isRepeatable()) {
        ByteArrayOutputStream bos=new ByteArrayOutputStream();
        post.getRequestEntity().writeRequest(bos);
        bos.flush();
        postedBody.append(new String(bos.toByteArray(),post.getRequestCharSet()));
        bos.close();
      }
 else {
        postedBody.append("<RequestEntity was not repeatable, cannot view what was sent>");
      }
    }
  }
  post.setRequestHeader(HTTPConstants.HEADER_CONTENT_LENGTH,Long.toString(post.getRequestEntity().getContentLength()));
  return postedBody.toString();
}
