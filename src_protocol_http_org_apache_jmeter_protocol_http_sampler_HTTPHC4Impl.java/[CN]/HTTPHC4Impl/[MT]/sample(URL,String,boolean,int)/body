{
  if (log.isDebugEnabled()) {
    log.debug("Start : sample " + url.toString());
    log.debug("method " + method + " followingRedirect "+ areFollowingRedirect+ " depth "+ frameDepth);
  }
  HTTPSampleResult res=createSampleResult(url,method);
  HttpClient httpClient=setupClient(url,res);
  HttpRequestBase httpRequest=null;
  try {
    URI uri=url.toURI();
    if (method.equals(HTTPConstants.POST)) {
      httpRequest=new HttpPost(uri);
    }
 else     if (method.equals(HTTPConstants.GET)) {
      httpRequest=new HttpGet(uri);
    }
 else     if (method.equals(HTTPConstants.PUT)) {
      httpRequest=new HttpPut(uri);
    }
 else     if (method.equals(HTTPConstants.HEAD)) {
      httpRequest=new HttpHead(uri);
    }
 else     if (method.equals(HTTPConstants.TRACE)) {
      httpRequest=new HttpTrace(uri);
    }
 else     if (method.equals(HTTPConstants.OPTIONS)) {
      httpRequest=new HttpOptions(uri);
    }
 else     if (method.equals(HTTPConstants.DELETE)) {
      httpRequest=new HttpDelete(uri);
    }
 else     if (method.equals(HTTPConstants.PATCH)) {
      httpRequest=new HttpPatch(uri);
    }
 else     if (HttpWebdav.isWebdavMethod(method)) {
      httpRequest=new HttpWebdav(method,uri);
    }
 else {
      throw new IllegalArgumentException("Unexpected method: '" + method + "'");
    }
    setupRequest(url,httpRequest,res);
  }
 catch (  Exception e) {
    res.sampleStart();
    res.sampleEnd();
    errorResult(e,res);
    return res;
  }
  HttpContext localContext=new BasicHttpContext();
  setupClientContextBeforeSample(localContext);
  res.sampleStart();
  final CacheManager cacheManager=getCacheManager();
  if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method)) {
    if (cacheManager.inCache(url)) {
      return updateSampleResultForResourceInCache(res);
    }
  }
  try {
    currentRequest=httpRequest;
    handleMethod(method,res,httpRequest,localContext);
    HttpResponse httpResponse=executeRequest(httpClient,httpRequest,localContext,url);
    final HttpRequest request=(HttpRequest)localContext.getAttribute(HttpCoreContext.HTTP_REQUEST);
    extractClientContextAfterSample(localContext);
    final InetAddress localAddr=(InetAddress)httpRequest.getParams().getParameter(ConnRoutePNames.LOCAL_ADDRESS);
    if (localAddr != null) {
      request.addHeader(HEADER_LOCAL_ADDRESS,localAddr.toString());
    }
    res.setRequestHeaders(getConnectionHeaders(request));
    Header contentType=httpResponse.getLastHeader(HTTPConstants.HEADER_CONTENT_TYPE);
    if (contentType != null) {
      String ct=contentType.getValue();
      res.setContentType(ct);
      res.setEncodingAndType(ct);
    }
    HttpEntity entity=httpResponse.getEntity();
    if (entity != null) {
      res.setResponseData(readResponse(res,entity.getContent(),(int)entity.getContentLength()));
    }
    res.sampleEnd();
    currentRequest=null;
    StatusLine statusLine=httpResponse.getStatusLine();
    int statusCode=statusLine.getStatusCode();
    res.setResponseCode(Integer.toString(statusCode));
    res.setResponseMessage(statusLine.getReasonPhrase());
    res.setSuccessful(isSuccessCode(statusCode));
    res.setResponseHeaders(getResponseHeaders(httpResponse));
    if (res.isRedirect()) {
      final Header headerLocation=httpResponse.getLastHeader(HTTPConstants.HEADER_LOCATION);
      if (headerLocation == null) {
        throw new IllegalArgumentException("Missing location header in redirect for " + httpRequest.getRequestLine());
      }
      String redirectLocation=headerLocation.getValue();
      res.setRedirectLocation(redirectLocation);
    }
    HttpConnectionMetrics metrics=(HttpConnectionMetrics)localContext.getAttribute(CONTEXT_METRICS);
    long headerBytes=res.getResponseHeaders().length() + httpResponse.getAllHeaders().length + 1+ 2;
    long totalBytes=metrics.getReceivedBytesCount();
    res.setHeadersSize((int)headerBytes);
    res.setBodySize((int)(totalBytes - headerBytes));
    if (log.isDebugEnabled()) {
      log.debug("ResponseHeadersSize=" + res.getHeadersSize() + " Content-Length="+ res.getBodySize()+ " Total="+ (res.getHeadersSize() + res.getBodySize()));
    }
    if (getAutoRedirects()) {
      HttpUriRequest req=(HttpUriRequest)localContext.getAttribute(HttpCoreContext.HTTP_REQUEST);
      HttpHost target=(HttpHost)localContext.getAttribute(HttpCoreContext.HTTP_TARGET_HOST);
      URI redirectURI=req.getURI();
      if (redirectURI.isAbsolute()) {
        res.setURL(redirectURI.toURL());
      }
 else {
        res.setURL(new URL(new URL(target.toURI()),redirectURI.toString()));
      }
    }
    saveConnectionCookies(httpResponse,res.getURL(),getCookieManager());
    if (cacheManager != null) {
      cacheManager.saveDetails(httpResponse,res);
    }
    res=resultProcessing(areFollowingRedirect,frameDepth,res);
  }
 catch (  IOException e) {
    log.debug("IOException",e);
    if (res.getEndTime() == 0) {
      res.sampleEnd();
    }
    if (res.getRequestHeaders() != null) {
      log.debug("Overwriting request old headers: " + res.getRequestHeaders());
    }
    res.setRequestHeaders(getConnectionHeaders((HttpRequest)localContext.getAttribute(HttpCoreContext.HTTP_REQUEST)));
    errorResult(e,res);
    return res;
  }
catch (  RuntimeException e) {
    log.debug("RuntimeException",e);
    if (res.getEndTime() == 0) {
      res.sampleEnd();
    }
    errorResult(e,res);
    return res;
  }
 finally {
    currentRequest=null;
  }
  return res;
}
