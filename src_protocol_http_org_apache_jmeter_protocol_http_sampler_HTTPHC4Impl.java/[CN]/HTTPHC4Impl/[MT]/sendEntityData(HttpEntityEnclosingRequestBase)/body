{
  StringBuilder entityBody=new StringBuilder(1000);
  boolean hasEntityBody=false;
  final HTTPFileArg files[]=getHTTPFiles();
  final HTTPFileArg file=files.length > 0 ? files[0] : null;
  String contentTypeValue=null;
  if (file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
    contentTypeValue=file.getMimeType();
    entity.setHeader(HEADER_CONTENT_TYPE,contentTypeValue);
  }
  final String charset=getContentEncoding(HTTP.DEF_CONTENT_CHARSET.name());
  if (!hasArguments() && getSendFileAsPostBody()) {
    hasEntityBody=true;
    FileEntity fileRequestEntity=new FileEntity(new File(files[0].getPath()));
    entity.setEntity(fileRequestEntity);
  }
 else   if (getSendParameterValuesAsPostBody()) {
    hasEntityBody=true;
    StringBuilder entityBodyContent=new StringBuilder();
    PropertyIterator args=getArguments().iterator();
    while (args.hasNext()) {
      HTTPArgument arg=(HTTPArgument)args.next().getObjectValue();
      if (charset != null) {
        entityBodyContent.append(arg.getEncodedValue(charset));
      }
 else {
        entityBodyContent.append(arg.getEncodedValue());
      }
    }
    StringEntity requestEntity=new StringEntity(entityBodyContent.toString(),charset);
    entity.setEntity(requestEntity);
  }
  if (hasEntityBody) {
    final HttpEntity entityEntry=entity.getEntity();
    if (entityEntry.isRepeatable()) {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      entityEntry.writeTo(bos);
      bos.flush();
      entityBody.append(new String(bos.toByteArray(),charset));
      bos.close();
    }
 else {
      entityBody.append("<RequestEntity was not repeatable, cannot view what was sent>");
    }
  }
  return entityBody.toString();
}
