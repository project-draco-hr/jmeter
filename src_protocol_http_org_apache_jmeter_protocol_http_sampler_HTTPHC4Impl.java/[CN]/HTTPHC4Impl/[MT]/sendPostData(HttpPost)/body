{
  StringBuilder postedBody=new StringBuilder(1000);
  HTTPFileArg files[]=getHTTPFiles();
  if (getUseMultipartForPost()) {
    String contentEncoding=getContentEncoding();
    if (isNullOrEmptyTrimmed(contentEncoding)) {
      contentEncoding=null;
    }
    Charset charset=null;
    if (contentEncoding != null) {
      charset=Charset.forName(contentEncoding);
    }
    MultipartEntity multiPart=new MultipartEntity(getDoBrowserCompatibleMultipart() ? HttpMultipartMode.BROWSER_COMPATIBLE : HttpMultipartMode.STRICT,null,charset);
    PropertyIterator args=getArguments().iterator();
    while (args.hasNext()) {
      HTTPArgument arg=(HTTPArgument)args.next().getObjectValue();
      String parameterName=arg.getName();
      if (arg.isSkippable(parameterName)) {
        continue;
      }
      FormBodyPart formPart;
      StringBody stringBody=new StringBody(arg.getValue(),Charset.forName(contentEncoding == null ? "US-ASCII" : contentEncoding));
      formPart=new FormBodyPart(arg.getName(),stringBody);
      multiPart.addPart(formPart);
    }
    ViewableFileBody[] fileBodies=new ViewableFileBody[files.length];
    for (int i=0; i < files.length; i++) {
      HTTPFileArg file=files[i];
      fileBodies[i]=new ViewableFileBody(new File(file.getPath()),file.getMimeType());
      multiPart.addPart(file.getParamName(),fileBodies[i]);
    }
    post.setEntity(multiPart);
    if (multiPart.isRepeatable()) {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      for (      ViewableFileBody fileBody : fileBodies) {
        fileBody.hideFileData=true;
      }
      multiPart.writeTo(bos);
      for (      ViewableFileBody fileBody : fileBodies) {
        fileBody.hideFileData=false;
      }
      bos.flush();
      postedBody.append(new String(bos.toByteArray(),contentEncoding == null ? "US-ASCII" : contentEncoding));
      bos.close();
    }
 else {
      postedBody.append("<Multipart was not repeatable, cannot view what was sent>");
    }
  }
 else {
    Header contentTypeHeader=post.getFirstHeader(HEADER_CONTENT_TYPE);
    boolean hasContentTypeHeader=contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0;
    if (!hasArguments() && getSendFileAsPostBody()) {
      HTTPFileArg file=files[0];
      if (!hasContentTypeHeader) {
        if (file.getMimeType() != null && file.getMimeType().length() > 0) {
          post.setHeader(HEADER_CONTENT_TYPE,file.getMimeType());
        }
 else {
          post.setHeader(HEADER_CONTENT_TYPE,APPLICATION_X_WWW_FORM_URLENCODED);
        }
      }
      FileEntity fileRequestEntity=new FileEntity(new File(file.getPath()),(String)null);
      post.setEntity(fileRequestEntity);
      postedBody.append("<actual file content, not shown here>");
    }
 else {
      String contentEncoding=getContentEncoding();
      boolean haveContentEncoding=false;
      if (isNullOrEmptyTrimmed(contentEncoding)) {
        contentEncoding=null;
      }
 else {
        post.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET,contentEncoding);
        haveContentEncoding=true;
      }
      if (getSendParameterValuesAsPostBody()) {
        if (!hasContentTypeHeader) {
          HTTPFileArg file=files.length > 0 ? files[0] : null;
          if (file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
            post.setHeader(HEADER_CONTENT_TYPE,file.getMimeType());
          }
 else {
            post.setHeader(HEADER_CONTENT_TYPE,APPLICATION_X_WWW_FORM_URLENCODED);
          }
        }
        StringBuilder postBody=new StringBuilder();
        PropertyIterator args=getArguments().iterator();
        while (args.hasNext()) {
          HTTPArgument arg=(HTTPArgument)args.next().getObjectValue();
          String value;
          if (haveContentEncoding) {
            value=arg.getEncodedValue(contentEncoding);
          }
 else {
            value=arg.getEncodedValue();
          }
          postBody.append(value);
        }
        StringEntity requestEntity=new StringEntity(postBody.toString(),post.getFirstHeader(HEADER_CONTENT_TYPE).getValue(),contentEncoding);
        post.setEntity(requestEntity);
        postedBody.append(postBody.toString());
      }
 else {
        if (!hasContentTypeHeader) {
          post.setHeader(HEADER_CONTENT_TYPE,APPLICATION_X_WWW_FORM_URLENCODED);
        }
        PropertyIterator args=getArguments().iterator();
        List<NameValuePair> nvps=new ArrayList<NameValuePair>();
        String urlContentEncoding=contentEncoding;
        if (urlContentEncoding == null || urlContentEncoding.length() == 0) {
          urlContentEncoding=EncoderCache.URL_ARGUMENT_ENCODING;
        }
        while (args.hasNext()) {
          HTTPArgument arg=(HTTPArgument)args.next().getObjectValue();
          String parameterName=arg.getName();
          if (arg.isSkippable(parameterName)) {
            continue;
          }
          String parameterValue=arg.getValue();
          if (!arg.isAlwaysEncoded()) {
            parameterName=URLDecoder.decode(parameterName,urlContentEncoding);
            parameterValue=URLDecoder.decode(parameterValue,urlContentEncoding);
          }
          nvps.add(new BasicNameValuePair(parameterName,parameterValue));
        }
        UrlEncodedFormEntity entity=new UrlEncodedFormEntity(nvps,urlContentEncoding);
        post.setEntity(entity);
        if (entity.isRepeatable()) {
          ByteArrayOutputStream bos=new ByteArrayOutputStream();
          post.getEntity().writeTo(bos);
          bos.flush();
          if (contentEncoding != null) {
            postedBody.append(new String(bos.toByteArray(),contentEncoding));
          }
 else {
            postedBody.append(new String(bos.toByteArray(),SampleResult.DEFAULT_HTTP_ENCODING));
          }
          bos.close();
        }
 else {
          postedBody.append("<RequestEntity was not repeatable, cannot view what was sent>");
        }
      }
    }
  }
  return postedBody.toString();
}
