{
  Map<HttpClientKey,HttpClient> mapHttpClientPerHttpClientKey=HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();
  final String host=url.getHost();
  String proxyHost=getProxyHost();
  int proxyPort=getProxyPortInt();
  String proxyPass=getProxyPass();
  String proxyUser=getProxyUser();
  boolean useStaticProxy=isStaticProxy(host);
  boolean useDynamicProxy=isDynamicProxy(proxyHost,proxyPort);
  boolean useProxy=useStaticProxy || useDynamicProxy;
  if (!useDynamicProxy) {
    proxyHost=PROXY_HOST;
    proxyPort=PROXY_PORT;
    proxyUser=PROXY_USER;
    proxyPass=PROXY_PASS;
  }
  HttpClientKey key=new HttpClientKey(url,useProxy,proxyHost,proxyPort,proxyUser,proxyPass);
  HttpClient httpClient=mapHttpClientPerHttpClientKey.get(key);
  if (httpClient != null && resetSSLContext && HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(url.getProtocol())) {
    ((AbstractHttpClient)httpClient).clearRequestInterceptors();
    ((AbstractHttpClient)httpClient).clearResponseInterceptors();
    httpClient.getConnectionManager().closeIdleConnections(1L,TimeUnit.MICROSECONDS);
    httpClient=null;
    JsseSSLManager sslMgr=(JsseSSLManager)SSLManager.getInstance();
    sslMgr.resetContext();
    resetSSLContext=false;
  }
  if (httpClient == null) {
    HttpParams clientParams=new DefaultedHttpParams(new BasicHttpParams(),DEFAULT_HTTP_PARAMS);
    DnsResolver resolver=this.testElement.getDNSResolver();
    if (resolver == null) {
      resolver=new SystemDefaultDnsResolver();
    }
    ClientConnectionManager connManager=new MeasuringConnectionManager(SchemeRegistryFactory.createDefault(),resolver);
    httpClient=new DefaultHttpClient(connManager,clientParams){
      @Override protected HttpRequestRetryHandler createHttpRequestRetryHandler(){
        return new DefaultHttpRequestRetryHandler(RETRY_COUNT,false);
      }
    }
;
    if (IDLE_TIMEOUT > 0) {
      ((AbstractHttpClient)httpClient).setKeepAliveStrategy(IDLE_STRATEGY);
    }
    ((AbstractHttpClient)httpClient).addResponseInterceptor(new ResponseContentEncoding());
    ((AbstractHttpClient)httpClient).addResponseInterceptor(METRICS_SAVER);
    ((AbstractHttpClient)httpClient).addRequestInterceptor(METRICS_RESETTER);
    SchemeRegistry schemeRegistry=httpClient.getConnectionManager().getSchemeRegistry();
    if (SLOW_HTTP != null) {
      schemeRegistry.register(SLOW_HTTP);
    }
    if (HTTPS_SCHEME != null) {
      schemeRegistry.register(HTTPS_SCHEME);
    }
    if (useProxy) {
      HttpHost proxy=new HttpHost(proxyHost,proxyPort);
      clientParams.setParameter(ConnRoutePNames.DEFAULT_PROXY,proxy);
      if (proxyUser.length() > 0) {
        ((AbstractHttpClient)httpClient).getCredentialsProvider().setCredentials(new AuthScope(proxyHost,proxyPort),new NTCredentials(proxyUser,proxyPass,localHost,PROXY_DOMAIN));
      }
    }
    clientParams.setParameter(ClientPNames.COOKIE_POLICY,CookieSpecs.IGNORE_COOKIES);
    if (log.isDebugEnabled()) {
      log.debug("Created new HttpClient: @" + System.identityHashCode(httpClient) + " "+ key.toString());
    }
    mapHttpClientPerHttpClientKey.put(key,httpClient);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug("Reusing the HttpClient: @" + System.identityHashCode(httpClient) + " "+ key.toString());
    }
  }
  MeasuringConnectionManager connectionManager=(MeasuringConnectionManager)httpClient.getConnectionManager();
  connectionManager.setSample(res);
  setConnectionAuthorization(httpClient,url,getAuthManager(),key);
  return httpClient;
}
