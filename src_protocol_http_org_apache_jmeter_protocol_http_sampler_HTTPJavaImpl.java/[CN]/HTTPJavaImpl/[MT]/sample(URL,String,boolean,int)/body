{
  HttpURLConnection conn=null;
  String urlStr=url.toString();
  if (log.isDebugEnabled()) {
    log.debug("Start : sample " + urlStr);
    log.debug("method " + method + " followingRedirect "+ areFollowingRedirect+ " depth "+ frameDepth);
  }
  HTTPSampleResult res=new HTTPSampleResult();
  res.setMonitor(isMonitor());
  res.setSampleLabel(urlStr);
  res.setURL(url);
  res.setHTTPMethod(method);
  res.sampleStart();
  final CacheManager cacheManager=getCacheManager();
  if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method)) {
    if (cacheManager.inCache(url)) {
      return updateSampleResultForResourceInCache(res);
    }
  }
  try {
    int retry=-1;
    for (; retry < MAX_CONN_RETRIES; retry++) {
      try {
        conn=setupConnection(url,method,res);
        savedConn=conn;
        conn.connect();
        break;
      }
 catch (      BindException e) {
        if (retry >= MAX_CONN_RETRIES) {
          log.error("Can't connect after " + retry + " retries, "+ e);
          throw e;
        }
        log.debug("Bind exception, try again");
        if (conn != null) {
          savedConn=null;
          conn.disconnect();
        }
        setUseKeepAlive(false);
      }
catch (      IOException e) {
        log.debug("Connection failed, giving up");
        throw e;
      }
    }
    if (retry > MAX_CONN_RETRIES) {
      throw new BindException();
    }
    if (method.equals(HTTPConstants.POST)) {
      String postBody=sendPostData(conn);
      res.setQueryString(postBody);
    }
 else     if (method.equals(HTTPConstants.PUT)) {
      String putBody=sendPutData(conn);
      res.setQueryString(putBody);
    }
    byte[] responseData=readResponse(conn,res);
    res.sampleEnd();
    res.setResponseData(responseData);
    @SuppressWarnings("null") int errorLevel=conn.getResponseCode();
    String respMsg=conn.getResponseMessage();
    String hdr=conn.getHeaderField(0);
    if (hdr == null) {
      hdr="(null)";
    }
    if (errorLevel == -1) {
      if (respMsg != null) {
        try {
          errorLevel=Integer.parseInt(respMsg.substring(0,3));
          log.warn("ResponseCode==-1; parsed " + respMsg + " as "+ errorLevel);
        }
 catch (        NumberFormatException e) {
          log.warn("ResponseCode==-1; could not parse " + respMsg + " hdr: "+ hdr);
        }
      }
 else {
        respMsg=hdr;
        log.warn("ResponseCode==-1 & null ResponseMessage. Header(0)= " + hdr);
      }
    }
    if (errorLevel == -1) {
      res.setResponseCode("(null)");
    }
 else {
      res.setResponseCode(Integer.toString(errorLevel));
    }
    res.setSuccessful(isSuccessCode(errorLevel));
    if (respMsg == null) {
      respMsg=hdr;
    }
    res.setResponseMessage(respMsg);
    String ct=conn.getContentType();
    if (ct != null) {
      res.setContentType(ct);
      res.setEncodingAndType(ct);
    }
    String responseHeaders=getResponseHeaders(conn);
    res.setResponseHeaders(responseHeaders);
    if (res.isRedirect()) {
      res.setRedirectLocation(conn.getHeaderField(HTTPConstants.HEADER_LOCATION));
    }
    res.setHeadersSize(responseHeaders.replaceAll("\n","\r\n").length() + 2);
    if (log.isDebugEnabled()) {
      log.debug("Response headersSize=" + res.getHeadersSize() + " bodySize="+ res.getBodySize()+ " Total="+ (res.getHeadersSize() + res.getBodySize()));
    }
    if (getAutoRedirects()) {
      res.setURL(conn.getURL());
    }
    saveConnectionCookies(conn,url,getCookieManager());
    if (cacheManager != null) {
      cacheManager.saveDetails(conn,res);
    }
    res=resultProcessing(areFollowingRedirect,frameDepth,res);
    log.debug("End : sample");
    return res;
  }
 catch (  IOException e) {
    res.sampleEnd();
    savedConn=null;
    if (conn != null) {
      conn.disconnect();
    }
    conn=null;
    return errorResult(e,res);
  }
 finally {
    savedConn=null;
    disconnect(conn);
  }
}
