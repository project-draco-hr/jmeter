{
  SSLManager sslmgr=null;
  if (PROTOCOL_HTTPS.equalsIgnoreCase(u.getProtocol())) {
    try {
      sslmgr=SSLManager.getInstance();
    }
 catch (    Exception e) {
      log.warn("Problem creating the SSLManager: ",e);
    }
  }
  final HttpURLConnection conn;
  final String proxyHost=getProxyHost();
  final int proxyPort=getProxyPortInt();
  if (proxyHost.length() > 0 && proxyPort > 0) {
    Proxy proxy=new Proxy(Proxy.Type.HTTP,new InetSocketAddress(proxyHost,proxyPort));
    conn=(HttpURLConnection)u.openConnection(proxy);
  }
 else {
    conn=(HttpURLConnection)u.openConnection();
  }
  conn.setInstanceFollowRedirects(getAutoRedirects());
  int cto=getConnectTimeout();
  if (cto > 0) {
    conn.setConnectTimeout(cto);
  }
  int rto=getResponseTimeout();
  if (rto > 0) {
    conn.setReadTimeout(rto);
  }
  if (HTTPConstantsInterface.PROTOCOL_HTTPS.equalsIgnoreCase(u.getProtocol())) {
    try {
      if (null != sslmgr) {
        sslmgr.setContext(conn);
      }
    }
 catch (    Exception e) {
      log.warn("Problem setting the SSLManager for the connection: ",e);
    }
  }
  if (getUseKeepAlive()) {
    conn.setRequestProperty(HEADER_CONNECTION,KEEP_ALIVE);
  }
 else {
    conn.setRequestProperty(HEADER_CONNECTION,CONNECTION_CLOSE);
  }
  conn.setRequestMethod(method);
  setConnectionHeaders(conn,u,getHeaderManager(),getCacheManager());
  String cookies=setConnectionCookie(conn,u,getCookieManager());
  setConnectionAuthorization(conn,u,getAuthManager());
  if (method.equals(POST)) {
    setPostHeaders(conn);
  }
 else   if (method.equals(PUT)) {
    setPutHeaders(conn);
  }
  if (res != null) {
    res.setRequestHeaders(getConnectionHeaders(conn));
    res.setCookies(cookies);
  }
  return conn;
}
