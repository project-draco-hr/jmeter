{
  HttpURLConnection conn=null;
  long t0=System.currentTimeMillis();
  HTTPSampleResult res=new HTTPSampleResult();
  log.debug("Start : sample");
  try {
    res.setSampleLabel(url.toString());
    if (log.isDebugEnabled()) {
      log.debug("sample2 : sampling url - " + url);
    }
    int retry;
    for (retry=1; retry <= 10; retry++) {
      try {
        conn=setupConnection(url,method,res);
        t0=System.currentTimeMillis();
        conn.connect();
        break;
      }
 catch (      BindException e) {
        if (retry == 10) {
          log.error("Can't connect",e);
          throw e;
        }
        log.debug("Bind exception, try again");
        conn.disconnect();
        this.setUseKeepAlive(false);
        continue;
      }
catch (      IOException e) {
        log.debug("Connection failed, giving up");
        conn.disconnect();
        throw e;
      }
    }
    if (retry > 10) {
      throw new BindException();
    }
    if (getMethod().equals(HTTPSampler.POST)) {
      sendPostData(conn);
    }
    byte[] responseData=readResponse(conn);
    long t1=System.currentTimeMillis();
    res.setResponseData(responseData);
    int errorLevel=conn.getResponseCode();
    res.setResponseCode(Integer.toString(errorLevel));
    res.setSuccessful(200 <= errorLevel && errorLevel <= 399);
    res.setResponseMessage(conn.getResponseMessage());
    String ct=conn.getHeaderField("Content-type");
    res.setContentType(ct);
    if (ct.startsWith("image/")) {
      res.setDataType(HTTPSampleResult.BINARY);
    }
 else {
      res.setDataType(HTTPSampleResult.TEXT);
    }
    res.setResponseHeaders(getResponseHeaders(conn));
    if (res.isRedirect()) {
      res.setRedirectLocation(conn.getHeaderField("Location"));
    }
    res.setTime(t1 - t0);
    saveConnectionCookies(conn,url,getCookieManager());
    if (!areFollowingRedirect) {
      boolean didFollowRedirects=false;
      if (res.isRedirect()) {
        if (log.isDebugEnabled()) {
          log.debug("Location set to - " + res.getRedirectLocation());
        }
        if (getFollowRedirects()) {
          res=followRedirects(res,frameDepth);
          didFollowRedirects=true;
        }
      }
      if (isImageParser() && res.getDataType().equals(HTTPSampleResult.TEXT)) {
        if (frameDepth > MAX_FRAME_DEPTH) {
          res.addSubResult(errorResult(new Exception("Maximum frame/iframe nesting depth exceeded."),0));
        }
 else {
          boolean createContainerResults=!didFollowRedirects;
          res=downloadPageResources(res,createContainerResults,frameDepth);
        }
      }
    }
    log.debug("End : sample");
    return res;
  }
 catch (  MalformedURLException e) {
    return errorResult(e,System.currentTimeMillis() - t0);
  }
catch (  IOException e) {
    return errorResult(e,System.currentTimeMillis() - t0);
  }
 finally {
    disconnect(conn);
  }
}
