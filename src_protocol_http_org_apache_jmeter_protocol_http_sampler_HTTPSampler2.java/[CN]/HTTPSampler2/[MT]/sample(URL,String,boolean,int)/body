{
  String urlStr=url.toString();
  log.debug("Start : sample" + urlStr);
  log.debug("method" + method);
  httpMethod=null;
  HTTPSampleResult res=new HTTPSampleResult();
  if (this.getPropertyAsBoolean(MONITOR)) {
    res.setMonitor(true);
  }
 else {
    res.setMonitor(false);
  }
  res.setSampleLabel(urlStr);
  res.sampleStart();
  try {
    HttpConnection connection=setupConnection(url,method,res);
    if (method.equals(POST)) {
      sendPostData(httpMethod);
    }
    int statusCode=httpMethod.execute(httpState,connection);
    byte[] responseData=httpMethod.getResponseBody();
    res.sampleEnd();
    res.setSampleLabel(httpMethod.getPath());
    res.setResponseData(responseData);
    res.setResponseCode(Integer.toString(statusCode));
    res.setSuccessful(200 <= statusCode && statusCode <= 399);
    res.setResponseMessage(httpMethod.getStatusText());
    String ct=httpMethod.getResponseHeader("Content-Type").getValue();
    res.setContentType(ct);
    if (ct != null) {
      String de=ct.toLowerCase();
      final String cs="charset=";
      int cset=de.indexOf(cs);
      if (cset >= 0) {
        res.setDataEncoding(de.substring(cset + cs.length()));
      }
      if (ct.startsWith("image/")) {
        res.setDataType(HTTPSampleResult.BINARY);
      }
 else {
        res.setDataType(HTTPSampleResult.TEXT);
      }
    }
    res.setResponseHeaders(getResponseHeaders(httpMethod));
    if (res.isRedirect()) {
      res.setRedirectLocation(httpMethod.getResponseHeader("Location").getValue());
    }
    saveConnectionCookies(httpState,getCookieManager());
    if (!areFollowingRedirect) {
      boolean didFollowRedirects=false;
      if (res.isRedirect()) {
        log.debug("Location set to - " + res.getRedirectLocation());
        if (getFollowRedirects()) {
          res=followRedirects(res,frameDepth);
          didFollowRedirects=true;
        }
      }
      if (isImageParser() && (HTTPSampleResult.TEXT).equals(res.getDataType()) && res.isSuccessful()) {
        if (frameDepth > MAX_FRAME_DEPTH) {
          res.addSubResult(errorResult(new Exception("Maximum frame/iframe nesting depth exceeded."),null,0));
        }
 else {
          boolean createContainerResults=!didFollowRedirects;
          res=downloadPageResources(res,createContainerResults,frameDepth);
        }
      }
    }
    log.debug("End : sample");
    if (httpMethod != null)     httpMethod.releaseConnection();
    return res;
  }
 catch (  IllegalArgumentException e) {
    res.sampleEnd();
    HTTPSampleResult err=errorResult(e,url.toString(),res.getTime());
    err.setSampleLabel("Error: " + url.toString());
    return err;
  }
catch (  IOException e) {
    res.sampleEnd();
    HTTPSampleResult err=errorResult(e,url.toString(),res.getTime());
    err.setSampleLabel("Error: " + url.toString());
    return err;
  }
 finally {
    if (httpMethod != null)     httpMethod.releaseConnection();
  }
}
