{
  StringBuffer postedBody=new StringBuffer(1000);
  if (getUseMultipartForPost()) {
    String contentEncoding=getContentEncoding();
    if (contentEncoding != null && contentEncoding.length() == 0) {
      contentEncoding=null;
    }
    int noParts=getArguments().getArgumentCount();
    if (hasUploadableFiles()) {
      noParts++;
    }
    Part[] parts=new Part[noParts];
    int partNo=0;
    PropertyIterator args=getArguments().iterator();
    while (args.hasNext()) {
      HTTPArgument arg=(HTTPArgument)args.next().getObjectValue();
      parts[partNo++]=new StringPart(arg.getName(),arg.getValue(),contentEncoding);
    }
    if (hasUploadableFiles()) {
      File inputFile=new File(getFilename());
      ViewableFilePart filePart=new ViewableFilePart(getFileField(),inputFile,getMimetype(),null);
      filePart.setCharSet(null);
      parts[partNo++]=filePart;
    }
    MultipartRequestEntity multiPart=new MultipartRequestEntity(parts,post.getParams());
    post.setRequestEntity(multiPart);
    String multiPartContentType=multiPart.getContentType();
    post.setRequestHeader(HEADER_CONTENT_TYPE,multiPartContentType);
    if (multiPart.isRepeatable()) {
      for (int i=0; i < partNo; i++) {
        if (parts[i] instanceof ViewableFilePart) {
          ((ViewableFilePart)parts[i]).setHideFileData(true);
        }
      }
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      multiPart.writeRequest(bos);
      bos.flush();
      postedBody.append(new String(bos.toByteArray(),"UTF-8"));
      bos.close();
      for (int i=0; i < partNo; i++) {
        if (parts[i] instanceof ViewableFilePart) {
          ((ViewableFilePart)parts[i]).setHideFileData(false);
        }
      }
    }
 else {
      postedBody.append("<Multipart was not repeatable, cannot view what was sent>");
    }
  }
 else {
    post.setRequestHeader(HEADER_CONTENT_TYPE,APPLICATION_X_WWW_FORM_URLENCODED);
    if (getArguments().getArgumentCount() == 0 && getSendFileAsPostBody()) {
      FileRequestEntity fileRequestEntity=new FileRequestEntity(new File(getFilename()),null);
      post.setRequestEntity(fileRequestEntity);
      postedBody.append("<actual file content, not shown here>");
    }
 else {
      final String contentEncoding=getContentEncoding();
      if (contentEncoding != null && contentEncoding.trim().length() > 0) {
        post.getParams().setContentCharset(contentEncoding);
      }
      PropertyIterator args=getArguments().iterator();
      while (args.hasNext()) {
        HTTPArgument arg=(HTTPArgument)args.next().getObjectValue();
        post.addParameter(arg.getName(),arg.getValue());
      }
      if (post.getRequestEntity().isRepeatable()) {
        ByteArrayOutputStream bos=new ByteArrayOutputStream();
        post.getRequestEntity().writeRequest(bos);
        bos.flush();
        postedBody.append(new String(bos.toByteArray(),"UTF-8"));
        bos.close();
      }
 else {
        postedBody.append("<Multipart was not repeatable, cannot view what was sent>");
      }
    }
  }
  post.setRequestHeader(HEADER_CONTENT_LENGTH,Long.toString(post.getRequestEntity().getContentLength()));
  return postedBody.toString();
}
