{
  String urlStr=u.toString();
  org.apache.commons.httpclient.URI uri=new org.apache.commons.httpclient.URI(urlStr,false);
  String schema=uri.getScheme();
  if ((schema == null) || (schema.length() == 0)) {
    schema=PROTOCOL_HTTP;
  }
  Protocol protocol=Protocol.getProtocol(schema);
  String host=uri.getHost();
  int port=uri.getPort();
  HostConfiguration hc=new HostConfiguration();
  hc.setHost(host,port,protocol);
  Map map=(Map)httpClients.get();
  HttpClient httpClient=(HttpClient)map.get(hc);
  if (httpClient == null) {
    httpClient=new HttpClient(new SimpleHttpConnectionManager());
    map.put(hc,httpClient);
  }
  if (PROXY_HOST.length() > 0) {
    hc.setProxy(PROXY_HOST,PROXY_PORT);
    if (PROXY_USER.length() > 0) {
      httpClient.getState().setProxyCredentials(new AuthScope(PROXY_HOST,PROXY_PORT,null,AuthScope.ANY_SCHEME),new NTCredentials(PROXY_USER,PROXY_PASS,null,null));
    }
  }
  HttpMethodParams params=httpMethod.getParams();
  params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
  params.setVersion(JMeterUtils.getPropDefault("httpclient.version","1.1").equals("1.0") ? HttpVersion.HTTP_1_0 : HttpVersion.HTTP_1_1);
  params.setSoTimeout(JMeterUtils.getPropDefault("httpclient.timeout",0));
  httpMethod.setFollowRedirects(getPropertyAsBoolean(AUTO_REDIRECTS));
  if (getUseKeepAlive()) {
    httpMethod.setRequestHeader(HEADER_CONNECTION,KEEP_ALIVE);
  }
 else {
    httpMethod.setRequestHeader(HEADER_CONNECTION,CONNECTION_CLOSE);
  }
  String hdrs=setConnectionHeaders(httpMethod,u,getHeaderManager());
  String cookies=setConnectionCookie(httpClient,u,getCookieManager());
  if (res != null) {
    res.setURL(u);
    res.setRequestHeaders(hdrs);
    res.setCookies(cookies);
  }
  setConnectionAuthorization(httpClient,u,getAuthManager());
  return httpClient;
}
