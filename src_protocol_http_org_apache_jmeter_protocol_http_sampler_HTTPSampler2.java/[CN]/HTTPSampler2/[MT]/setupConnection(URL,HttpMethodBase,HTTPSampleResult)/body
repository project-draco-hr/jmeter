{
  String urlStr=u.toString();
  org.apache.commons.httpclient.URI uri=new org.apache.commons.httpclient.URI(urlStr,false);
  String schema=uri.getScheme();
  if ((schema == null) || (schema.length() == 0)) {
    schema=PROTOCOL_HTTP;
  }
  if (PROTOCOL_HTTPS.equalsIgnoreCase(schema)) {
    SSLManager.getInstance();
  }
  Protocol protocol=Protocol.getProtocol(schema);
  String host=uri.getHost();
  int port=uri.getPort();
  HostConfiguration hc=new HostConfiguration();
  hc.setHost(host,port,protocol);
  if (localAddress != null) {
    hc.setLocalAddress(localAddress);
  }
  boolean useProxy=PROXY_DEFINED && !isNonProxy(host);
  if (useProxy) {
    if (log.isDebugEnabled()) {
      log.debug("Setting proxy: " + PROXY_HOST + ":"+ PROXY_PORT);
    }
    hc.setProxy(PROXY_HOST,PROXY_PORT);
  }
  Map map=(Map)httpClients.get();
  HttpClient httpClient=(HttpClient)map.get(hc);
  if (httpClient == null) {
    httpClient=new HttpClient(new SimpleHttpConnectionManager());
    if (log.isDebugEnabled()) {
      log.debug("Created new HttpClient: @" + System.identityHashCode(httpClient));
    }
    httpClient.setHostConfiguration(hc);
    map.put(hc,httpClient);
    if (useProxy) {
      if (PROXY_USER.length() > 0) {
        httpClient.getState().setProxyCredentials(new AuthScope(PROXY_HOST,PROXY_PORT,null,AuthScope.ANY_SCHEME),new NTCredentials(PROXY_USER,PROXY_PASS,localHost,PROXY_DOMAIN));
      }
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug("Reusing the HttpClient: @" + System.identityHashCode(httpClient));
    }
  }
  httpMethod.setFollowRedirects(getAutoRedirects());
  if (getUseKeepAlive()) {
    httpMethod.setRequestHeader(HEADER_CONNECTION,KEEP_ALIVE);
  }
 else {
    httpMethod.setRequestHeader(HEADER_CONNECTION,CONNECTION_CLOSE);
  }
  setConnectionHeaders(httpMethod,u,getHeaderManager());
  String cookies=setConnectionCookie(httpMethod,u,getCookieManager());
  setConnectionAuthorization(httpClient,u,getAuthManager());
  if (res != null) {
    res.setURL(u);
    res.setCookies(cookies);
  }
  return httpClient;
}
