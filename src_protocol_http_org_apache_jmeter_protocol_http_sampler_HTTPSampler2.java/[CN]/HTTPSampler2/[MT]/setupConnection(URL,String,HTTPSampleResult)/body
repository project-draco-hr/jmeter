{
  String urlStr=u.toString();
  org.apache.commons.httpclient.URI uri=new org.apache.commons.httpclient.URI(urlStr);
  String schema=uri.getScheme();
  if ((schema == null) || (schema.equals(""))) {
    schema=PROTOCOL_HTTP;
  }
  Protocol protocol=Protocol.getProtocol(schema);
  String host=uri.getHost();
  int port=uri.getPort();
  HostConfiguration hc=new HostConfiguration();
  hc.setHost(host,port,protocol);
  HttpConnection httpConn=null;
  Map map=(Map)httpClients.get();
synchronized (map) {
    httpConn=(HttpConnection)map.get(hc);
    if (httpConn == null) {
      httpConn=new HttpConnection(hc);
      httpConn.setProxyHost(System.getProperty("http.proxyHost"));
      httpConn.setProxyPort(Integer.parseInt(System.getProperty("http.proxyPort","80")));
      map.put(hc,httpConn);
    }
  }
  if (method.equals(POST)) {
    httpMethod=new PostMethod(urlStr);
  }
 else {
    httpMethod=new GetMethod(urlStr);
    new DefaultMethodRetryHandler();
  }
  httpMethod.setHttp11(!JMeterUtils.getPropDefault("httpclient.version","1.1").equals("1.0"));
  httpConn.setSoTimeout(JMeterUtils.getPropDefault("httpclient.timeout",0));
  httpState=new HttpState();
  if (httpConn.isProxied() && httpConn.isSecure()) {
    httpMethod=new ConnectMethod(httpMethod);
  }
  httpMethod.setFollowRedirects(getPropertyAsBoolean(AUTO_REDIRECTS));
  if (getUseKeepAlive()) {
    httpMethod.setRequestHeader("Connection","keep-alive");
  }
 else {
    httpMethod.setRequestHeader("Connection","close");
  }
  String hdrs=setConnectionHeaders(httpMethod,u,getHeaderManager());
  String cookies=setConnectionCookie(httpMethod,u,getCookieManager());
  if (res != null) {
    res.setURL(u);
    res.setHTTPMethod(method);
    res.setRequestHeaders(hdrs);
    res.setCookies(cookies);
    if (method.equals(POST)) {
      res.setQueryString(getQueryString());
    }
  }
  setConnectionAuthorization(httpMethod,u,getAuthManager());
  if (method.equals(POST)) {
    setPostHeaders((PostMethod)httpMethod);
  }
  return httpConn;
}
