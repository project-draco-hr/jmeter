{
  Iterator<URL> urls=null;
  try {
    final byte[] responseData=res.getResponseData();
    if (responseData.length > 0) {
      String parserName=getParserClass(res);
      if (parserName != null) {
        final HTMLParser parser=parserName.length() > 0 ? HTMLParser.getParser(parserName) : HTMLParser.getParser();
        urls=parser.getEmbeddedResourceURLs(responseData,res.getURL());
      }
    }
  }
 catch (  HTMLParseException e) {
    res.addSubResult(errorResult(e,res));
    res.setSuccessful(false);
  }
  if (urls != null && urls.hasNext()) {
    if (container == null) {
      container=new HTTPSampleResult(res);
      container.addRawSubResult(res);
    }
    res=container;
    String re=getEmbeddedUrlRE();
    Perl5Matcher localMatcher=null;
    Pattern pattern=null;
    if (re.length() > 0) {
      try {
        pattern=JMeterUtils.getPattern(re);
        localMatcher=JMeterUtils.getMatcher();
      }
 catch (      MalformedCachePatternException e) {
        log.warn("Ignoring embedded URL match string: " + e.getMessage());
      }
    }
    final List<Callable<HTTPSampleResult>> liste=new ArrayList<Callable<HTTPSampleResult>>();
    while (urls.hasNext()) {
      Object binURL=urls.next();
      try {
        URL url=(URL)binURL;
        if (url == null) {
          log.warn("Null URL detected (should not happen)");
        }
 else {
          String urlstr=url.toString();
          String urlStrEnc=encodeSpaces(urlstr);
          if (!urlstr.equals(urlStrEnc)) {
            try {
              url=new URL(urlStrEnc);
            }
 catch (            MalformedURLException e) {
              res.addSubResult(errorResult(new Exception(urlStrEnc + " is not a correct URI"),res));
              res.setSuccessful(false);
              continue;
            }
          }
          if (pattern != null && localMatcher != null && !localMatcher.matches(urlStrEnc,pattern)) {
            continue;
          }
          if (isConcurrentDwn()) {
            liste.add(new ASyncSample(url,GET,false,frameDepth + 1));
          }
 else {
            HTTPSampleResult binRes=sample(url,GET,false,frameDepth + 1);
            res.addSubResult(binRes);
            res.setSuccessful(res.isSuccessful() && binRes.isSuccessful());
          }
        }
      }
 catch (      ClassCastException e) {
        res.addSubResult(errorResult(new Exception(binURL + " is not a correct URI"),res));
        res.setSuccessful(false);
        continue;
      }
    }
    if (isConcurrentDwn()) {
      int poolSize=CONCURRENT_POOL_SIZE;
      try {
        poolSize=Integer.parseInt(getConcurrentPool());
      }
 catch (      NumberFormatException nfe) {
        log.warn("Concurrent download resources selected, " + "but pool size value is bad. Use default value");
      }
      final ThreadPoolExecutor exec=new ThreadPoolExecutor(poolSize,poolSize,KEEPALIVETIME,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
      boolean tasksCompleted=false;
      try {
        final List<Future<HTTPSampleResult>> retExec=exec.invokeAll(liste);
        exec.shutdown();
        exec.awaitTermination(AWAIT_TERMINATION_TIMEOUT,TimeUnit.SECONDS);
        for (        Future<HTTPSampleResult> future : retExec) {
          HTTPSampleResult binRes;
          try {
            binRes=future.get(1,TimeUnit.MILLISECONDS);
            res.addSubResult(binRes);
            res.setSuccessful(res.isSuccessful() && binRes.isSuccessful());
          }
 catch (          TimeoutException e) {
            errorResult(e,res);
          }
        }
        tasksCompleted=exec.awaitTermination(1,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException ie) {
        log.warn("Interruped fetching embedded resources",ie);
      }
catch (      ExecutionException ee) {
        log.warn("Execution issue when fetching embedded resources",ee);
      }
 finally {
        if (!tasksCompleted) {
          exec.shutdownNow();
        }
      }
    }
  }
  return res;
}
