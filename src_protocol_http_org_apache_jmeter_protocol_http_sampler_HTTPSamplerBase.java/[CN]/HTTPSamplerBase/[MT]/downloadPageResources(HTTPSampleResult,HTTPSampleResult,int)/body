{
  Iterator urls=null;
  try {
    final byte[] responseData=res.getResponseData();
    if (responseData.length > 0) {
      String parserName=getParserClass(res);
      if (parserName != null) {
        final HTMLParser parser=parserName.length() > 0 ? HTMLParser.getParser(parserName) : HTMLParser.getParser();
        urls=parser.getEmbeddedResourceURLs(responseData,res.getURL());
      }
    }
  }
 catch (  HTMLParseException e) {
    res.addSubResult(errorResult(e,res));
    res.setSuccessful(false);
  }
  if (urls != null && urls.hasNext()) {
    if (container == null) {
      res=new HTTPSampleResult(res);
    }
 else {
      res=container;
    }
    while (urls.hasNext()) {
      Object binURL=urls.next();
      try {
        URL url=(URL)binURL;
        String urlstr=url.toString();
        String urlStrEnc=encodeSpaces(urlstr);
        if (!urlstr.equals(urlStrEnc)) {
          try {
            url=new URL(urlStrEnc);
          }
 catch (          MalformedURLException e) {
            res.addSubResult(errorResult(new Exception(urlStrEnc + " is not a correct URI"),res));
            res.setSuccessful(false);
            continue;
          }
        }
        HTTPSampleResult binRes=sample(url,GET,false,frameDepth + 1);
        res.addSubResult(binRes);
        res.setSuccessful(res.isSuccessful() && binRes.isSuccessful());
      }
 catch (      ClassCastException e) {
        res.addSubResult(errorResult(new Exception(binURL + " is not a correct URI"),res));
        res.setSuccessful(false);
        continue;
      }
    }
  }
  return res;
}
