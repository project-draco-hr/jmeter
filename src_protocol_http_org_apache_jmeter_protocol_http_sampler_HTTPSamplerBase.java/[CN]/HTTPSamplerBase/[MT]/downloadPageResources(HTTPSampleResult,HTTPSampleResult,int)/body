{
  Iterator<URL> urls=null;
  try {
    final byte[] responseData=res.getResponseData();
    if (responseData.length > 0) {
      final LinkExtractorParser parser=getParser(res);
      if (parser != null) {
        String userAgent=getUserAgent(res);
        urls=parser.getEmbeddedResourceURLs(userAgent,responseData,res.getURL(),res.getDataEncodingWithDefault());
      }
    }
  }
 catch (  LinkExtractorParseException e) {
    res.addSubResult(errorResult(e,new HTTPSampleResult(res)));
    setParentSampleSuccess(res,false);
  }
  if (urls != null && urls.hasNext()) {
    if (container == null) {
      container=new HTTPSampleResult(res);
      container.addRawSubResult(res);
    }
    res=container;
    String re=getEmbeddedUrlRE();
    Perl5Matcher localMatcher=null;
    Pattern pattern=null;
    if (re.length() > 0) {
      try {
        pattern=JMeterUtils.getPattern(re);
        localMatcher=JMeterUtils.getMatcher();
      }
 catch (      MalformedCachePatternException e) {
        log.warn("Ignoring embedded URL match string: " + e.getMessage());
      }
    }
    final List<Callable<AsynSamplerResultHolder>> list=new ArrayList<>();
    int maxConcurrentDownloads=CONCURRENT_POOL_SIZE;
    boolean isConcurrentDwn=isConcurrentDwn();
    if (isConcurrentDwn) {
      try {
        maxConcurrentDownloads=Integer.parseInt(getConcurrentPool());
      }
 catch (      NumberFormatException nfe) {
        log.warn("Concurrent download resources selected, " + "but pool size value is bad. Use default value");
      }
      if (maxConcurrentDownloads == 1) {
        log.warn("Number of parallel downloads set to 1, (sampler name=" + getName() + ")");
        isConcurrentDwn=false;
      }
    }
    while (urls.hasNext()) {
      Object binURL=urls.next();
      try {
        URL url=(URL)binURL;
        if (url == null) {
          log.warn("Null URL detected (should not happen)");
        }
 else {
          try {
            url=escapeIllegalURLCharacters(url);
          }
 catch (          Exception e) {
            res.addSubResult(errorResult(new Exception(url.toString() + " is not a correct URI"),new HTTPSampleResult(res)));
            setParentSampleSuccess(res,false);
            continue;
          }
          if (pattern != null && localMatcher != null && !localMatcher.matches(url.toString(),pattern)) {
            continue;
          }
          try {
            url=url.toURI().normalize().toURL();
          }
 catch (          MalformedURLException|URISyntaxException e) {
            res.addSubResult(errorResult(new Exception(url.toString() + " URI can not be normalized",e),new HTTPSampleResult(res)));
            setParentSampleSuccess(res,false);
            continue;
          }
          if (isConcurrentDwn) {
            list.add(new ASyncSample(url,HTTPConstants.GET,false,frameDepth + 1,getCookieManager(),this));
          }
 else {
            HTTPSampleResult binRes=sample(url,HTTPConstants.GET,false,frameDepth + 1);
            res.addSubResult(binRes);
            setParentSampleSuccess(res,res.isSuccessful() && (binRes == null || binRes.isSuccessful()));
          }
        }
      }
 catch (      ClassCastException e) {
        res.addSubResult(errorResult(new Exception(binURL + " is not a correct URI"),new HTTPSampleResult(res)));
        setParentSampleSuccess(res,false);
      }
    }
    if (isConcurrentDwn && !list.isEmpty()) {
      ResourcesDownloader resourcesDownloader=ResourcesDownloader.getInstance();
      try {
        final List<Future<AsynSamplerResultHolder>> retExec=resourcesDownloader.invokeAllAndAwaitTermination(maxConcurrentDownloads,list);
        CookieManager cookieManager=getCookieManager();
        for (        Future<AsynSamplerResultHolder> future : retExec) {
          AsynSamplerResultHolder binRes=future.get();
          if (cookieManager != null) {
            CollectionProperty cookies=binRes.getCookies();
            for (            JMeterProperty jMeterProperty : cookies) {
              Cookie cookie=(Cookie)jMeterProperty.getObjectValue();
              cookieManager.add(cookie);
            }
          }
          res.addSubResult(binRes.getResult());
          setParentSampleSuccess(res,res.isSuccessful() && (binRes.getResult() != null ? binRes.getResult().isSuccessful() : true));
        }
      }
 catch (      InterruptedException ie) {
        log.warn("Interrupted fetching embedded resources",ie);
      }
catch (      ExecutionException ee) {
        log.warn("Execution issue when fetching embedded resources",ee);
      }
    }
  }
  return res;
}
