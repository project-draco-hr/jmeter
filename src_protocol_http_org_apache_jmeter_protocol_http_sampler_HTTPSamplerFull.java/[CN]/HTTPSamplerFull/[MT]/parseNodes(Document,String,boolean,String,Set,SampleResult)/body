{
  catClass.debug("Start : HTTPSamplerFull parseNodes");
  NodeList nodeList=html.getElementsByTagName(htmlTag);
  boolean uniqueBinary;
  SampleResult binRes=null;
  for (int i=0; i < nodeList.getLength(); i++) {
    uniqueBinary=true;
    Node tempNode=nodeList.item(i);
    if (catClass.isDebugEnabled()) {
      catClass.debug("'" + htmlTag + "' tag: "+ tempNode);
    }
    NamedNodeMap nnm=tempNode.getAttributes();
    Node namedItem=null;
    if (type) {
      namedItem=nnm.getNamedItem("type");
      if (namedItem == null) {
        catClass.debug("namedItem 'null' - ignoring");
        break;
      }
      String inputType=namedItem.getNodeValue();
      if (catClass.isDebugEnabled()) {
        catClass.debug("Input type - " + inputType);
      }
      if (inputType != null && inputType.equalsIgnoreCase("image")) {
      }
 else {
        catClass.debug("type != 'image' - ignoring");
        break;
      }
    }
    binRes=new SampleResult();
    namedItem=nnm.getNamedItem(srcTag);
    if (namedItem == null) {
      continue;
    }
    String binUrlStr=namedItem.getNodeValue();
    binRes.setSampleLabel(baseUrl + "," + binUrlStr);
    URL binUrl=null;
    try {
      binUrl=new URL(baseUrl,binUrlStr);
    }
 catch (    MalformedURLException mfue) {
      catClass.error("Error creating URL '" + baseUrl + " , "+ binUrlStr+ "'");
      catClass.error("MalformedURLException - " + mfue);
      binRes.setResponseData(mfue.toString().getBytes());
      binRes.setResponseCode(NON_HTTP_RESPONSE_CODE);
      binRes.setResponseMessage(NON_HTTP_RESPONSE_MESSAGE);
      binRes.setSuccessful(false);
      res.addSubResult(binRes);
      break;
    }
    if (catClass.isDebugEnabled()) {
      catClass.debug("Binary url - " + binUrlStr);
      catClass.debug("Full Binary url - " + binUrl);
    }
    binRes.setSampleLabel(binUrl.toString());
    uniqueBinary=uniques.add(binUrl.toString());
    if (uniqueBinary) {
      try {
        loadBinary(binUrl,binRes);
      }
 catch (      IOException ioe) {
        catClass.error("Error reading from URL - " + ioe);
        binRes.setResponseData(ioe.toString().getBytes());
        binRes.setResponseCode(NON_HTTP_RESPONSE_CODE);
        binRes.setResponseMessage(NON_HTTP_RESPONSE_MESSAGE);
        binRes.setSuccessful(false);
      }
    }
 else {
      if (catClass.isDebugEnabled()) {
        catClass.debug("Skipping duplicate - " + binUrl);
      }
      break;
    }
    catClass.debug("Adding result");
    res.addSubResult(binRes);
    res.setTime(res.getTime() + binRes.getTime());
  }
  catClass.debug("End   : HTTPSamplerFull parseNodes");
}
