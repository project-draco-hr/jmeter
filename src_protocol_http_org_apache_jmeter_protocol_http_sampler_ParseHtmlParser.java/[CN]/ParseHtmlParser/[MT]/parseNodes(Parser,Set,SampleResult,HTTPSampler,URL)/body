{
  if (log.isDebugEnabled()) {
    log.debug("Start	: NewHTTPSamplerFull");
  }
  boolean uniqueBinary;
  SampleResult binRes=null;
  try {
    for (NodeIterator e=parser.elements(); e.hasMoreNodes(); ) {
      uniqueBinary=true;
      Node node=e.nextNode();
      String binUrlStr=null;
      if (node instanceof BodyTag) {
        BodyTag body=(BodyTag)node;
        binUrlStr=body.getAttribute("background");
        e=body.elements();
      }
 else       if (node instanceof ImageTag) {
        ImageTag image=(ImageTag)node;
        binUrlStr=image.getImageURL();
      }
 else       if (node instanceof AppletTag) {
        AppletTag applet=(AppletTag)node;
        binUrlStr=applet.getAppletClass();
      }
 else       if (node instanceof InputTag) {
        InputTag input=(InputTag)node;
        String strType=input.getAttribute("type");
        if (strType != null && strType.equalsIgnoreCase("image")) {
          binUrlStr=input.getAttribute("src");
        }
      }
      binRes=new SampleResult();
      if (binUrlStr == null) {
        continue;
      }
      binRes.setSampleLabel(baseUrl + "," + binUrlStr);
      URL binUrl=null;
      try {
        binUrl=new URL(baseUrl,binUrlStr);
      }
 catch (      MalformedURLException mfue) {
        log.error("Error creating URL '" + baseUrl + " , "+ binUrlStr+ "'");
        log.error("MalformedURLException - " + mfue);
        binRes.setResponseData(mfue.toString().getBytes());
        binRes.setResponseCode(HTTPSampler.NON_HTTP_RESPONSE_CODE);
        binRes.setResponseMessage(HTTPSampler.NON_HTTP_RESPONSE_MESSAGE);
        binRes.setSuccessful(false);
        res.addSubResult(binRes);
        break;
      }
      if (log.isDebugEnabled()) {
        log.debug("Binary url - " + binUrlStr);
        log.debug("Full Binary url - " + binUrl);
      }
      binRes.setSampleLabel(binUrl.toString());
      uniqueBinary=uniques.add(binUrl.toString());
      if (uniqueBinary) {
        try {
          HTTPSamplerFull.loadBinary(binUrl,binRes,sampler);
        }
 catch (        Exception ioe) {
          log.error("Error reading from URL - " + ioe);
          binRes.setResponseData(ioe.toString().getBytes());
          binRes.setResponseCode(HTTPSampler.NON_HTTP_RESPONSE_CODE);
          binRes.setResponseMessage(HTTPSampler.NON_HTTP_RESPONSE_MESSAGE);
          binRes.setSuccessful(false);
        }
        log.debug("Adding result");
        res.addSubResult(binRes);
        res.setTime(res.getTime() + binRes.getTime());
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug("Skipping duplicate - " + binUrl);
        }
      }
    }
    log.debug("End   : NewHTTPSamplerFull parseNodes");
  }
 catch (  ParserException e) {
  }
}
