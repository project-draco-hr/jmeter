{
  URL baseUrl;
  String displayName=res.getSampleLabel();
  try {
    baseUrl=sampler.getUrl();
    if (log.isDebugEnabled()) {
      log.debug("baseUrl - " + baseUrl.toString());
    }
  }
 catch (  MalformedURLException mfue) {
    log.error("Error creating URL '" + displayName + "'");
    log.error("MalformedURLException - " + mfue);
    res.setResponseData(mfue.toString().getBytes());
    res.setResponseCode(HTTPSampler.NON_HTTP_RESPONSE_CODE);
    res.setResponseMessage(HTTPSampler.NON_HTTP_RESPONSE_MESSAGE);
    res.setSuccessful(false);
    return res;
  }
  Set uniqueRLs=new LinkedHashSet();
  Matcher matcher=(Matcher)localMatcher.get();
  matcher.reset(new ByteArrayCharSequence(res.getResponseData()));
  while (matcher.find()) {
    String s;
    if (log.isDebugEnabled())     log.debug("match groups " + matcher.groupCount());
    s=matcher.group(1);
    if (s != null) {
      try {
        baseUrl=new URL(baseUrl,s);
        log.debug("new baseUrl from - " + s + " - "+ baseUrl.toString());
      }
 catch (      MalformedURLException mfue) {
        log.error("Error creating base URL from BASE HREF '" + displayName + "'");
        log.error("MalformedURLException - " + mfue);
        res.setResponseData(mfue.toString().getBytes());
        res.setResponseCode(HTTPSampler.NON_HTTP_RESPONSE_CODE);
        res.setResponseMessage(HTTPSampler.NON_HTTP_RESPONSE_MESSAGE);
        res.setSuccessful(false);
        return res;
      }
    }
    for (int g=2; g < matcher.groupCount(); g++) {
      s=matcher.group(g);
      if (log.isDebugEnabled())       log.debug("group " + g + " - "+ s);
      if (s != null)       uniqueRLs.add(s);
    }
  }
  Iterator rls=uniqueRLs.iterator();
  while (rls.hasNext()) {
    String binUrlStr=(String)rls.next();
    SampleResult binRes=new SampleResult();
    binRes.setSampleLabel(baseUrl + "," + binUrlStr);
    URL binUrl;
    try {
      binUrl=new URL(baseUrl,binUrlStr);
    }
 catch (    MalformedURLException mfue) {
      log.error("Error creating URL '" + baseUrl + " , "+ binUrlStr+ "'");
      log.error("MalformedURLException - " + mfue);
      binRes.setResponseData(mfue.toString().getBytes());
      binRes.setResponseCode(HTTPSampler.NON_HTTP_RESPONSE_CODE);
      binRes.setResponseMessage(HTTPSampler.NON_HTTP_RESPONSE_MESSAGE);
      binRes.setSuccessful(false);
      res.addSubResult(binRes);
      break;
    }
    if (log.isDebugEnabled()) {
      log.debug("Binary url - " + binUrlStr);
      log.debug("Full Binary url - " + binUrl);
    }
    binRes.setSampleLabel(binUrl.toString());
    try {
      HTTPSamplerFull.loadBinary(binUrl,binRes,sampler);
    }
 catch (    Exception ioe) {
      log.error("Error reading from URL - " + ioe);
      binRes.setResponseData(ioe.toString().getBytes());
      binRes.setResponseCode(HTTPSampler.NON_HTTP_RESPONSE_CODE);
      binRes.setResponseMessage(HTTPSampler.NON_HTTP_RESPONSE_MESSAGE);
      binRes.setSuccessful(false);
    }
    log.debug("Adding result");
    res.addSubResult(binRes);
    res.setTime(res.getTime() + binRes.getTime());
  }
  if (log.isDebugEnabled()) {
    log.debug("Total time - " + res.getTime());
  }
  return res;
}
