{
  StringBuffer postedBody=new StringBuffer(1000);
  HTTPFileArg files[]=sampler.getHTTPFiles();
  if (sampler.getUseMultipartForPost()) {
    OutputStream out=connection.getOutputStream();
    out.write(formDataPostBody);
    postedBody.append(new String(formDataPostBody,"UTF-8"));
    for (int i=0; i < files.length; i++) {
      HTTPFileArg file=files[i];
      byte[] header=file.getHeader().getBytes();
      out.write(header);
      postedBody.append(new String(header,"UTF-8"));
      writeFileToStream(file.getPath(),out);
      postedBody.append("<actual file content, not shown here>");
      byte[] fileMultipartEndDivider=getFileMultipartEndDivider();
      out.write(fileMultipartEndDivider);
      postedBody.append(new String(fileMultipartEndDivider,"UTF-8"));
      if (i + 1 < files.length) {
        out.write(CRLF);
        postedBody.append(new String(CRLF,"UTF-8"));
      }
    }
    byte[] multipartEndDivider=getMultipartEndDivider();
    out.write(multipartEndDivider);
    postedBody.append(new String(multipartEndDivider,"UTF-8"));
    out.flush();
    out.close();
  }
 else {
    if (sampler.getArguments() != null && !sampler.hasArguments() && sampler.getSendFileAsPostBody()) {
      OutputStream out=connection.getOutputStream();
      HTTPFileArg file=files[0];
      writeFileToStream(file.getPath(),out);
      out.flush();
      out.close();
      postedBody.append("<actual file content, not shown here>");
    }
 else     if (formDataUrlEncoded != null) {
      OutputStream out=connection.getOutputStream();
      out.write(formDataUrlEncoded);
      out.flush();
      out.close();
      postedBody.append(new String(formDataUrlEncoded,"UTF-8"));
    }
  }
  return postedBody.toString();
}
