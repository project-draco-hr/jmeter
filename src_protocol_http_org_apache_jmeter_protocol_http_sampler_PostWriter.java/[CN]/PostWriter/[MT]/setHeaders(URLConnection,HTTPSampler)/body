{
  String contentEncoding=sampler.getContentEncoding();
  if (contentEncoding == null || contentEncoding.length() == 0) {
    contentEncoding=ENCODING;
  }
  long contentLength=0L;
  HTTPFileArg files[]=sampler.getHTTPFiles();
  if (sampler.getUseMultipartForPost()) {
    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.MULTIPART_FORM_DATA + "; boundary=" + getBoundary());
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    bos.write(getMultipartDivider());
    PropertyIterator args=sampler.getArguments().iterator();
    while (args.hasNext()) {
      HTTPArgument arg=(HTTPArgument)args.next().getObjectValue();
      String parameterName=arg.getName();
      if (arg.isSkippable(parameterName)) {
        continue;
      }
      bos.write(CRLF);
      writeFormMultipart(bos,parameterName,arg.getValue(),contentEncoding);
    }
    if (files.length > 0) {
      bos.write(CRLF);
    }
    bos.flush();
    formDataPostBody=bos.toByteArray();
    bos.close();
    contentLength=formDataPostBody.length;
    for (int i=0; i < files.length; i++) {
      HTTPFileArg file=files[i];
      bos=new ByteArrayOutputStream();
      writeStartFileMultipart(bos,file.getPath(),file.getParamName(),file.getMimeType());
      bos.flush();
      String header=bos.toString(contentEncoding);
      file.setHeader(header);
      bos.close();
      contentLength+=header.length();
      File uploadFile=new File(file.getPath());
      contentLength+=uploadFile.length();
      contentLength+=getFileMultipartEndDivider().length;
      if (i + 1 < files.length) {
        contentLength+=CRLF.length;
      }
    }
    contentLength+=getMultipartEndDivider().length;
    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_LENGTH,Long.toString(contentLength));
    connection.setDoOutput(true);
    connection.setDoInput(true);
  }
 else {
    String contentTypeHeader=connection.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE);
    boolean hasContentTypeHeader=contentTypeHeader != null && contentTypeHeader.length() > 0;
    if (sampler.getArguments() != null && sampler.getArguments().getArgumentCount() == 0 && sampler.getSendFileAsPostBody()) {
      HTTPFileArg file=files[0];
      if (!hasContentTypeHeader) {
        if (file.getMimeType() != null && file.getMimeType().length() > 0) {
          connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,file.getMimeType());
        }
 else {
          connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
        }
      }
      File inputFile=new File(file.getPath());
      contentLength=inputFile.length();
    }
 else {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      String postBody=null;
      if (!sampler.getSendParameterValuesAsPostBody()) {
        if (!hasContentTypeHeader) {
          connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
        }
        postBody=sampler.getQueryString(contentEncoding);
      }
 else {
        if (!hasContentTypeHeader) {
          HTTPFileArg file=files.length > 0 ? files[0] : null;
          if (file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
            connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,file.getMimeType());
          }
 else {
            connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
          }
        }
        StringBuilder postBodyBuffer=new StringBuilder();
        PropertyIterator args=sampler.getArguments().iterator();
        while (args.hasNext()) {
          HTTPArgument arg=(HTTPArgument)args.next().getObjectValue();
          postBodyBuffer.append(arg.getEncodedValue(contentEncoding));
        }
        postBody=postBodyBuffer.toString();
      }
      bos.write(postBody.getBytes(contentEncoding));
      bos.flush();
      bos.close();
      formDataUrlEncoded=bos.toByteArray();
      contentLength=bos.toByteArray().length;
    }
    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_LENGTH,Long.toString(contentLength));
    connection.setDoOutput(true);
  }
}
