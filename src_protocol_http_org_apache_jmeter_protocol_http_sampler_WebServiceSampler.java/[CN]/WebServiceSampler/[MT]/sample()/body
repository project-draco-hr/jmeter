{
  SampleResult result=new SampleResult();
  try {
    result.setURL(this.getUrl());
    result.setSampleLabel(getName());
    org.w3c.dom.Element rdoc=createDocument();
    if (rdoc == null)     throw new SOAPException("Could not create document",null);
    Envelope msgEnv=Envelope.unmarshall(rdoc);
    Message msg=new Message();
    result.sampleStart();
    SOAPHTTPConnection spconn=null;
    if (this.getHeaderManager() != null && this.getHeaderManager().getSOAPHeader() != null) {
      spconn=(SOAPHTTPConnection)this.getHeaderManager().getSOAPHeader();
    }
 else {
      spconn=new SOAPHTTPConnection();
    }
    if (getAuthManager() != null) {
      if (getAuthManager().getAuthForURL(getUrl()) != null) {
        AuthManager authmanager=getAuthManager();
        Authorization auth=authmanager.getAuthForURL(getUrl());
        spconn.setUserName(auth.getUser());
        spconn.setPassword(auth.getPass());
      }
 else {
        log.warn("the URL for the auth was null." + " Username and password not set");
      }
    }
    String phost="";
    int pport=0;
    if (this.getUseProxy()) {
      if (this.getProxyHost().length() > 0 && this.getProxyPort() > 0) {
        phost=this.getProxyHost();
        pport=this.getProxyPort();
      }
 else {
        if (System.getProperty("http.proxyHost") != null || System.getProperty("http.proxyPort") != null) {
          phost=System.getProperty("http.proxyHost");
          pport=Integer.parseInt(System.getProperty("http.proxyPort"));
        }
      }
      if (phost.length() > 0 && pport > 0) {
        spconn.setProxyHost(phost);
        spconn.setProxyPort(pport);
      }
    }
    spconn.setMaintainSession(true);
    msg.setSOAPTransport(spconn);
    msg.send(this.getUrl(),this.getSoapAction(),msgEnv);
    if (this.getHeaderManager() != null) {
      this.getHeaderManager().setSOAPHeader(spconn);
    }
    SOAPTransport st=msg.getSOAPTransport();
    result.setDataType(SampleResult.TEXT);
    BufferedReader br=null;
    if (st != null && st.receive() != null) {
      br=st.receive();
      if (getReadResponse()) {
        StringBuffer buf=new StringBuffer();
        String line;
        while ((line=br.readLine()) != null) {
          buf.append(line);
        }
        result.sampleEnd();
        result.setResponseData(buf.toString().getBytes());
      }
 else {
        br.read();
        result.sampleEnd();
        result.setResponseData(JMeterUtils.getResString("read_response_message").getBytes());
      }
      result.setSuccessful(true);
      result.setResponseCodeOK();
      result.setResponseHeaders(this.convertSoapHeaders(st.getHeaders()));
    }
 else {
      result.sampleEnd();
      result.setSuccessful(false);
      result.setResponseData(st.getResponseSOAPContext().getContentType().getBytes());
      result.setResponseCode("000");
      result.setResponseHeaders("error");
    }
    result.setSamplerData(fileContents);
    result.setDataEncoding(st.getResponseSOAPContext().getContentType());
    if (br != null) {
      br.close();
    }
    msg=null;
    st=null;
  }
 catch (  SOAPException exception) {
    log.warn(exception.getMessage());
    result.setSuccessful(false);
  }
catch (  MalformedURLException exception) {
    log.warn(exception.getMessage());
  }
catch (  IOException exception) {
    log.warn(exception.getMessage());
  }
catch (  MessagingException exception) {
    log.warn(exception.getMessage());
  }
  return result;
}
