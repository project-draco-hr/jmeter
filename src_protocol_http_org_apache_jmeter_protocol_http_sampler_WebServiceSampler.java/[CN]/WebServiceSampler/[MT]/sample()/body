{
  SampleResult result=new SampleResult();
  result.setSuccessful(false);
  result.setResponseCode("000");
  result.setSampleLabel(getName());
  try {
    result.setURL(this.getUrl());
    org.w3c.dom.Element rdoc=createDocument();
    if (rdoc == null) {
      throw new SOAPException("Could not create document",null);
    }
    result.setDataEncoding(ENCODING);
    result.setContentType("text/xml");
    result.setDataType(SampleResult.TEXT);
    result.setSamplerData(fileContents);
    Envelope msgEnv=Envelope.unmarshall(rdoc);
    result.sampleStart();
    SOAPHTTPConnection spconn=null;
    if (this.getHeaderManager() != null && this.getHeaderManager().getSOAPHeader() != null) {
      spconn=(SOAPHTTPConnection)this.getHeaderManager().getSOAPHeader();
    }
 else {
      spconn=new SOAPHTTPConnection();
    }
    spconn.setTimeout(getTimeoutAsInt());
    if (getAuthManager() != null) {
      if (getAuthManager().getAuthForURL(getUrl()) != null) {
        AuthManager authmanager=getAuthManager();
        Authorization auth=authmanager.getAuthForURL(getUrl());
        spconn.setUserName(auth.getUser());
        spconn.setPassword(auth.getPass());
      }
 else {
        log.warn("the URL for the auth was null." + " Username and password not set");
      }
    }
    String phost="";
    int pport=0;
    if (this.getUseProxy()) {
      if (this.getProxyHost().length() > 0 && this.getProxyPort() > 0) {
        phost=this.getProxyHost();
        pport=this.getProxyPort();
      }
 else {
        if (System.getProperty("http.proxyHost") != null || System.getProperty("http.proxyPort") != null) {
          phost=System.getProperty("http.proxyHost");
          pport=Integer.parseInt(System.getProperty("http.proxyPort"));
        }
      }
      if (phost.length() > 0 && pport > 0) {
        spconn.setProxyHost(phost);
        spconn.setProxyPort(pport);
        if (PROXY_USER.length() > 0 && PROXY_PASS.length() > 0) {
          spconn.setProxyUserName(PROXY_USER);
          spconn.setProxyPassword(PROXY_PASS);
        }
      }
    }
    HeaderManager headerManager=this.getHeaderManager();
    Hashtable<String,String> reqHeaders=null;
    if (headerManager != null) {
      int size=headerManager.getHeaders().size();
      reqHeaders=new Hashtable<String,String>(size);
      for (int i=0; i < size; i++) {
        Header header=headerManager.get(i);
        reqHeaders.put(header.getName(),header.getValue());
      }
    }
    spconn.setMaintainSession(getMaintainSession());
    spconn.send(this.getUrl(),this.getSoapAction(),reqHeaders,msgEnv,null,new SOAPContext());
    @SuppressWarnings("unchecked") final Map<String,String> headers=spconn.getHeaders();
    result.setResponseHeaders(convertSoapHeaders(headers));
    if (this.getHeaderManager() != null) {
      this.getHeaderManager().setSOAPHeader(spconn);
    }
    BufferedReader br=null;
    if (spconn.receive() != null) {
      br=spconn.receive();
      SOAPContext sc=spconn.getResponseSOAPContext();
      final String contentType=sc.getContentType();
      result.setContentType(contentType);
      result.setEncodingAndType(contentType);
      int length=0;
      if (getReadResponse()) {
        StringWriter sw=new StringWriter();
        length=IOUtils.copy(br,sw);
        result.sampleEnd();
        result.setResponseData(sw.toString().getBytes(result.getDataEncodingWithDefault()));
      }
 else {
        length=br.read();
        result.sampleEnd();
        result.setResponseData(JMeterUtils.getResString("read_response_message"),null);
      }
      if (length > 0) {
        result.setSuccessful(true);
        result.setResponseCodeOK();
        result.setResponseMessageOK();
      }
 else {
        result.setSuccessful(false);
        result.setResponseCode("999");
        result.setResponseMessage("Empty response");
      }
    }
 else {
      result.sampleEnd();
      result.setSuccessful(false);
      final String contentType=spconn.getResponseSOAPContext().getContentType();
      result.setContentType(contentType);
      result.setEncodingAndType(contentType);
      result.setResponseData(spconn.getResponseSOAPContext().toString().getBytes(result.getDataEncodingWithDefault()));
    }
    if (br != null) {
      br.close();
    }
  }
 catch (  IllegalArgumentException exception) {
    String message=exception.getMessage();
    log.warn(message);
    result.setResponseMessage(message);
  }
catch (  SAXException exception) {
    log.warn(exception.toString());
    result.setResponseMessage(exception.getMessage());
  }
catch (  SOAPException exception) {
    log.warn(exception.toString());
    result.setResponseMessage(exception.getMessage());
  }
catch (  MalformedURLException exception) {
    String message=exception.getMessage();
    log.warn(message);
    result.setResponseMessage(message);
  }
catch (  IOException exception) {
    String message=exception.getMessage();
    log.warn(message);
    result.setResponseMessage(message);
  }
catch (  NoClassDefFoundError error) {
    log.error("Missing class: ",error);
    result.setResponseMessage(error.toString());
  }
catch (  Exception exception) {
    if ("javax.mail.MessagingException".equals(exception.getClass().getName())) {
      log.warn(exception.toString());
      result.setResponseMessage(exception.getMessage());
    }
 else {
      log.error("Problem processing the SOAP request",exception);
      result.setResponseMessage(exception.toString());
    }
  }
 finally {
    if (result.getStartTime() == 0) {
      result.sampleStart();
    }
    if (result.getEndTime() == 0) {
      result.sampleEnd();
    }
  }
  return result;
}
