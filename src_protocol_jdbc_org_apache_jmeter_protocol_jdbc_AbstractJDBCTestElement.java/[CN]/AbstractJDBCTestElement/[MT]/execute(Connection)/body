{
  log.debug("executing jdbc");
  Statement stmt=null;
  try {
    String _queryType=getQueryType();
    if (SELECT.equals(_queryType)) {
      stmt=conn.createStatement();
      ResultSet rs=null;
      try {
        rs=stmt.executeQuery(getQuery());
        return getStringFromResultSet(rs).getBytes(ENCODING);
      }
  finally {
        close(rs);
      }
    }
 else     if (CALLABLE.equals(_queryType)) {
      CallableStatement cstmt=getCallableStatement(conn);
      int out[]=setArguments(cstmt);
      boolean hasResultSet=cstmt.execute();
      String sb=resultSetsToString(cstmt,hasResultSet,out);
      return sb.getBytes(ENCODING);
    }
 else     if (UPDATE.equals(_queryType)) {
      stmt=conn.createStatement();
      stmt.executeUpdate(getQuery());
      int updateCount=stmt.getUpdateCount();
      String results=updateCount + " updates";
      return results.getBytes(ENCODING);
    }
 else     if (PREPARED_SELECT.equals(_queryType)) {
      PreparedStatement pstmt=getPreparedStatement(conn);
      setArguments(pstmt);
      boolean hasResultSet=pstmt.execute();
      String sb=resultSetsToString(pstmt,hasResultSet,null);
      return sb.getBytes(ENCODING);
    }
 else     if (PREPARED_UPDATE.equals(_queryType)) {
      PreparedStatement pstmt=getPreparedStatement(conn);
      setArguments(pstmt);
      pstmt.executeUpdate();
      String sb=resultSetsToString(pstmt,false,null);
      return sb.getBytes(ENCODING);
    }
 else     if (ROLLBACK.equals(_queryType)) {
      conn.rollback();
      return ROLLBACK.getBytes(ENCODING);
    }
 else     if (COMMIT.equals(_queryType)) {
      conn.commit();
      return COMMIT.getBytes(ENCODING);
    }
 else     if (AUTOCOMMIT_FALSE.equals(_queryType)) {
      conn.setAutoCommit(false);
      return AUTOCOMMIT_FALSE.getBytes(ENCODING);
    }
 else     if (AUTOCOMMIT_TRUE.equals(_queryType)) {
      conn.setAutoCommit(true);
      return AUTOCOMMIT_TRUE.getBytes(ENCODING);
    }
 else {
      throw new UnsupportedOperationException("Unexpected query type: " + _queryType);
    }
  }
  finally {
    close(stmt);
  }
}
