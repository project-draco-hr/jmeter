{
  log.debug("sampling jdbc");
  SampleResult res=new SampleResult();
  res.setSampleLabel(getName());
  res.setSamplerData(toString());
  res.setDataType(SampleResult.TEXT);
  res.setDataEncoding(System.getProperty("file.encoding"));
  res.setSuccessful(true);
  res.setResponseMessageOK();
  res.setResponseCodeOK();
  res.sampleStart();
  Connection conn=null;
  Statement stmt=null;
  try {
    try {
      conn=DataSourceElement.getConnection(getDataSource());
    }
  finally {
      res.latencyEnd();
    }
    res.setResponseHeaders(conn.toString());
    String _queryType=getQueryType();
    if (SELECT.equals(_queryType)) {
      stmt=conn.createStatement();
      ResultSet rs=null;
      try {
        rs=stmt.executeQuery(getQuery());
        Data data=getDataFromResultSet(rs);
        res.setResponseData(data.toString().getBytes());
      }
  finally {
        close(rs);
      }
    }
 else     if (CALLABLE.equals(_queryType)) {
      CallableStatement cstmt=getCallableStatement(conn);
      int out[]=setArguments(cstmt);
      boolean hasResultSet=cstmt.execute();
      String sb=resultSetsToString(cstmt,hasResultSet,out);
      res.setResponseData(sb.getBytes());
    }
 else     if (UPDATE.equals(_queryType)) {
      stmt=conn.createStatement();
      stmt.executeUpdate(getQuery());
      int updateCount=stmt.getUpdateCount();
      String results=updateCount + " updates";
      res.setResponseData(results.getBytes());
    }
 else     if (PREPARED_SELECT.equals(_queryType)) {
      PreparedStatement pstmt=getPreparedStatement(conn);
      setArguments(pstmt);
      pstmt.executeQuery();
      String sb=resultSetsToString(pstmt,true,null);
      res.setResponseData(sb.getBytes());
    }
 else     if (PREPARED_UPDATE.equals(_queryType)) {
      PreparedStatement pstmt=getPreparedStatement(conn);
      setArguments(pstmt);
      pstmt.executeUpdate();
      String sb=resultSetsToString(pstmt,false,null);
      res.setResponseData(sb.getBytes());
    }
 else     if (ROLLBACK.equals(_queryType)) {
      conn.rollback();
      res.setResponseData(ROLLBACK.getBytes());
    }
 else     if (COMMIT.equals(_queryType)) {
      conn.commit();
      res.setResponseData(COMMIT.getBytes());
    }
 else     if (AUTOCOMMIT_FALSE.equals(_queryType)) {
      conn.setAutoCommit(false);
      res.setResponseData(AUTOCOMMIT_FALSE.getBytes());
    }
 else     if (AUTOCOMMIT_TRUE.equals(_queryType)) {
      conn.setAutoCommit(true);
      res.setResponseData(AUTOCOMMIT_TRUE.getBytes());
    }
 else {
      String results="Unexpected query type: " + _queryType;
      res.setResponseMessage(results);
      res.setSuccessful(false);
    }
  }
 catch (  SQLException ex) {
    final String errCode=Integer.toString(ex.getErrorCode());
    res.setResponseMessage(ex.toString());
    res.setResponseCode(ex.getSQLState() + " " + errCode);
    res.setSuccessful(false);
  }
 finally {
    close(stmt);
    close(conn);
  }
  res.sampleEnd();
  return res;
}
