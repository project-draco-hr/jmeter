{
  if (getQueryArguments().trim().length() == 0) {
    return new int[]{};
  }
  String[] arguments=getQueryArguments().split(COMMA);
  String[] argumentsTypes=getQueryArgumentsTypes().split(COMMA);
  if (arguments.length != argumentsTypes.length) {
    throw new SQLException("number of arguments (" + arguments.length + ") and number of types ("+ argumentsTypes.length+ ") are not equal");
  }
  int[] outputs=new int[arguments.length];
  for (int i=0; i < arguments.length; i++) {
    String argument=arguments[i];
    String argumentType=argumentsTypes[i];
    String[] arg=argumentType.split(" ");
    String inputOutput="";
    if (arg.length > 1) {
      argumentType=arg[1];
      inputOutput=arg[0];
    }
    int targetSqlType=getJdbcType(argumentType);
    try {
      if (!OUT.equalsIgnoreCase(inputOutput)) {
        if (argument.equals(NULL_MARKER)) {
          pstmt.setNull(i + 1,targetSqlType);
        }
 else {
          pstmt.setObject(i + 1,argument,targetSqlType);
        }
      }
      if (OUT.equalsIgnoreCase(inputOutput) || INOUT.equalsIgnoreCase(inputOutput)) {
        CallableStatement cs=(CallableStatement)pstmt;
        cs.registerOutParameter(i + 1,targetSqlType);
        outputs[i]=targetSqlType;
      }
 else {
        outputs[i]=java.sql.Types.NULL;
      }
    }
 catch (    NullPointerException e) {
      throw new SQLException("Could not set argument no: " + (i + 1) + " - missing parameter marker?");
    }
  }
  return outputs;
}
