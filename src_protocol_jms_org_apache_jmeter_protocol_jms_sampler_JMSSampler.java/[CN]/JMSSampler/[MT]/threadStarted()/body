{
  logThreadStart();
  Context context=null;
  try {
    context=getInitialContext();
    Object obj=context.lookup(getQueueConnectionFactory());
    if (!(obj instanceof QueueConnectionFactory)) {
      String msg="QueueConnectionFactory expected, but got " + obj == null ? "null" : obj.getClass().getName();
      LOGGER.fatalError(msg);
      throw new IllegalStateException(msg);
    }
    QueueConnectionFactory factory=(QueueConnectionFactory)obj;
    Queue queue=(Queue)context.lookup(getSendQueue());
    sendQueue=queue;
    if (!useTemporyQueue()) {
      receiveQueue=(Queue)context.lookup(getReceiveQueue());
      receiverThread=Receiver.createReceiver(factory,receiveQueue,getPrincipal(context),getCredentials(context));
    }
    String principal=null;
    String credentials=null;
    if (USE_SECURITY_PROPERTIES) {
      principal=getPrincipal(context);
      credentials=getCredentials(context);
    }
    if (principal != null && credentials != null) {
      connection=factory.createQueueConnection(principal,credentials);
    }
 else {
      connection=factory.createQueueConnection();
    }
    session=connection.createQueueSession(false,Session.AUTO_ACKNOWLEDGE);
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug("Session created");
    }
    if (getPropertyAsBoolean(IS_ONE_WAY)) {
      producer=session.createSender(sendQueue);
      if (isNonPersistent()) {
        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
      }
    }
 else {
      if (useTemporyQueue()) {
        executor=new TemporaryQueueExecutor(session,sendQueue);
      }
 else {
        producer=session.createSender(sendQueue);
        if (isNonPersistent()) {
          producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
        }
        executor=new FixedQueueExecutor(producer,getTimeout(),isUseReqMsgIdAsCorrelId());
      }
    }
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug("Starting connection");
    }
    connection.start();
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug("Connection started");
    }
  }
 catch (  JMSException e) {
    LOGGER.warn(e.getLocalizedMessage(),e);
  }
catch (  NamingException e) {
    LOGGER.warn(e.getLocalizedMessage(),e);
  }
 finally {
    if (context != null) {
      try {
        context.close();
      }
 catch (      NamingException ignored) {
      }
    }
  }
}
