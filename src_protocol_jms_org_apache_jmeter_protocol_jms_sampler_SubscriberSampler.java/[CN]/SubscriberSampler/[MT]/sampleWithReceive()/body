{
  SampleResult result=new SampleResult();
  result.setDataType(SampleResult.TEXT);
  StringBuffer buffer=new StringBuffer();
  StringBuffer propBuffer=new StringBuffer();
  int cnt;
  result.setSampleLabel(getName());
  if (this.SUBSCRIBER == null) {
    this.initReceiveClient();
    this.SUBSCRIBER.start();
  }
  int loop=this.getIterationCount();
  this.SUBSCRIBER.setLoop(loop);
  result.sampleStart();
  while (this.SUBSCRIBER.count(0) < loop && interrupted == false) {
    try {
      Thread.sleep(0,50);
    }
 catch (    InterruptedException e) {
      log.debug(e.getMessage());
    }
  }
  result.sampleEnd();
  result.setResponseMessage(loop + " samples messages received");
  for (cnt=0; cnt < loop; cnt++) {
    TextMessage msg=this.SUBSCRIBER.getMessage();
    if (msg != null) {
      try {
        buffer.append(msg.getText());
        Enumeration<?> props=msg.getPropertyNames();
        while (props.hasMoreElements()) {
          String name=(String)props.nextElement();
          propBuffer.append("PROPERTY: ");
          propBuffer.append(name);
          propBuffer.append("=");
          propBuffer.append(msg.getObjectProperty(name));
          propBuffer.append("\n");
        }
      }
 catch (      JMSException e) {
        log.error(e.getMessage());
      }
    }
  }
  if (this.getReadResponseAsBoolean()) {
    result.setResponseData(buffer.toString().getBytes());
  }
 else {
    result.setBytes(buffer.toString().getBytes().length);
  }
  result.setResponseHeaders(propBuffer.toString());
  result.setSuccessful(true);
  result.setResponseCodeOK();
  result.setResponseMessage(loop + " message(s) received successfully");
  result.setSamplerData(loop + " messages expected");
  result.setSampleCount(loop);
  return result;
}
