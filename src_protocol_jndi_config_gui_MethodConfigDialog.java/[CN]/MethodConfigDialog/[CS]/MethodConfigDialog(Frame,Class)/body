{
  super(aFrame,true);
  classLabel=new JLabel(type.getName());
  textField=new JTextField(10);
  Object[] array={classLabel,textField};
  final String btnString1="Ok";
  final String btnString2="Cancel";
  Object[] options={btnString1,btnString2};
  optionPane=new JOptionPane(array,JOptionPane.QUESTION_MESSAGE,JOptionPane.OK_CANCEL_OPTION,null,options,options[0]);
  setContentPane(optionPane);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
  }
);
  textField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      optionPane.setValue(btnString1);
    }
  }
);
  optionPane.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent e){
      catClass.debug("Start : propertyChange1");
      String prop=e.getPropertyName();
      if (catClass.isDebugEnabled()) {
        catClass.debug("propertyChange1 : property name - " + prop);
      }
      catClass.debug("JOptionPane.INPUT_VALUE_PROPERTY - " + JOptionPane.INPUT_VALUE_PROPERTY);
      catClass.debug("optionPane.getValue() - " + optionPane.getValue());
      catClass.debug("optionPane.getInputValue() - " + optionPane.getInputValue());
      Object value=null;
      if (isVisible() && (e.getSource() == optionPane) && prop.equals(JOptionPane.VALUE_PROPERTY)) {
        value=optionPane.getValue();
        if (catClass.isDebugEnabled()) {
          catClass.debug("propertyChange1 : optionPane value - " + value);
        }
        optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);
        String input=null;
        if (value.equals(btnString1)) {
          try {
            input=textField.getText();
            if (catClass.isDebugEnabled()) {
              catClass.debug("MethodConfigDialog1 : input - " + input);
            }
            userObject=new MethodConfigUserObject(type,input);
            setVisible(false);
          }
 catch (          MethodConfigUserObjectException ex) {
            catClass.debug("propertyChange1 : input incompatible with class");
            textField.selectAll();
            JOptionPane.showMessageDialog(MethodConfigDialog.this,"Sorry, \"" + input + "\" "+ "is not valid for Class "+ type,"Try again",JOptionPane.ERROR_MESSAGE);
            input=null;
            userObject=null;
          }
        }
 else {
          setVisible(false);
        }
      }
      catClass.debug("End - propertyChange1");
    }
  }
);
}
