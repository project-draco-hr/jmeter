{
  log.info("Start : sample1");
  boolean reflectionStatus=false;
  boolean stateJustChanged=false;
  long start=(long)0;
  long end=(long)0;
  long ctxTime=(long)0;
  long lookupTime=(long)0;
  long homeMethodTime=(long)0;
  long remoteMethodTime=(long)0;
  Object remoteInterface=null;
  Object results=null;
  Object ref=null;
  SampleResult res=new SampleResult();
  SampleResult contextLookupRes=new SampleResult();
  contextLookupRes.putValue(SampleResult.DISPLAY_NAME,"Context Lookup");
  SampleResult lookupRes=new SampleResult();
  SampleResult homeMethodRes=null;
  SampleResult remoteMethodRes=null;
  Hashtable ht=new Hashtable();
  JndiConfig jndiConfig=null;
  InitialContext ctx=null;
  try {
    jndiConfig=(JndiConfig)e.getConfigElement(JndiConfig.class);
    ctx=jndiConfig.getInitialContext();
    if (ctx == null) {
      for (int i=0; i < JndiConfig.JNDI_PROPS.length; i++) {
        String value=jndiConfig.getValue(i);
        if (value != null) {
          if (log.isDebugEnabled()) {
            log.debug("sample1 : JNDI env - " + JndiConfig.JNDI_PROPS[i] + " = "+ value);
          }
          ht.put(JndiConfig.JNDI_PROPS[i],value);
        }
      }
      start=System.currentTimeMillis();
      ctx=new InitialContext(ht);
      end=System.currentTimeMillis();
      log.info("sample1 : Got initial context");
      jndiConfig.setInitialContext(ctx);
    }
    ctxTime=end - start;
    contextLookupRes.setTime(ctxTime);
    LookupConfig lookupConfig=(LookupConfig)e.getConfigElement(LookupConfig.class);
    String lookupName=null;
    if (lookupConfig != null) {
      lookupName=lookupConfig.getLookupName();
      if (log.isDebugEnabled()) {
        log.debug("sample1 : LookupName - " + lookupName);
      }
      start=System.currentTimeMillis();
      ref=ctx.lookup(lookupName);
      end=System.currentTimeMillis();
      lookupTime=end - start;
      log.info("Got remote interface");
      lookupRes.setTime(lookupTime);
      lookupRes.putValue(SampleResult.DISPLAY_NAME,"Remote Interface Lookup - " + lookupName);
    }
    Class lookupNameClass=ref.getClass();
    MethodConfig methodConfig=(MethodConfig)e.getConfigElement(MethodConfig.class);
    MethodConfigGui methodConfigGui=methodConfig.getGui();
    MethodConfig model=methodConfigGui.getModel();
    int state=model.getState();
    reflectionStatus=model.getReflectionStatus();
    String[] strings=null;
    if (log.isDebugEnabled()) {
      log.debug("sample1 : state - " + state);
      log.debug("sample1 : reflectionStatus - " + reflectionStatus);
    }
    if ((state == MethodConfig.METHOD_GET_HOME_NAMES && reflectionStatus && !stateJustChanged)) {
      Method[] methods=lookupNameClass.getMethods();
      strings=new String[methods.length];
      for (int i=0; i < methods.length; i++) {
        strings[i]=getMethodSignature(methods[i]);
      }
      model.setMethodHomeList(strings);
      model.setState(MethodConfig.METHOD_GET_HOME_PARMS);
      stateJustChanged=true;
    }
    if ((state == MethodConfig.METHOD_GET_HOME_PARMS && reflectionStatus && !stateJustChanged)) {
      String methodHomeName=methodConfig.getMethodHomeName();
      if (log.isDebugEnabled()) {
        log.debug("sample1 : selected methodHomeName - " + methodHomeName);
      }
      Vector returnValues=getMethodParmsTypes(methodHomeName,lookupNameClass);
      Method method=(Method)returnValues.get(0);
      Class[] methodParmTypes=(Class[])returnValues.get(1);
      model.setMethodHomeParms(methodParmTypes);
      model.setHomeMethod(method);
      model.setState(MethodConfig.METHOD_INVOKE_HOME);
      stateJustChanged=true;
    }
    if ((state == MethodConfig.METHOD_INVOKE_HOME && reflectionStatus && !stateJustChanged) || (state >= MethodConfig.METHOD_INVOKE_HOME && !reflectionStatus)) {
      log.debug("sample1 : METHOD_INVOKE_HOME");
      Method method=model.getHomeMethod();
      if (log.isDebugEnabled()) {
        log.debug("sample1 : home method to be invoked - " + method);
      }
      homeMethodRes=new SampleResult();
      Object[] parmsArray=null;
      try {
        parmsArray=methodConfigGui.getMethodParmsValues(MethodConfig.METHOD_INVOKE_HOME);
        if (log.isDebugEnabled()) {
          log.debug("sample1 : home method parms - " + parmsArray);
        }
        start=System.currentTimeMillis();
        remoteInterface=method.invoke(ref,parmsArray);
        log.info("return - " + remoteInterface);
      }
 catch (      IllegalAccessException err) {
        log.error(err);
      }
catch (      InvocationTargetException err) {
        log.error(err);
      }
catch (      MethodConfigUserObjectException err) {
        log.error(err);
      }
      end=System.currentTimeMillis();
      if (!reflectionStatus) {
        homeMethodTime=end - start;
        homeMethodRes.setTime(homeMethodTime);
        homeMethodRes.putValue(SampleResult.DISPLAY_NAME,"Home Method Execution - " + method.getName());
        homeMethodRes.putValue(SampleResult.SUCCESS,new Boolean(true));
      }
 else {
        model.setState(MethodConfig.METHOD_GET_REMOTE_NAMES);
        stateJustChanged=true;
        model.setRemoteInterfaceList(remoteInterface);
      }
    }
    if ((state == MethodConfig.METHOD_GET_REMOTE_NAMES && reflectionStatus && !stateJustChanged)) {
      remoteInterface=model.getRemoteInterfaceType();
      Class remoteInterfaceClass=remoteInterface.getClass();
      if (log.isDebugEnabled()) {
        log.debug("updateGui1 : remoteInterfaceClass - " + remoteInterfaceClass);
      }
      Method[] methods=remoteInterfaceClass.getMethods();
      strings=new String[methods.length];
      for (int i=0; i < methods.length; i++) {
        strings[i]=getMethodSignature(methods[i]);
      }
      model.setMethodRemoteList(strings);
      model.setState(MethodConfig.METHOD_GET_REMOTE_PARMS);
      stateJustChanged=true;
    }
    if ((state == MethodConfig.METHOD_GET_REMOTE_PARMS && reflectionStatus && !stateJustChanged)) {
      String methodRemoteName=methodConfig.getMethodRemoteName();
      if (log.isDebugEnabled()) {
        log.debug("sample1 : selected methodRemoteName - " + methodRemoteName);
      }
      Object selectedRemoteInterfaceType=model.getRemoteInterfaceType();
      Class selectedRemoteInterfaceTypeClass=selectedRemoteInterfaceType.getClass();
      Vector returnValues=getMethodParmsTypes(methodRemoteName,selectedRemoteInterfaceTypeClass);
      Method method=(Method)returnValues.get(0);
      Class[] methodParmTypes=(Class[])returnValues.get(1);
      model.setMethodRemoteParms(methodParmTypes);
      model.setRemoteMethod(method);
      model.setState(MethodConfig.METHOD_INVOKE_REMOTE);
      stateJustChanged=true;
    }
    if ((state == MethodConfig.METHOD_INVOKE_REMOTE && reflectionStatus && !stateJustChanged) || (state >= MethodConfig.METHOD_INVOKE_REMOTE && !reflectionStatus)) {
      log.debug("sample1 : METHOD_INVOKE_REMOTE");
      Method method=model.getRemoteMethod();
      if (log.isDebugEnabled()) {
        log.debug("sample1 : remote method to be invoked - " + method);
      }
      Object selectedRemoteInterfaceType=model.getRemoteInterfaceType();
      remoteMethodRes=new SampleResult();
      Object[] parmsArray=null;
      try {
        parmsArray=methodConfigGui.getMethodParmsValues(MethodConfig.METHOD_INVOKE_REMOTE);
        start=System.currentTimeMillis();
        results=method.invoke(selectedRemoteInterfaceType,parmsArray);
        log.info("return - " + results);
      }
 catch (      IllegalAccessException err) {
        log.error(err);
      }
catch (      InvocationTargetException err) {
        log.error(err);
      }
catch (      MethodConfigUserObjectException err) {
        log.error(err);
      }
      end=System.currentTimeMillis();
      if (!reflectionStatus) {
        remoteMethodTime=end - start;
        remoteMethodRes.setTime(remoteMethodTime);
        remoteMethodRes.putValue(SampleResult.DISPLAY_NAME,"Remote Method Execution - " + method.getName());
        String resultsString=results.toString();
        byte[] resultBytes=null;
        if (resultsString != null) {
          resultBytes=resultsString.getBytes();
        }
        remoteMethodRes.putValue(SampleResult.TEXT_RESPONSE,resultBytes);
        remoteMethodRes.putValue(SampleResult.SUCCESS,new Boolean(true));
      }
 else {
        model.setState(MethodConfig.METHOD_COMPLETE);
        stateJustChanged=true;
      }
    }
    long totalTime=ctxTime + lookupTime + homeMethodTime+ remoteMethodTime;
    res.setTime(0);
    res.putValue(SampleResult.DISPLAY_NAME,lookupName);
    ArrayList resultList=new ArrayList();
    resultList.add(contextLookupRes);
    resultList.add(lookupRes);
    if (homeMethodRes != null) {
      resultList.add(homeMethodRes);
    }
    if (remoteMethodRes != null) {
      resultList.add(remoteMethodRes);
    }
    res.putValue(SampleResult.RESULT_LIST,resultList);
    res.putValue(SampleResult.TOTAL_TIME,new Long(totalTime));
    log.info("!!!!! ctxTime : " + ctxTime);
    log.info("!!!!! lookupTime : " + lookupTime);
    log.info("!!!!! homeMethodTime : " + homeMethodTime);
  }
 catch (  NamingException err) {
    log.error(err);
  }
  log.info("End : sample1");
  return res;
}
