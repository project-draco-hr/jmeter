{
  super.configure(element);
  servername.setText(element.getPropertyAsString(LDAPSampler.SERVERNAME));
  port.setText(element.getPropertyAsString(LDAPSampler.PORT));
  rootdn.setText(element.getPropertyAsString(LDAPSampler.ROOTDN));
  CardLayout cl=(CardLayout)(cards.getLayout());
  if (element.getPropertyAsString(LDAPSampler.TEST).equals("add")) {
    addTest.setSelected(true);
    add.setText(element.getPropertyAsString(LDAPSampler.BASE_ENTRY_DN));
    tableAddPanel.configure((TestElement)element.getProperty(LDAPSampler.ARGUMENTS).getObjectValue());
    cl.show(cards,"Add");
  }
 else   if (element.getPropertyAsString(LDAPSampler.TEST).equals("modify")) {
    modifyTest.setSelected(true);
    modify.setText(element.getPropertyAsString(LDAPSampler.BASE_ENTRY_DN));
    tableModifyPanel.configure((TestElement)element.getProperty(LDAPSampler.ARGUMENTS).getObjectValue());
    cl.show(cards,"Modify");
  }
 else   if (element.getPropertyAsString(LDAPSampler.TEST).equals("delete")) {
    deleteTest.setSelected(true);
    delete.setText(element.getPropertyAsString(LDAPSampler.DELETE));
    cl.show(cards,"Delete");
  }
 else   if (element.getPropertyAsString(LDAPSampler.TEST).equals("search")) {
    searchTest.setSelected(true);
    searchbase.setText(element.getPropertyAsString(LDAPSampler.SEARCHBASE));
    searchfilter.setText(element.getPropertyAsString(LDAPSampler.SEARCHFILTER));
    cl.show(cards,"Search");
  }
  if (element.getPropertyAsBoolean(LDAPSampler.USER_DEFINED)) {
    user_Defined.setSelected(true);
  }
 else {
    user_Defined.setSelected(false);
    cl.show(cards,"");
  }
}
