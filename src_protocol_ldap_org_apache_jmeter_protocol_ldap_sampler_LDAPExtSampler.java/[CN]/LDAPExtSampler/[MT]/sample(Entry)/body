{
  String responseData="<ldapanswer>";
  SampleResult res=new SampleResult();
  res.setResponseData("successfull".getBytes());
  res.setResponseMessage("Success");
  res.setResponseCode("0");
  boolean isSuccessful=true;
  SearchResult sr;
  String iets;
  NamingEnumeration attrlist;
  res.setSampleLabel(getName());
  LdapExtClient temp_client=(LdapExtClient)ldapConnections.get(Thread.currentThread().getName());
  DirContext dirContext=(DirContext)ldapContexts.get(Thread.currentThread().getName());
  if (temp_client == null) {
    temp_client=new LdapExtClient();
    try {
      dirContext=new InitialDirContext();
    }
 catch (    NamingException err) {
      log.error("Ldap client context creation - ",err);
    }
    ldapConnections.put(Thread.currentThread().getName(),temp_client);
  }
  try {
    if (getPropertyAsString(TEST).equals("unbind")) {
      res.setSamplerData("Unbind");
      responseData=responseData + "<operation><opertype>unbind</opertype>";
      responseData=responseData + "<baseobj>" + getRootdn()+ "</baseobj>";
      responseData=responseData + "<binddn>" + getUserDN()+ "</binddn></operation>";
      unbindOp(temp_client,dirContext,res);
    }
 else     if (getPropertyAsString(TEST).equals("bind")) {
      res.setSamplerData("Bind as " + getUserDN());
      responseData=responseData + "<operation><opertype>bind</opertype>";
      responseData=responseData + "<baseobj>" + getRootdn()+ "</baseobj>";
      responseData=responseData + "<binddn>" + getUserDN()+ "</binddn></operation>";
      bindOp(temp_client,dirContext,res);
    }
 else     if (getPropertyAsString(TEST).equals("sbind")) {
      res.setSamplerData("SingleBind as " + getSuserDN());
      responseData=responseData + "<operation><opertype>bind</opertype>";
      responseData=responseData + "<binddn>" + getSuserDN()+ "</binddn></operation>";
      singleBindOp(res);
    }
 else     if (getPropertyAsString(TEST).equals("compare")) {
      res.setSamplerData("Compare " + getPropertyAsString(COMPAREFILT) + " "+ getPropertyAsString(COMPAREDN));
      responseData=responseData + "<operation><opertype>compare</opertype>";
      responseData=responseData + "<comparedn>" + getPropertyAsString(COMPAREDN)+ "</comparedn>";
      responseData=responseData + "<comparefilter>" + getPropertyAsString(COMPAREFILT)+ "</comparefilter></operation>";
      compareOp(temp_client,dirContext,res);
      if (temp_client.compareAnswer.hasMore()) {
      }
 else {
        res.setResponseCode("49");
        res.setResponseMessage("compareFalse");
        isSuccessful=false;
      }
    }
 else     if (getPropertyAsString(TEST).equals("add")) {
      res.setSamplerData("Add object " + getPropertyAsString(BASE_ENTRY_DN));
      responseData=responseData + "<operation><opertype>add</opertype>";
      responseData=responseData + "<attributes>" + getArguments().toString()+ "</attributes>";
      responseData=responseData + "<dn>" + getPropertyAsString(BASE_ENTRY_DN)+ "</dn></operation>";
      addTest(temp_client,dirContext,res);
    }
 else     if (getPropertyAsString(TEST).equals("delete")) {
      res.setSamplerData("Delete object " + getPropertyAsString(DELETE));
      responseData=responseData + "<operation><opertype>delete</opertype>";
      responseData=responseData + "<dn>" + getPropertyAsString(DELETE)+ "</dn></operation>";
      deleteTest(temp_client,dirContext,res);
    }
 else     if (getPropertyAsString(TEST).equals("modify")) {
      res.setSamplerData("Modify object " + getPropertyAsString(BASE_ENTRY_DN));
      responseData=responseData + "<operation><opertype>modify</opertype>";
      responseData=responseData + "<dn>" + getPropertyAsString(BASE_ENTRY_DN)+ "</dn>";
      responseData=responseData + "<attributes>" + getLDAPArguments().toString()+ "</attributes></operation>";
      modifyTest(temp_client,dirContext,res);
    }
 else     if (getPropertyAsString(TEST).equals("rename")) {
      res.setSamplerData("ModDN object " + getPropertyAsString(MODDDN) + " to "+ getPropertyAsString(NEWDN));
      responseData=responseData + "<operation><opertype>moddn</opertype>";
      responseData=responseData + "<dn>" + getPropertyAsString(MODDDN)+ "</dn>";
      responseData=responseData + "<newdn>" + getPropertyAsString(NEWDN)+ "</newdn></operation>";
      renameTest(temp_client,dirContext,res);
    }
 else     if (getPropertyAsString(TEST).equals("search")) {
      res.setSamplerData("Search with filter " + getPropertyAsString(SEARCHFILTER));
      responseData=responseData + "<operation><opertype>search</opertype>";
      responseData=responseData + "<searchfilter>" + getPropertyAsString(SEARCHFILTER)+ "</searchfilter>";
      responseData=responseData + "<searchbase>" + getPropertyAsString(SEARCHBASE)+ ","+ getPropertyAsString(ROOTDN)+ "</searchbase>";
      responseData=responseData + "<scope>" + getPropertyAsString(SCOPE)+ "</scope>";
      responseData=responseData + "<countlimit>" + getPropertyAsString(COUNTLIM)+ "</countlimit>";
      responseData=responseData + "<timelimit>" + getPropertyAsString(TIMELIM)+ "</timelimit>";
      responseData=responseData + "</operation><searchresult>";
      searchTest(temp_client,dirContext,res);
      while (temp_client.answer.hasMore()) {
        sr=(SearchResult)temp_client.answer.next();
        responseData=responseData + "<dn>" + sr.getName()+ ","+ getPropertyAsString(SEARCHBASE)+ ","+ getRootdn()+ "</dn>";
        responseData=responseData + "<returnedattr>" + sr.getAttributes().size()+ "</returnedattr>";
        attrlist=sr.getAttributes().getIDs();
        while (attrlist.hasMore()) {
          iets=(String)attrlist.next();
          responseData=responseData + "<attribute><attributename>" + iets.toString()+ "</attributename>";
          responseData=responseData + "<attributevalue>" + sr.getAttributes().get(iets.toString()).toString().substring(iets.toString().length() + 2)+ "</attributevalue></attribute>";
        }
      }
      responseData=responseData + "</searchresult></operation>";
    }
  }
 catch (  NamingException ex) {
    String returnData=ex.toString();
    if (returnData.indexOf("LDAP: error code") >= 0) {
      res.setResponseMessage(returnData.substring(returnData.indexOf("LDAP: error code") + 22,returnData.indexOf("]")));
      res.setResponseCode(returnData.substring(returnData.indexOf("LDAP: error code") + 17,returnData.indexOf("LDAP: error code") + 19));
    }
 else {
      res.setResponseMessage(returnData);
      res.setResponseCode("800");
    }
    isSuccessful=false;
  }
 finally {
    responseData=responseData + "<responsecode>" + res.getResponseCode()+ "</responsecode>";
    responseData=responseData + "<responsemessage>" + res.getResponseMessage()+ "</responsemessage>";
    responseData=responseData + "</ldapanswer>";
    res.setResponseData(responseData.getBytes());
    res.setThreadName(Thread.currentThread().getName());
    res.setDataType(SampleResult.TEXT);
    res.setSuccessful(isSuccessful);
  }
  return res;
}
