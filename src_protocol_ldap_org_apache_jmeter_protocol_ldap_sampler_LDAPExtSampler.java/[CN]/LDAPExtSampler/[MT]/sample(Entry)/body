{
  XMLBuffer xmlBuffer=new XMLBuffer();
  xmlBuffer.openTag("ldapanswer");
  SampleResult res=new SampleResult();
  res.setResponseData("successfull".getBytes());
  res.setResponseMessage("Success");
  res.setResponseCode("0");
  boolean isSuccessful=true;
  res.setSampleLabel(getName());
  LdapExtClient temp_client=(LdapExtClient)ldapConnections.get(getThreadName());
  DirContext dirContext=(DirContext)ldapContexts.get(getThreadName());
  if (temp_client == null) {
    temp_client=new LdapExtClient();
    try {
      dirContext=new InitialDirContext();
    }
 catch (    NamingException err) {
      log.error("Ldap client context creation - ",err);
    }
    ldapConnections.put(getThreadName(),temp_client);
  }
  try {
    xmlBuffer.openTag("operation");
    final String testType=getPropertyAsString(TEST);
    xmlBuffer.tag("opertype",testType);
    log.debug("performing test: " + testType);
    if (testType.equals("unbind")) {
      res.setSamplerData("Unbind");
      xmlBuffer.tag("baseobj",getRootdn());
      xmlBuffer.tag("binddn",getUserDN());
      unbindOp(temp_client,dirContext,res);
    }
 else     if (testType.equals(BIND)) {
      res.setSamplerData("Bind as " + getUserDN());
      xmlBuffer.tag("baseobj",getRootdn());
      xmlBuffer.tag("binddn",getUserDN());
      xmlBuffer.tag("connectionTO",getConnTimeOut());
      bindOp(temp_client,dirContext,res);
    }
 else     if (testType.equals(SBIND)) {
      res.setSamplerData("SingleBind as " + getUserDN());
      xmlBuffer.tag("baseobj",getRootdn());
      xmlBuffer.tag("binddn",getUserDN());
      xmlBuffer.tag("connectionTO",getConnTimeOut());
      singleBindOp(res);
    }
 else     if (testType.equals(COMPARE)) {
      res.setSamplerData("Compare " + getPropertyAsString(COMPAREFILT) + " "+ getPropertyAsString(COMPAREDN));
      xmlBuffer.tag("comparedn",getPropertyAsString(COMPAREDN));
      xmlBuffer.tag("comparefilter",getPropertyAsString(COMPAREFILT));
      res.sampleStart();
      NamingEnumeration cmp=temp_client.compare(dirContext,getPropertyAsString(COMPAREFILT),getPropertyAsString(COMPAREDN));
      res.sampleEnd();
      if (cmp.hasMore()) {
      }
 else {
        res.setResponseCode("5");
        res.setResponseMessage("compareFalse");
        isSuccessful=false;
      }
    }
 else     if (testType.equals(ADD)) {
      res.setSamplerData("Add object " + getPropertyAsString(BASE_ENTRY_DN));
      xmlBuffer.tag("attributes",getArguments().toString());
      xmlBuffer.tag("dn",getPropertyAsString(BASE_ENTRY_DN));
      addTest(temp_client,dirContext,res);
    }
 else     if (testType.equals(DELETE)) {
      res.setSamplerData("Delete object " + getPropertyAsString(DELETE));
      xmlBuffer.tag("dn",getPropertyAsString(DELETE));
      deleteTest(temp_client,dirContext,res);
    }
 else     if (testType.equals(MODIFY)) {
      res.setSamplerData("Modify object " + getPropertyAsString(BASE_ENTRY_DN));
      xmlBuffer.tag("dn",getPropertyAsString(BASE_ENTRY_DN));
      xmlBuffer.tag("attributes",getLDAPArguments().toString());
      modifyTest(temp_client,dirContext,res);
    }
 else     if (testType.equals(RENAME)) {
      res.setSamplerData("ModDN object " + getPropertyAsString(MODDDN) + " to "+ getPropertyAsString(NEWDN));
      xmlBuffer.tag("dn",getPropertyAsString(MODDDN));
      xmlBuffer.tag("newdn",getPropertyAsString(NEWDN));
      renameTest(temp_client,dirContext,res);
    }
 else     if (testType.equals(SEARCH)) {
      final String scopeStr=getPropertyAsString(SCOPE);
      final int scope=getPropertyAsInt(SCOPE);
      final String searchFilter=getPropertyAsString(SEARCHFILTER);
      final String searchBase=getPropertyAsString(SEARCHBASE);
      final String timeLimit=getPropertyAsString(TIMELIM);
      final String countLimit=getPropertyAsString(COUNTLIM);
      res.setSamplerData("Search with filter " + searchFilter);
      xmlBuffer.tag("searchfilter",searchFilter);
      xmlBuffer.tag("searchbase",searchBase + "," + getPropertyAsString(ROOTDN));
      xmlBuffer.tag("scope",scopeStr);
      xmlBuffer.tag("countlimit",countLimit);
      xmlBuffer.tag("timelimit",timeLimit);
      res.sampleStart();
      NamingEnumeration srch=temp_client.searchTest(dirContext,searchBase,searchFilter,scope,getPropertyAsLong(COUNTLIM),getPropertyAsInt(TIMELIM),getRequestAttributes(getPropertyAsString(ATTRIBS)),getPropertyAsBoolean(RETOBJ),getPropertyAsBoolean(DEREF));
      res.sampleEnd();
      if (isParseFlag()) {
        try {
          xmlBuffer.openTag("searchresults");
          while (srch.hasMore()) {
            try {
              xmlBuffer.openTag("searchresult");
              SearchResult sr=(SearchResult)srch.next();
              xmlBuffer.tag("dn",sr.getName() + "," + searchBase+ ","+ getRootdn());
              xmlBuffer.tag("returnedattr",String.valueOf(sr.getAttributes().size()));
              NamingEnumeration attrlist=sr.getAttributes().getIDs();
              while (attrlist.hasMore()) {
                String iets=(String)attrlist.next();
                xmlBuffer.openTag("attribute");
                xmlBuffer.tag("attributename",iets);
                xmlBuffer.tag("attributevalue",sr.getAttributes().get(iets).toString().substring(iets.length() + 2));
                xmlBuffer.closeTag("attribute");
              }
            }
  finally {
              xmlBuffer.closeTag("searchresult");
            }
          }
        }
  finally {
          xmlBuffer.closeTag("searchresults");
        }
      }
    }
  }
 catch (  NamingException ex) {
    String returnData=ex.toString();
    final int indexOfLDAPErrCode=returnData.indexOf("LDAP: error code");
    if (indexOfLDAPErrCode >= 0) {
      res.setResponseMessage(returnData.substring(indexOfLDAPErrCode + 21,returnData.indexOf("]")));
      res.setResponseCode(returnData.substring(indexOfLDAPErrCode + 17,indexOfLDAPErrCode + 19));
    }
 else {
      res.setResponseMessage(returnData);
      res.setResponseCode("800");
    }
    isSuccessful=false;
  }
 finally {
    xmlBuffer.closeTag("operation");
    xmlBuffer.tag("responsecode",res.getResponseCode());
    xmlBuffer.tag("responsemessage",res.getResponseMessage());
    res.setResponseData(xmlBuffer.toString().getBytes());
    res.setDataType(SampleResult.TEXT);
    res.setSuccessful(isSuccessful);
  }
  return res;
}
