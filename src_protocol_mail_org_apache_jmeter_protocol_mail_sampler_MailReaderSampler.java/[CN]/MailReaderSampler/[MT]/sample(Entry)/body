{
  SampleResult parent=new SampleResult();
  boolean isOK=false;
  boolean deleteMessages=getDeleteMessages();
  parent.setSampleLabel(getName());
  parent.setSamplerData(getServerType() + "://" + getUserName()+ "@"+ getServer());
  parent.sampleStart();
  try {
    Properties props=new Properties();
    Session session=Session.getDefaultInstance(props,null);
    Store store=session.getStore(getServerType());
    store.connect(getServer(),getUserName(),getPassword());
    Folder folder=store.getFolder(getFolder());
    if (deleteMessages) {
      folder.open(Folder.READ_WRITE);
    }
 else {
      folder.open(Folder.READ_ONLY);
    }
    Message messages[]=folder.getMessages();
    Message message;
    StringBuffer pdata=new StringBuffer();
    pdata.append(messages.length);
    pdata.append(" messages found\n");
    int n=getNumMessages();
    if (n == ALL_MESSAGES || n > messages.length) {
      n=messages.length;
    }
    for (int i=0; i < n; i++) {
      StringBuffer cdata=new StringBuffer();
      SampleResult child=new SampleResult();
      child.sampleStart();
      message=messages[i];
{
        child.setContentType(message.getContentType());
      }
      cdata.append("Message ");
      cdata.append(message.getMessageNumber());
      child.setSampleLabel(cdata.toString());
      child.setSamplerData(cdata.toString());
      cdata.setLength(0);
      cdata.append("Date: ");
      cdata.append(message.getSentDate());
      cdata.append(NEW_LINE);
      cdata.append("To: ");
      Address[] recips=message.getAllRecipients();
      for (int j=0; j < recips.length; j++) {
        cdata.append(recips[j].toString());
        if (j < recips.length - 1) {
          cdata.append("; ");
        }
      }
      cdata.append(NEW_LINE);
      cdata.append("From: ");
      Address[] from=message.getFrom();
      for (int j=0; j < from.length; j++) {
        cdata.append(from[j].toString());
        if (j < from.length - 1) {
          cdata.append("; ");
        }
      }
      cdata.append(NEW_LINE);
      cdata.append("Subject: ");
      cdata.append(message.getSubject());
      cdata.append(NEW_LINE);
      cdata.append(NEW_LINE);
      Object content=message.getContent();
      if (content instanceof MimeMultipart) {
        MimeMultipart mmp=(MimeMultipart)content;
        int count=mmp.getCount();
        cdata.append("Multipart. Count: ");
        cdata.append(count);
        cdata.append(NEW_LINE);
        for (int j=0; j < count; j++) {
          BodyPart bodyPart=mmp.getBodyPart(j);
          cdata.append("Type: ");
          cdata.append(bodyPart.getContentType());
          cdata.append(NEW_LINE);
          try {
            cdata.append(bodyPart.getContent());
          }
 catch (          UnsupportedEncodingException ex) {
            cdata.append(ex.getLocalizedMessage());
          }
          cdata.append(NEW_LINE);
        }
      }
 else {
        cdata.append(content);
        cdata.append(NEW_LINE);
      }
      if (deleteMessages) {
        message.setFlag(Flags.Flag.DELETED,true);
      }
      child.setResponseData(cdata.toString().getBytes());
      child.setDataType(SampleResult.TEXT);
      child.setResponseCodeOK();
      child.setResponseMessage("OK");
      child.setSuccessful(true);
      child.sampleEnd();
      parent.addSubResult(child);
    }
    folder.close(true);
    store.close();
    parent.setResponseData(pdata.toString().getBytes());
    parent.setDataType(SampleResult.TEXT);
    parent.setContentType("text/plain");
    parent.setResponseCodeOK();
    parent.setResponseMessage("OK");
    isOK=true;
  }
 catch (  NoClassDefFoundError ex) {
    log.debug("",ex);
    parent.setResponseCode("500");
    parent.setResponseMessage(ex.toString());
  }
catch (  MessagingException ex) {
    log.debug("",ex);
    parent.setResponseCode("500");
    parent.setResponseMessage(ex.toString());
  }
catch (  IOException ex) {
    log.debug("",ex);
    parent.setResponseCode("500");
    parent.setResponseMessage(ex.toString());
  }
  if (parent.getEndTime() == 0) {
    parent.sampleEnd();
  }
  parent.setSuccessful(isOK);
  return parent;
}
