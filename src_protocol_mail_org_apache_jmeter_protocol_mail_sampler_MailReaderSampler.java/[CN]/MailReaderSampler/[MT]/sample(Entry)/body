{
  SampleResult res=new SampleResult();
  boolean isOK=false;
  boolean deleteMessages=getDeleteMessages();
  res.setSampleLabel(getName());
  res.setSamplerData(getServerType() + "://" + getUserName()+ "@"+ getServer());
  res.sampleStart();
  try {
    Properties props=new Properties();
    Session session=Session.getDefaultInstance(props,null);
    Store store=session.getStore(getServerType());
    store.connect(getServer(),getUserName(),getPassword());
    Folder folder=store.getFolder(getFolder());
    if (deleteMessages) {
      folder.open(Folder.READ_WRITE);
    }
 else {
      folder.open(Folder.READ_ONLY);
    }
    Message messages[]=folder.getMessages();
    Message message;
    StringBuffer data=new StringBuffer();
    data.append(messages.length);
    data.append(" messages found\n");
    int n=getNumMessages();
    if (n == -1 || n > messages.length)     n=messages.length;
    for (int i=0; i < n; i++) {
      message=messages[i];
      if (i == 0) {
        res.setContentType(message.getContentType());
      }
      data.append("Message ");
      data.append(message.getMessageNumber());
      data.append(":\n");
      data.append("Date: ");
      data.append(message.getSentDate());
      data.append(NEW_LINE);
      data.append("To: ");
      Address[] recips=message.getAllRecipients();
      for (int j=0; j < recips.length; j++) {
        data.append(recips[j].toString());
        if (j < recips.length - 1)         data.append("; ");
      }
      data.append(NEW_LINE);
      data.append("From: ");
      Address[] from=message.getFrom();
      for (int j=0; j < from.length; j++) {
        data.append(from[j].toString());
        if (j < from.length - 1)         data.append("; ");
      }
      data.append(NEW_LINE);
      data.append("Subject: ");
      data.append(message.getSubject());
      data.append(NEW_LINE);
      data.append(NEW_LINE);
      Object content=message.getContent();
      if (content instanceof MimeMultipart) {
        MimeMultipart mmp=(MimeMultipart)content;
        int count=mmp.getCount();
        data.append("Multipart. Count: ");
        data.append(count);
        data.append(NEW_LINE);
        for (int j=0; j < count; j++) {
          BodyPart bodyPart=mmp.getBodyPart(j);
          data.append("Type: ");
          data.append(bodyPart.getContentType());
          data.append(NEW_LINE);
          try {
            data.append(bodyPart.getContent());
          }
 catch (          UnsupportedEncodingException ex) {
            data.append(ex.getLocalizedMessage());
          }
          data.append(NEW_LINE);
        }
      }
 else {
        data.append(content);
        data.append(NEW_LINE);
      }
      data.append(NEW_LINE);
      if (deleteMessages) {
        message.setFlag(Flags.Flag.DELETED,true);
      }
    }
    folder.close(true);
    store.close();
    res.setResponseData(data.toString().getBytes());
    res.setDataType(SampleResult.TEXT);
    res.setResponseCodeOK();
    res.setResponseMessage("OK");
    isOK=true;
  }
 catch (  NoClassDefFoundError ex) {
    log.debug("",ex);
    res.setResponseCode("500");
    res.setResponseMessage(ex.toString());
  }
catch (  Exception ex) {
    log.debug("",ex);
    res.setResponseCode("500");
    res.setResponseMessage(ex.toString());
  }
  res.sampleEnd();
  res.setSuccessful(isOK);
  return res;
}
