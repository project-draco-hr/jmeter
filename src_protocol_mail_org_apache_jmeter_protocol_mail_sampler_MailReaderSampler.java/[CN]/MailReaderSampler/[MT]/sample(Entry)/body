{
  SampleResult parent=new SampleResult();
  boolean isOK=false;
  final boolean deleteMessages=getDeleteMessages();
  final String serverProtocol=getServerType();
  parent.setSampleLabel(getName());
  String samplerString=toString();
  parent.setSamplerData(samplerString);
  parent.sampleStart();
  try {
    Properties props=new Properties();
    if (isUseStartTLS()) {
      props.setProperty(mailProp(serverProtocol,"starttls.enable"),TRUE);
      if (isEnforceStartTLS()) {
        props.setProperty(mailProp(serverProtocol,"starttls.require"),TRUE);
      }
    }
    if (isTrustAllCerts()) {
      if (isUseSSL()) {
        props.setProperty(mailProp(serverProtocol,"ssl.socketFactory.class"),TRUST_ALL_SOCKET_FACTORY);
        props.setProperty(mailProp(serverProtocol,"ssl.socketFactory.fallback"),FALSE);
      }
 else       if (isUseStartTLS()) {
        props.setProperty(mailProp(serverProtocol,"ssl.socketFactory.class"),TRUST_ALL_SOCKET_FACTORY);
        props.setProperty(mailProp(serverProtocol,"ssl.socketFactory.fallback"),FALSE);
      }
    }
 else     if (isUseLocalTrustStore()) {
      File truststore=new File(getTrustStoreToUse());
      log.info("load local truststore - try to load truststore from: " + truststore.getAbsolutePath());
      if (!truststore.exists()) {
        log.info("load local truststore -Failed to load truststore from: " + truststore.getAbsolutePath());
        truststore=new File(FileServer.getFileServer().getBaseDir(),getTrustStoreToUse());
        log.info("load local truststore -Attempting to read truststore from:  " + truststore.getAbsolutePath());
        if (!truststore.exists()) {
          log.info("load local truststore -Failed to load truststore from: " + truststore.getAbsolutePath() + ". Local truststore not available, aborting execution.");
          throw new IOException("Local truststore file not found. Also not available under : " + truststore.getAbsolutePath());
        }
      }
      if (isUseSSL()) {
        props.put(mailProp(serverProtocol,"ssl.socketFactory"),new LocalTrustStoreSSLSocketFactory(truststore));
        props.put(mailProp(serverProtocol,"ssl.socketFactory.fallback"),FALSE);
      }
 else       if (isUseStartTLS()) {
        props.put(mailProp(serverProtocol,"ssl.socketFactory"),new LocalTrustStoreSSLSocketFactory(truststore));
        props.put(mailProp(serverProtocol,"ssl.socketFactory.fallback"),FALSE);
      }
    }
    Session session=Session.getInstance(props,null);
    Store store=session.getStore(serverProtocol);
    store.connect(getServer(),getPortAsInt(),getUserName(),getPassword());
    Folder folder=store.getFolder(getFolder());
    if (deleteMessages) {
      folder.open(Folder.READ_WRITE);
    }
 else {
      folder.open(Folder.READ_ONLY);
    }
    final int messageTotal=folder.getMessageCount();
    int n=getNumMessages();
    if (n == ALL_MESSAGES || n > messageTotal) {
      n=messageTotal;
    }
    Message[] messages=folder.getMessages(1,n);
    StringBuilder pdata=new StringBuilder();
    pdata.append(messages.length);
    pdata.append(" messages found\n");
    parent.setResponseData(pdata.toString(),null);
    parent.setDataType(SampleResult.TEXT);
    parent.setContentType("text/plain");
    final boolean headerOnly=getHeaderOnly();
    busy=true;
    for (    Message message : messages) {
      StringBuilder cdata=new StringBuilder();
      SampleResult child=new SampleResult();
      child.sampleStart();
      cdata.append("Message ");
      cdata.append(message.getMessageNumber());
      child.setSampleLabel(cdata.toString());
      child.setSamplerData(cdata.toString());
      cdata.setLength(0);
      final String contentType=message.getContentType();
      child.setContentType(contentType);
      child.setDataEncoding(RFC_822_DEFAULT_ENCODING);
      child.setEncodingAndType(contentType);
      if (isStoreMimeMessage()) {
        ByteArrayOutputStream bout=new ByteArrayOutputStream();
        message.writeTo(bout);
        child.setResponseData(bout.toByteArray());
        child.setDataType(SampleResult.TEXT);
      }
 else {
        @SuppressWarnings("unchecked") Enumeration<Header> hdrs=message.getAllHeaders();
        while (hdrs.hasMoreElements()) {
          Header hdr=hdrs.nextElement();
          String value=hdr.getValue();
          try {
            value=MimeUtility.decodeText(value);
          }
 catch (          UnsupportedEncodingException uce) {
          }
          cdata.append(hdr.getName()).append(": ").append(value).append("\n");
        }
        child.setResponseHeaders(cdata.toString());
        cdata.setLength(0);
        if (!headerOnly) {
          appendMessageData(child,message);
        }
      }
      if (deleteMessages) {
        message.setFlag(Flags.Flag.DELETED,true);
      }
      child.setResponseOK();
      if (child.getEndTime() == 0) {
        child.sampleEnd();
      }
      parent.addSubResult(child);
    }
    folder.close(true);
    store.close();
    parent.setResponseCodeOK();
    parent.setResponseMessageOK();
    isOK=true;
  }
 catch (  NoClassDefFoundError|IOException ex) {
    log.debug("",ex);
    parent.setResponseCode("500");
    parent.setResponseMessage(ex.toString());
  }
catch (  MessagingException ex) {
    log.debug("",ex);
    parent.setResponseCode("500");
    parent.setResponseMessage(ex.toString() + "\n" + samplerString);
  }
 finally {
    busy=false;
  }
  if (parent.getEndTime() == 0) {
    parent.sampleEnd();
  }
  parent.setSuccessful(isOK);
  return parent;
}
