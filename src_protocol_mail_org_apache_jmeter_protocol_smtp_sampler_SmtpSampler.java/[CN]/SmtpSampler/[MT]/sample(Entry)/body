{
  Message message=null;
  SampleResult res=new SampleResult();
  res.setSampleLabel(getName());
  boolean isOK=false;
  SendMailCommand instance=new SendMailCommand();
  instance.setSmtpServer(getPropertyAsString(SmtpSampler.SERVER));
  instance.setSmtpPort(getPropertyAsString(SmtpSampler.SERVER_PORT));
  instance.setConnectionTimeOut(getPropertyAsString(SmtpSampler.SERVER_CONNECTION_TIMEOUT));
  instance.setTimeOut(getPropertyAsString(SmtpSampler.SERVER_TIMEOUT));
  instance.setUseSSL(getPropertyAsBoolean(SecuritySettingsPanel.USE_SSL));
  instance.setUseStartTLS(getPropertyAsBoolean(SecuritySettingsPanel.USE_STARTTLS));
  instance.setTrustAllCerts(getPropertyAsBoolean(SecuritySettingsPanel.SSL_TRUST_ALL_CERTS));
  instance.setEnforceStartTLS(getPropertyAsBoolean(SecuritySettingsPanel.ENFORCE_STARTTLS));
  instance.setUseAuthentication(getPropertyAsBoolean(USE_AUTH));
  instance.setUsername(getPropertyAsString(USERNAME));
  instance.setPassword(getPropertyAsString(PASSWORD));
  instance.setUseLocalTrustStore(getPropertyAsBoolean(SecuritySettingsPanel.USE_LOCAL_TRUSTSTORE));
  instance.setTrustStoreToUse(getPropertyAsString(SecuritySettingsPanel.TRUSTSTORE_TO_USE));
  instance.setEmlMessage(getPropertyAsString(EML_MESSAGE_TO_SEND));
  instance.setUseEmlMessage(getPropertyAsBoolean(USE_EML));
  instance.setEnableDebug(getPropertyAsBoolean(ENABLE_DEBUG));
  if (getPropertyAsString(MAIL_FROM).matches(".*@.*")) {
    instance.setSender(getPropertyAsString(MAIL_FROM));
  }
  final String receiverTo=getPropertyAsString(SmtpSampler.RECEIVER_TO).trim();
  final String receiverCC=getPropertyAsString(SmtpSampler.RECEIVER_CC).trim();
  final String receiverBcc=getPropertyAsString(SmtpSampler.RECEIVER_BCC).trim();
  final String replyTo=getPropertyAsString(SmtpSampler.MAIL_REPLYTO).trim();
  try {
    instance.setReceiverTo(getPropNameAsAddresses(receiverTo));
    instance.setReceiverCC(getPropNameAsAddresses(receiverCC));
    instance.setReceiverBCC(getPropNameAsAddresses(receiverBcc));
    instance.setReplyTo(getPropNameAsAddresses(replyTo));
    if (getPropertyAsBoolean(SUPPRESS_SUBJECT)) {
      instance.setSubject(null);
    }
 else {
      String subject=getPropertyAsString(SUBJECT);
      if (getPropertyAsBoolean(INCLUDE_TIMESTAMP)) {
        StringBuilder sb=new StringBuilder(subject);
        sb.append(" <<< current timestamp: ");
        sb.append(new Date().getTime());
        sb.append(" >>>");
        subject=sb.toString();
      }
      instance.setSubject(subject);
    }
    if (!getPropertyAsBoolean(USE_EML)) {
      instance.setMailBody(getPropertyAsString(MESSAGE));
      instance.setPlainBody(getPropertyAsBoolean(PLAIN_BODY));
      final String filesToAttach=getPropertyAsString(ATTACH_FILE);
      if (!filesToAttach.isEmpty()) {
        String[] attachments=filesToAttach.split(FILENAME_SEPARATOR);
        for (        String attachment : attachments) {
          File file=new File(attachment);
          if (!file.isAbsolute() && !file.exists()) {
            log.debug("loading file with relative path: " + attachment);
            file=new File(FileServer.getFileServer().getBaseDir(),attachment);
            log.debug("file path set to: " + attachment);
          }
          instance.addAttachment(file);
        }
      }
    }
    instance.setSynchronousMode(true);
    instance.setHeaderFields((CollectionProperty)getProperty(SmtpSampler.HEADER_FIELDS));
    message=instance.prepareMessage();
    if (getPropertyAsBoolean(MESSAGE_SIZE_STATS)) {
      CounterOutputStream cs=new CounterOutputStream();
      message.writeTo(cs);
      res.setBytes(cs.getCount());
    }
 else {
      res.setBytes(-1);
    }
  }
 catch (  Exception ex) {
    log.warn("Error while preparing message",ex);
    res.setResponseCode("500");
    res.setResponseMessage(ex.toString());
    return res;
  }
  res.setDataType(SampleResult.TEXT);
  try {
    res.setRequestHeaders(getRequestHeaders(message));
    res.setSamplerData(getSamplerData(message));
  }
 catch (  MessagingException e1) {
    res.setSamplerData("Error occurred trying to save request info: " + e1);
    log.warn("Error occurred trying to save request info",e1);
  }
catch (  IOException e1) {
    res.setSamplerData("Error occurred trying to save request info: " + e1);
    log.warn("Error occurred trying to save request info",e1);
  }
  res.sampleStart();
  try {
    instance.execute(message);
    res.setResponseCodeOK();
    res.setResponseMessage("Message successfully sent!\n" + instance.getServerResponse());
    isOK=true;
  }
 catch (  AuthenticationFailedException afex) {
    log.warn("",afex);
    res.setResponseCode("500");
    res.setResponseMessage("AuthenticationFailedException: authentication failed - wrong username / password!\n" + afex);
  }
catch (  MessagingException mex) {
    log.warn("",mex);
    res.setResponseCode("500");
    if (mex.getMessage().matches(".*Could not connect to SMTP host.*465.*") && mex.getCause().getMessage().matches(".*Connection timed out.*")) {
      res.setResponseMessage("MessagingException: Probably, SSL is not supported by the SMTP-Server!\n" + mex);
    }
 else     if (mex.getMessage().matches(".*StartTLS failed.*")) {
      res.setResponseMessage("MessagingException: StartTLS not supported by server or initializing failed!\n" + mex);
    }
 else     if (mex.getMessage().matches(".*send command to.*") && mex.getCause().getMessage().matches(".*unable to find valid certification path to requested target.*")) {
      res.setResponseMessage("MessagingException: Server certificate not trusted - perhaps you have to restart JMeter!\n" + mex);
    }
 else {
      res.setResponseMessage("Other MessagingException: " + mex.toString());
    }
  }
catch (  Exception ex) {
    log.warn("",ex);
    res.setResponseCode("500");
    if (null != ex.getMessage() && ex.getMessage().matches("Failed to build truststore")) {
      res.setResponseMessage("Failed to build truststore - did not try to send mail!");
    }
 else {
      res.setResponseMessage("Other Exception: " + ex.toString());
    }
  }
  res.sampleEnd();
  try {
    InputStream is=message.getInputStream();
    StringBuilder sb=new StringBuilder();
    byte[] buf=new byte[1024];
    int read=is.read(buf);
    while (read > 0) {
      sb.append(new String(buf,0,read));
      read=is.read(buf);
    }
    res.setResponseData(sb.toString().getBytes());
  }
 catch (  IOException ex) {
    log.warn("",ex);
  }
catch (  MessagingException ex) {
    log.warn("",ex);
  }
  res.setSuccessful(isOK);
  return res;
}
