{
  Properties props=new Properties();
  String protocol=getProtocol();
  props.setProperty("mail." + protocol + ".host",smtpServer);
  props.setProperty("mail." + protocol + ".port",getPort());
  props.setProperty("mail." + protocol + ".auth",Boolean.toString(useAuthentication));
  if (enableDebug) {
    props.setProperty("mail.debug","true");
  }
  if (useStartTLS) {
    props.setProperty("mail.smtp.starttls.enable","true");
    if (enforceStartTLS) {
      props.setProperty("mail.smtp.starttls.require","true");
    }
  }
  if (trustAllCerts) {
    if (useSSL) {
      props.setProperty("mail.smtps.ssl.socketFactory.class",TRUST_ALL_SOCKET_FACTORY);
      props.setProperty("mail.smtps.ssl.socketFactory.fallback","false");
    }
 else     if (useStartTLS) {
      props.setProperty("mail.smtp.ssl.socketFactory.class",TRUST_ALL_SOCKET_FACTORY);
      props.setProperty("mail.smtp.ssl.socketFactory.fallback","false");
    }
  }
 else   if (useLocalTrustStore) {
    File truststore=new File(trustStoreToUse);
    logger.info("load local truststore - try to load truststore from: " + truststore.getAbsolutePath());
    if (!truststore.exists()) {
      logger.info("load local truststore -Failed to load truststore from: " + truststore.getAbsolutePath());
      truststore=new File(FileServer.getFileServer().getBaseDir(),trustStoreToUse);
      logger.info("load local truststore -Attempting to read truststore from:  " + truststore.getAbsolutePath());
      if (!truststore.exists()) {
        logger.info("load local truststore -Failed to load truststore from: " + truststore.getAbsolutePath() + ". Local truststore not available, aborting execution.");
        throw new IOException("Local truststore file not found. Also not available under : " + truststore.getAbsolutePath());
      }
    }
    if (useSSL) {
      props.put("mail.smtps.ssl.socketFactory",new LocalTrustStoreSSLSocketFactory(truststore));
      props.put("mail.smtps.ssl.socketFactory.fallback","false");
    }
 else     if (useStartTLS) {
      props.put("mail.smtp.ssl.socketFactory",new LocalTrustStoreSSLSocketFactory(truststore));
      props.put("mail.smtp.ssl.socketFactory.fallback","false");
    }
  }
  session=Session.getInstance(props,null);
  if (sendEmlMessage) {
    message=new MimeMessage(session,new FileInputStream(emlMessage));
  }
 else {
    message=new MimeMessage(session);
    Multipart multipart=new MimeMultipart();
    BodyPart body=new MimeBodyPart();
    body.setText(mailBody);
    multipart.addBodyPart(body);
    for (    File f : attachments) {
      BodyPart attach=new MimeBodyPart();
      attach.setFileName(f.getName());
      attach.setDataHandler(new DataHandler(new FileDataSource(f)));
      multipart.addBodyPart(attach);
    }
    message.setContent(multipart);
  }
  if (null != sender) {
    message.setFrom(new InternetAddress(sender));
  }
  if (null != subject) {
    message.setSubject(subject);
  }
  if (receiverTo != null) {
    InternetAddress[] to=new InternetAddress[receiverTo.size()];
    receiverTo.toArray(to);
    message.setRecipients(Message.RecipientType.TO,to);
  }
  if (receiverCC != null) {
    InternetAddress[] cc=new InternetAddress[receiverCC.size()];
    receiverCC.toArray(cc);
    message.setRecipients(Message.RecipientType.CC,cc);
  }
  if (receiverBCC != null) {
    InternetAddress[] bcc=new InternetAddress[receiverBCC.size()];
    receiverBCC.toArray(bcc);
    message.setRecipients(Message.RecipientType.BCC,bcc);
  }
  for (int i=0; i < headerFields.size(); i++) {
    Argument argument=(Argument)((TestElementProperty)headerFields.get(i)).getObjectValue();
    message.setHeader(argument.getName(),argument.getValue());
  }
  message.saveChanges();
  return message;
}
