{
  try {
    List<String> guiClasses=ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(),new Class[]{JMeterGUIComponent.class,TestBean.class});
    controllers=new LinkedList<MenuInfo>();
    configElements=new LinkedList<MenuInfo>();
    listeners=new LinkedList<MenuInfo>();
    postProcessors=new LinkedList<MenuInfo>();
    preProcessors=new LinkedList<MenuInfo>();
    tables=new LinkedList<MenuInfo>();
    reportPage=new LinkedList<MenuInfo>();
    nonTestElements=new LinkedList<MenuInfo>();
    menuMap.put(CONFIG_ELEMENTS,configElements);
    menuMap.put(CONTROLLERS,controllers);
    menuMap.put(LISTENERS,listeners);
    menuMap.put(NON_TEST_ELEMENTS,nonTestElements);
    menuMap.put(POST_PROCESSORS,postProcessors);
    menuMap.put(PRE_PROCESSORS,preProcessors);
    menuMap.put(REPORT_PAGE,reportPage);
    menuMap.put(TABLES,tables);
    Collections.sort(guiClasses);
    Iterator<String> iter=guiClasses.iterator();
    while (iter.hasNext()) {
      String name=iter.next();
      if (name.endsWith("JMeterTreeNode") || name.endsWith("TestBeanGUI")) {
        continue;
      }
      JMeterGUIComponent item;
      try {
        Class<?> c=Class.forName(name);
        if (TestBean.class.isAssignableFrom(c)) {
          item=new TestBeanGUI(c);
        }
 else {
          item=(JMeterGUIComponent)c.newInstance();
        }
      }
 catch (      NoClassDefFoundError e) {
        log.warn("Missing jar? Could not create " + name + ". "+ e);
        continue;
      }
catch (      Throwable e) {
        log.warn("Could not instantiate " + name,e);
        continue;
      }
      if (elementsToSkip.contains(name) || elementsToSkip.contains(item.getStaticLabel())) {
        log.info("Skipping " + name);
        continue;
      }
 else {
        elementsToSkip.add(name);
      }
      Collection<String> categories=item.getMenuCategories();
      if (categories == null) {
        log.debug(name + " participates in no menus.");
        continue;
      }
      if (categories.contains(POST_PROCESSORS)) {
        postProcessors.add(new MenuInfo(item.getStaticLabel(),name));
      }
      if (categories.contains(PRE_PROCESSORS)) {
        preProcessors.add(new MenuInfo(item.getStaticLabel(),name));
      }
      if (categories.contains(CONTROLLERS)) {
        controllers.add(new MenuInfo(item.getStaticLabel(),name));
      }
      if (categories.contains(NON_TEST_ELEMENTS)) {
        nonTestElements.add(new MenuInfo(item.getStaticLabel(),name));
      }
      if (categories.contains(LISTENERS)) {
        listeners.add(new MenuInfo(item.getStaticLabel(),name));
      }
      if (categories.contains(CONFIG_ELEMENTS)) {
        configElements.add(new MenuInfo(item.getStaticLabel(),name));
      }
      if (categories.contains(TABLES)) {
        tables.add(new MenuInfo(item.getStaticLabel(),name));
      }
      if (categories.contains(REPORT_PAGE)) {
        reportPage.add(new MenuInfo(item.getStaticLabel(),name));
      }
    }
  }
 catch (  IOException e) {
    log.error("",e);
  }
}
