{
  result.sampleStart();
  result.setResponseData("<title>PARENT</title>","ISO-8859-1");
  result.sampleEnd();
  SampleResult child1=new SampleResult();
  child1.sampleStart();
  child1.setResponseData("<title>ONE</title>","ISO-8859-1");
  child1.sampleEnd();
  result.addSubResult(child1);
  SampleResult child2=new SampleResult();
  child2.sampleStart();
  child2.setResponseData("<title>TWO</title>","ISO-8859-1");
  child2.sampleEnd();
  result.addSubResult(child2);
  SampleResult child3=new SampleResult();
  child3.sampleStart();
  child3.setResponseData("<title>THREE</title>","ISO-8859-1");
  child3.sampleEnd();
  result.addSubResult(child3);
  extractor.setScopeParent();
  extractor.setTemplate("$1$");
  extractor.setMatchNumber(1);
  extractor.setRegex("<title>([^<]+)<");
  extractor.setDefaultValue("NOTFOUND");
  extractor.process();
  assertEquals("PARENT",vars.get("regVal"));
  extractor.setScopeAll();
  extractor.setMatchNumber(3);
  extractor.process();
  assertEquals("TWO",vars.get("regVal"));
  extractor.setScopeChildren();
  extractor.process();
  assertEquals("THREE",vars.get("regVal"));
  extractor.setRegex(">(...)<");
  extractor.setScopeAll();
  extractor.setMatchNumber(2);
  extractor.process();
  assertEquals("TWO",vars.get("regVal"));
  extractor.setRegex("<title>([^<]+)<");
  extractor.setMatchNumber(-1);
  extractor.setScopeParent();
  extractor.process();
  assertEquals("1",vars.get("regVal_matchNr"));
  extractor.setScopeAll();
  extractor.process();
  assertEquals("4",vars.get("regVal_matchNr"));
  extractor.setScopeChildren();
  extractor.process();
  assertEquals("3",vars.get("regVal_matchNr"));
  extractor.setMatchNumber(0);
  extractor.setScopeParent();
  extractor.process();
  assertEquals("PARENT",vars.get("regVal"));
  extractor.setRegex("(<title>)");
  extractor.setScopeAll();
  extractor.process();
  assertEquals("<title>",vars.get("regVal"));
  extractor.setScopeChildren();
  extractor.process();
  assertEquals("<title>",vars.get("regVal"));
  extractor.setRegex("<title>(...)<");
  extractor.setScopeAll();
  extractor.process();
  final String found=vars.get("regVal");
  assertTrue(found.equals("ONE") || found.equals("TWO"));
}
