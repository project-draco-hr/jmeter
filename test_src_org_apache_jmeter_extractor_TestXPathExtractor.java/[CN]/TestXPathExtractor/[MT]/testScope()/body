{
  extractor.setXPathQuery("/book/preface");
  extractor.process();
  assertEquals("zero",vars.get(VAL_NAME));
  assertEquals("1",vars.get(VAL_NAME_NR));
  assertEquals("zero",vars.get(VAL_NAME + "_1"));
  assertNull(vars.get(VAL_NAME + "_2"));
  extractor.setScopeChildren();
  extractor.process();
  assertEquals("Default",vars.get(VAL_NAME));
  assertEquals("0",vars.get(VAL_NAME_NR));
  assertNull(vars.get(VAL_NAME + "_1"));
  extractor.setScopeAll();
  extractor.process();
  assertEquals("zero",vars.get(VAL_NAME));
  assertEquals("1",vars.get(VAL_NAME_NR));
  assertEquals("zero",vars.get(VAL_NAME + "_1"));
  assertNull(vars.get(VAL_NAME + "_2"));
  result.sampleStart();
  result.sampleEnd();
  SampleResult subResult=new SampleResult();
  subResult.sampleStart();
  subResult.setResponseData(result.getResponseData());
  subResult.sampleEnd();
  result.addSubResult(subResult);
  extractor.setScopeAll();
  extractor.process();
  assertEquals("zero",vars.get(VAL_NAME));
  assertEquals("2",vars.get(VAL_NAME_NR));
  assertEquals("zero",vars.get(VAL_NAME + "_1"));
  assertEquals("zero",vars.get(VAL_NAME + "_2"));
  assertNull(vars.get(VAL_NAME + "_3"));
  extractor.setScopeChildren();
  extractor.process();
  assertEquals("zero",vars.get(VAL_NAME));
  assertEquals("1",vars.get(VAL_NAME_NR));
  assertEquals("zero",vars.get(VAL_NAME + "_1"));
  assertNull(vars.get(VAL_NAME + "_2"));
}
