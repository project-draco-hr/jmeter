{
  String exName=extendsClass.getName();
  Object myThis="";
  Iterator<String> classes=ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(),new Class[]{extendsClass}).iterator();
  List objects=new LinkedList();
  String n="";
  boolean caughtError=true;
  Throwable caught=null;
  try {
    while (classes.hasNext()) {
      n=classes.next();
      if (n.endsWith("RemoteJMeterEngineImpl")) {
        continue;
      }
      Class<?> c=null;
      try {
        c=Class.forName(n);
        try {
          objects.add(c.newInstance());
        }
 catch (        InstantiationException e) {
          caught=e;
          try {
            objects.add(c.getConstructor(new Class[]{Object.class}).newInstance(new Object[]{myThis}));
          }
 catch (          NoSuchMethodException f) {
            System.out.println("WARN: " + exName + ": NoSuchMethodException  "+ n);
          }
        }
      }
 catch (      NoClassDefFoundError e) {
        System.out.println("WARN: " + exName + ": NoClassDefFoundError "+ n);
      }
catch (      IllegalAccessException e) {
        caught=e;
        System.out.println("WARN: " + exName + ": IllegalAccessException "+ n);
      }
catch (      HeadlessException e) {
        caught=e;
        System.out.println("Error creating " + n + " "+ e.toString());
      }
catch (      Exception e) {
        caught=e;
        if (e instanceof RemoteException) {
          System.out.println("WARN: " + "Error creating " + n + " "+ e.toString());
        }
 else {
          throw new Exception("Error creating " + n,e);
        }
      }
    }
    caughtError=false;
  }
  finally {
    if (caughtError) {
      System.out.println("Last class=" + n);
      System.out.println("objects.size=" + objects.size());
      System.out.println("Last error=" + caught);
    }
  }
  if (objects.size() == 0) {
    System.out.println("No classes found that extend " + exName + ". Check the following:");
    System.out.println("Search paths are:");
    String ss[]=JMeterUtils.getSearchPaths();
    for (int i=0; i < ss.length; i++) {
      System.out.println(ss[i]);
    }
    if (!classPathShown) {
      System.out.println("Class path is:");
      String cp=System.getProperty("java.class.path");
      String cpe[]=JOrphanUtils.split(cp,java.io.File.pathSeparator);
      for (int i=0; i < cpe.length; i++) {
        System.out.println(cpe[i]);
      }
      classPathShown=true;
    }
  }
  return objects;
}
