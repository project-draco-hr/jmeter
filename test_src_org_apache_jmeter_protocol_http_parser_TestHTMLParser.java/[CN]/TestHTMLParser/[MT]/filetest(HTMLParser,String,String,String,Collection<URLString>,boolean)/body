{
  String parserName=p.getClass().getName().substring("org.apache.jmeter.protocol.http.parser.".length());
  String fname=file.substring(file.indexOf("/") + 1);
  log.debug("file   " + file);
  File f=findTestFile(file);
  byte[] buffer=new byte[(int)f.length()];
  InputStream is=null;
  try {
    is=new FileInputStream(f);
    int len=is.read(buffer);
    assertEquals(len,buffer.length);
  }
  finally {
    IOUtils.closeQuietly(is);
  }
  Iterator<URL> result;
  if (c == null) {
    result=p.getEmbeddedResourceURLs(buffer,new URL(url),System.getProperty("file.encoding"));
  }
 else {
    result=p.getEmbeddedResourceURLs(buffer,new URL(url),c,System.getProperty("file.encoding"));
  }
  Iterator<String> expected;
  if (orderMatters) {
    expected=getFile(resultFile).iterator();
  }
 else {
    expected=new TreeSet<String>(getFile(resultFile)).iterator();
    TreeSet<URL> temp=new TreeSet<URL>(new Comparator<Object>(){
      public int compare(      Object o1,      Object o2){
        return (o1.toString().compareTo(o2.toString()));
      }
    }
);
    while (result.hasNext()) {
      temp.add(result.next());
    }
    result=temp.iterator();
  }
  while (expected.hasNext()) {
    Object next=expected.next();
    assertTrue(fname + "::" + parserName+ "::Expecting another result "+ next,result.hasNext());
    try {
      assertEquals(fname + "::" + parserName+ "(next)",next,result.next().toString());
    }
 catch (    ClassCastException e) {
      fail(fname + "::" + parserName+ "::Expected URL, but got "+ e.toString());
    }
  }
  assertFalse(fname + "::" + parserName+ "::Should have reached the end of the results",result.hasNext());
}
