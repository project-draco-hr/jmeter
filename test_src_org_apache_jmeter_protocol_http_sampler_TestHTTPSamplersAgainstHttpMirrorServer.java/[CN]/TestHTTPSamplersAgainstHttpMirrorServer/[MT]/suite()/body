{
  final TestSuite testSuite=new TestSuite(TestHTTPSamplersAgainstHttpMirrorServer.class);
  for (int i=0; i < 11; i++) {
    testSuite.addTest(new TestHTTPSamplersAgainstHttpMirrorServer("itemised_testGetRequest_Parameters",i));
    testSuite.addTest(new TestHTTPSamplersAgainstHttpMirrorServer("itemised_testGetRequest_Parameters2",i));
    testSuite.addTest(new TestHTTPSamplersAgainstHttpMirrorServer("itemised_testGetRequest_Parameters3",i));
    testSuite.addTest(new TestHTTPSamplersAgainstHttpMirrorServer("itemised_testPostRequest_UrlEncoded",i));
    testSuite.addTest(new TestHTTPSamplersAgainstHttpMirrorServer("itemised_testPostRequest_UrlEncoded2",i));
    testSuite.addTest(new TestHTTPSamplersAgainstHttpMirrorServer("itemised_testPostRequest_UrlEncoded3",i));
  }
  TestSetup setup=new TestSetup(testSuite){
    private HttpMirrorServer httpServer;
    @Override protected void setUp() throws Exception {
      httpServer=TestHTTPMirrorThread.startHttpMirror(MIRROR_PORT);
      TEST_FILE_CONTENT="some foo content &?=01234+56789-\u007c\u2aa1\u266a\u0153\u20a1\u0115\u0364\u00c5\u2052\uc385%C3%85".getBytes("UTF-8");
      temporaryFile=File.createTempFile("TestHTTPSamplersAgainstHttpMirrorServer","tmp");
      OutputStream output=new FileOutputStream(temporaryFile);
      output.write(TEST_FILE_CONTENT);
      output.flush();
      output.close();
    }
    @Override protected void tearDown() throws Exception {
      httpServer.stopServer();
      httpServer=null;
      if (!temporaryFile.delete()) {
        fail("Could not delete file:" + temporaryFile.getAbsolutePath());
      }
    }
  }
;
  return setup;
}
