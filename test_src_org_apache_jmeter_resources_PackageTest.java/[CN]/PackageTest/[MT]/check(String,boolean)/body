{
  ArrayList<String> alf=new ArrayList<String>(500);
  String res=getResName(resname);
  subTestFailures+=readRF(res,alf);
  Collections.sort(alf);
  String last="";
  for (int i=0; i < alf.size(); i++) {
    String curr=alf.get(i);
    if (curr.equals(last)) {
      subTestFailures++;
      System.out.println("\nDuplicate key =" + curr + " in "+ res);
    }
    last=curr;
  }
  if (resname.length() == 0) {
    defaultPRB=getRAS(res);
    if (defaultPRB == null) {
      throw new IOException("Could not find required file: " + res);
    }
  }
 else   if (checkUnexpected) {
    PropertyResourceBundle prb=getRAS(res);
    if (prb == null) {
      return;
    }
    final ArrayList<String> list=Collections.list(prb.getKeys());
    Collections.sort(list);
    Iterator<String> enumr=list.iterator();
    final boolean mainResourceFile=resname.startsWith("messages");
    while (enumr.hasNext()) {
      String key=enumr.next();
      try {
        String val=defaultPRB.getString(key);
        if (mainResourceFile && val.equals(prb.getString(key))) {
          System.out.println("Duplicate value? " + key + "="+ val+ " in "+ res);
          subTestFailures++;
        }
      }
 catch (      MissingResourceException e) {
        subTestFailures++;
        System.out.println(resourcePrefix + "_" + resname+ " has unexpected key: "+ key);
      }
    }
  }
  if (subTestFailures > 0) {
    fail("One or more subtests failed");
  }
}
