{
  SampleResult resWithSubResults=new SampleResult(nanoTime);
  long beginTest=resWithSubResults.currentTimeInMillis();
  resWithSubResults.sampleStart();
  Thread.sleep(100);
  resWithSubResults.setBytes(300);
  resWithSubResults.setSampleLabel("sample with two subresults");
  resWithSubResults.setSuccessful(true);
  resWithSubResults.sampleEnd();
  long sampleWithSubResultsTime=resWithSubResults.getTime();
  SampleResult resNoSubResults1=new SampleResult(nanoTime);
  resNoSubResults1.sampleStart();
  Thread.sleep(100);
  resNoSubResults1.setBytes(100);
  resNoSubResults1.setSampleLabel("sample with no subresults");
  resNoSubResults1.setSuccessful(true);
  resNoSubResults1.sampleEnd();
  long sample1Time=resNoSubResults1.getTime();
  assertTrue(resNoSubResults1.isSuccessful());
  assertEquals(100,resNoSubResults1.getBytes());
  assertEquals("sample with no subresults",resNoSubResults1.getSampleLabel());
  assertEquals(1,resNoSubResults1.getSampleCount());
  assertEquals(0,resNoSubResults1.getSubResults().length);
  SampleResult resNoSubResults2=new SampleResult(nanoTime);
  resNoSubResults2.sampleStart();
  Thread.sleep(100);
  resNoSubResults2.setBytes(200);
  resNoSubResults2.setSampleLabel("sample with no subresults");
  resNoSubResults2.setSuccessful(true);
  resNoSubResults2.sampleEnd();
  long sample2Time=resNoSubResults2.getTime();
  assertTrue(resNoSubResults2.isSuccessful());
  assertEquals(200,resNoSubResults2.getBytes());
  assertEquals("sample with no subresults",resNoSubResults2.getSampleLabel());
  assertEquals(1,resNoSubResults2.getSampleCount());
  assertEquals(0,resNoSubResults2.getSubResults().length);
  resWithSubResults.addSubResult(resNoSubResults1);
  resWithSubResults.addSubResult(resNoSubResults2);
  assertTrue(resWithSubResults.isSuccessful());
  assertEquals(600,resWithSubResults.getBytes());
  assertEquals("sample with two subresults",resWithSubResults.getSampleLabel());
  assertEquals(1,resWithSubResults.getSampleCount());
  assertEquals(2,resWithSubResults.getSubResults().length);
  long totalTime=resWithSubResults.getTime();
  long overallTime=resWithSubResults.currentTimeInMillis() - beginTest;
  long allsamplesTime=sampleWithSubResultsTime + sample1Time + sample2Time;
  if (totalTime + 3 < allsamplesTime) {
    fail("Total+3: " + totalTime + " < sum(samples): "+ allsamplesTime);
  }
  if (totalTime > overallTime + 3) {
    fail("Total: " + totalTime + " > 3 + overall time: "+ overallTime);
  }
  Calculator calculator=new Calculator();
  calculator.addSample(resWithSubResults);
  assertEquals(600,calculator.getTotalBytes());
  assertEquals(1,calculator.getCount());
  assertEquals(1d / (totalTime / 1000d),calculator.getRate(),0.0001d);
  assertFalse(1d / (sampleWithSubResultsTime / 1000d) <= calculator.getRate());
}
