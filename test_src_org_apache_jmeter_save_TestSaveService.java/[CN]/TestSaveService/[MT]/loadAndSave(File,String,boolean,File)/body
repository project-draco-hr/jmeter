{
  boolean failed=false;
  final FileStats origStats=getFileStats(testFile);
  final FileStats savedStats=getFileStats(savedFile);
  ByteArrayOutputStream out=new ByteArrayOutputStream(1000000);
  try {
    HashTree tree=SaveService.loadTree(testFile);
    SaveService.saveTree(tree,out);
  }
  finally {
    out.close();
  }
  final FileStats compareStats=savedStats == FileStats.NO_STATS ? origStats : savedStats;
  final FileStats outputStats;
  try (ByteArrayInputStream ins=new ByteArrayInputStream(out.toByteArray());Reader insReader=new InputStreamReader(ins);BufferedReader bufferedReader=new BufferedReader(insReader)){
    outputStats=computeFileStats(bufferedReader);
  }
   if ((checkSize && !compareStats.isSameSize(outputStats)) || !compareStats.hasSameLinesCount(outputStats)) {
    failed=true;
    System.out.println();
    System.out.println("Loading file testfiles/" + fileName + " and "+ "saving it back changes its size from "+ compareStats.size+ " to "+ outputStats.size+ ".");
    if (!origStats.hasSameLinesCount(outputStats)) {
      System.out.println("Number of lines changes from " + compareStats.lines + " to "+ outputStats.lines);
    }
    if (saveOut) {
      final File outFile=findTestFile("testfiles/" + fileName + ".out");
      System.out.println("Write " + outFile);
      try (FileOutputStream outf=new FileOutputStream(outFile)){
        outf.write(out.toByteArray());
      }
       System.out.println("Wrote " + outFile);
    }
  }
  return failed;
}
