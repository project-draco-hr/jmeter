{
  if (args.length < 1) {
    System.out.println("You must specify a comma-delimited list of paths to search " + "for unit tests");
    return;
  }
  String home=new File(System.getProperty("user.dir")).getParent();
  System.out.println("Setting JMeterHome: " + home);
  JMeterUtils.setJMeterHome(home);
  initializeLogging(args);
  initializeManager(args);
  String version="JMeterVersion=" + JMeterUtils.getJMeterVersion();
  log.info(version);
  System.out.println(version);
  logprop("java.version",true);
  logprop("java.vm.name");
  logprop("java.vendor");
  logprop("java.home",true);
  logprop("file.encoding",true);
  String msg="default encoding=" + Charset.defaultCharset();
  System.out.println(msg);
  log.info(msg);
  logprop("user.home");
  logprop("user.dir",true);
  logprop("user.language");
  logprop("user.region");
  logprop("user.country");
  logprop("user.variant");
  final String showLocale="Locale=" + Locale.getDefault().toString();
  log.info(showLocale);
  System.out.println(showLocale);
  logprop("os.name",true);
  logprop("os.version",true);
  logprop("os.arch");
  logprop("java.class.version");
  String cp=System.getProperty("java.class.path");
  String[] cpe=JOrphanUtils.split(cp,java.io.File.pathSeparator);
  StringBuilder sb=new StringBuilder(3000);
  sb.append("java.class.path=");
  for (  String path : cpe) {
    sb.append("\n");
    sb.append(path);
    if (new File(path).exists()) {
      sb.append(" - OK");
    }
 else {
      sb.append(" - ??");
    }
  }
  log.info(sb.toString());
  System.out.println("+++++++++++");
  logprop("java.awt.headless",true);
  logprop("java.awt.graphicsenv",true);
  System.out.println("------------");
  try {
    System.out.println("Searching junit tests in : " + args[0]);
    List<String> tests=findJMeterJUnitTests(args[0]);
    Class<?>[] classes=asClasses(tests);
    JUnitCore jUnitCore=new JUnitCore();
    RunListener listener=new TextListener(new RealSystem());
    jUnitCore.addListener(listener);
    Request request=Request.classes(new Computer(),classes);
    if (GraphicsEnvironment.isHeadless()) {
      request=request.filterWith(new ExcludeCategoryFilter(NeedGuiTests.class));
    }
    Result result=jUnitCore.run(request);
    System.exit(result.wasSuccessful() ? 0 : 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(1);
  }
}
